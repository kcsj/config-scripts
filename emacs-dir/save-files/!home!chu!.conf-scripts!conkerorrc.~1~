// ============================
// custom .conkerorrc file
// Matthew Ball (copyleft 2011)
// ============================

// allow for 'contrib' stuff
load_paths.unshift("chrome://conkeror-contrib/content/");

// teach me something whenever I start my browser
homepage = "http://en.wikipedia.org/wiki/Special:Random";

// give me new tabs; open buffers (tabs) in the background
require("new-tabs.js");
require("clicks-in-new-buffer.js");
clicks_in_new_buffer_target = OPEN_NEW_BUFFER_BACKGROUND; 
clicks_in_new_buffer_button = 1; //  midclick links in new buffers with

// auto completion in the minibuffer
minibuffer_auto_complete_default = true;
url_completion_use_history = true; // should work since bf05c87405
url_completion_use_bookmarks = true;

require("mode-line.js");

// funky icons in the modeline
require("mode-line-buttons.js");
mode_line_add_buttons(standard_mode_line_buttons, true);

// we'd like to see the # of buffers being loaded 
add_hook("mode_line_hook", mode_line_adder(loading_count_widget), true);

// we don't need a clock
remove_hook("mode_line_hook", mode_line_adder(clock_widget));

// some bookmarks
define_webjump("conk",  "http://conkeror.org");
define_webjump("efu",   "http://emacs-fu.blogspot.com");
define_webjump("lkml",  "http://lkml.org");
define_webjump("ew",    "http://emacswiki.org");

// some smartlinks
define_webjump("so",    "http://stackoverflow.com/search?q=%s");
define_webjump("yts",   "http://www.youtube.com/results?search_query=%s&aq=f");
define_webjump("imbd",  "http://www.imdb.com/find?s=all&q=%s");

// edit form text with emacs
editor_shell_command = "emacsclient -c";

// copy url with C-c u
interactive("copy-url",
	    "Copy the current buffer's URL to the clipboard",
	    function(I) {
	      var text = I.window.buffers.current.document.location.href;
	      writeToClipboard(text);
	      I.window.minibuffer.message("copied: " + text);
	    });

define_key(default_global_keymap, "C-c u", "copy-url");

// reload conkerorrc with C-c r
interactive("reload-config", "reload conkerorrc",
	    function(I) {
	      load_rc();
	      I.window.minibuffer.message("config reloaded");
	    });

define_key(default_global_keymap, "C-c r", "reload-config");

// org-protocol stuff
function org_capture (url, title, selection, window) {
  var cmd_str =
    'emacsclient \"org-protocol:/capture:/w/'+url+'/'+title+'/'+selection+'\"';
  if (window != null) {
    window.minibuffer.message('Issuing ' + cmd_str);
  }
  shell_command_blind(cmd_str);
}

interactive("org-capture", "Clip url, title, and selection to capture via org-protocol",
	    function (I) {
              org_capture(encodeURIComponent(I.buffer.display_uri_string),
			  encodeURIComponent(I.buffer.document.title),
			  encodeURIComponent(I.buffer.top_frame.getSelection()),
			  I.window);
	    });

// capture with C-c c
define_key(content_buffer_normal_keymap, "C-c c", "org-capture");


