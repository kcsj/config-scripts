#user#
chu

#sorts#
people enum: anneka, bertie, claude, debbie.
entree enum: salad, pate, soup, salmon.
main_dish enum: duck, beef, fish, veal.
dessert enum: brulee, mousse, cheese, ice_cream.
drink enum: sauterne, bordeaux, mineral_water, beaujolais.


#functions#
ate_entree: people -> entree {injective}.
ate_main: people -> main_dish {injective}.
ate_dessert: people -> dessert {injective}.
drank: people -> drink {injective}.


#clauses#
% debbie had the soup as an entree and the fish for her main
ate_entree(debbie) = soup AND ate_main(debbie) = fish.

% man who had the pate had the duck as their main and drank the bordeaux
ate_entree(x) = pate -> (ate_main(x) = duck AND drank(x) = bordeaux) AND NOT (x = debbie OR x = anneka).

% anneka's husband had the beef dish as their main
ate_main(x) = beef -> NOT (x = debbie OR x = anneka).

% the person who ate the salad as an entree did not eat the veal or drink the sauterne
ate_entree(x) = salad -> NOT (ate_main(x) = veal AND drank(x) = sauterne).

% the person who ate the salmon for an entree ate the brulee for their dessert
ate_entree(x) = salmon) -> (ate_dessert(x) = creme_brulee).

% the person who ate the ice-cream for dessert also drank the mineral water
ate_dessert(x) = icecream -> drank(x) = water.

% anneka drank the beajolais and her husband (i.e. the one who ate the beef) did not eat the mousse for dessert
drank(anneka) = beajolais AND ate_main(x) = beef -> NOT (ate_dessert(x) = mousse).

% one of the women ate the cheese for their dessert
ate_dessert(x) = cheese -> x = anneka OR x = debbie.

% claude did not drink the mineral water
NOT (drunk(claude) = mineral_water).


#mode#
SAVE


#problem#



#settings#
solutions: 3
time_limit: 3
pre_test: 3
verbosity {
 job:none
  models:full
  stats:none
}
cv_limit:100000
stack:LARGE



#end#
