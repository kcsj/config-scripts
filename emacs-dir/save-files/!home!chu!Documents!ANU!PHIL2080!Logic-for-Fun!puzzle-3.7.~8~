#user#
chu

#sorts#
scientist enum: alan, geoffrey, margaret, agnes, sophie, james, sonia, henry, tom, zoe.
scientist_gender enum: male, female.
scientist_position enum: full_professor, associate_professor, assistant.
scientist_team enum: pure, applied, history, metrics, comparative, meta.

committee {}.


#functions#
position: scientist -> scientist_position {hidden}.
team: scientist -> scientist_team {hidden}.
gender: scientist -> scientist_gender {hidden}.
gender_count: scientist_gender -> int {hidden}.
scientist_count: scientist -> int {hidden}.
couple: scientist, scientist -> bool {hidden}.

member: scientist -> committee {partial}.

A: scientist. {hidden} % skolem pure footling
B: scientist. {hidden} % skolem applied footling
C: scientist. {hidden} % skolem footling history
D: scientist. {hidden} % skolem footlometrics
E: scientist. {hidden} % skolem comparative footling
F: scientist. {hidden} % skolem metafootling
G: scientist. {hidden} % skolem full professor
H: scientist. {hidden} % skolem associate professor
I: scientist. {hidden} % skolem assistant
J: scientist. {hidden} % skolem male from couple
K: scientist. {hidden} % skolem female from couple


#clauses#
% positions
% ---
position(alan) = full_professor AND position(geoffrey) = full_professor AND position(margaret) = full_professor.
position(agnes) = associate_professor AND position(sophie) = associate_professor AND position(james) = associate_professor AND position(sonia) = associate_professor.
position(henry) = assistant AND position(tom) = assistant AND position(zoe) = assistant.

% teams
% ---
(team(geoffrey) = x) = (x = pure OR x = comparative).
(team(zoe) = x) = (x = pure OR x = history).
(team(sophie) = x) = (x = pure OR x = meta).
(team(henry) = x) = (x = pure OR x = metrics OR x = meta).
(team(margaret) = x) = (x = applied OR x = comparative).
(team(agnes) = x) = (x = applied OR x = metrics).
(team(james) = x) = (x = applied OR x = metrics).
(team(alan) = x) = (x = history OR x = meta).
(team(sonia) = x) = (x = history OR x = meta).
(team(tom) = x) = (x = history OR x = comparative).

% genders
% ---
gender(alan) = male AND gender(geoffrey) = male AND gender(james) = male AND gender(henry) = male AND gender(tom) = male.
gender(margaret) = female AND gender(agnes) = female AND gender(sophie) = female AND gender(sonia) = female AND gender(zoe) = female.

% couples
% ---
couple(x, y) -> couple(y, x).
couple(x, y) -> NOT (gender(x) = gender(y)).
couple(x, y) AND NOT (z = x OR z = y) -> NOT (couple(x, z) OR couple(z, y)).
couple(geoffrey, zoe).
couple(james, sophie).
NOT (couple(henry, y)).
position(x) = full_professor AND couple(x, y) -> x = geoffrey.
EST(J) AND EST(K) -> couple(J, K).
%couple(tom, agnes) OR couple(tom, sonia).

% counts
% ---
EST(member(x)) -> scientist_count(x) = 1.
NOT (EST(member(x))) -> scientist_count(x) = 0.
gender_count(male) = scientist_count(alan) + scientist_count(geoffrey) + scientist_count(james) + scientist_count(henry) + scientist_count(tom).
gender_count(female) = scientist_count(margaret) + scientist_count(agnes) + scientist_count(sophie) + scientist_count(sonia) + scientist_count(zoe).

% the committee must contain:
% ---
% at least one from each team
EST(member(A)) AND team(A) = pure.
EST(member(B)) AND team(B) = applied.
EST(member(C)) AND team(C) = history.
EST(member(D)) AND team(D) = metrics.
EST(member(E)) AND team(E) = comparative.
EST(member(F)) AND team(F) = meta.

% at least one of each rank
EST(member(G)) AND position(G) = full_professor.
EST(member(H)) AND position(H) = associate_professor.
EST(member(I)) AND position(I) = assistant.

% the same number of men as women
DIF(gender_count(male), gender_count(female)) < 2.

% no married couple
EST (member(x)) AND EST(member(y)) -> NOT (couple(x, y)).


#mode#
SAVE


#problem#
Equity   


#settings#
solutions: 3
time_limit: 3
pre_test: 3
verbosity {
 job:none
  models:full
  stats:none
}
cv_limit:100000
stack:LARGE



#end#
