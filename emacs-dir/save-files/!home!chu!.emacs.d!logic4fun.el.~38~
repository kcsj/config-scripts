;;; logic4fun.el --- Major mode for "Logic for Fun" - an interface to John Slaney's "Finite Domain Enumerator"

;; Copyright (C) 2011  Matthew Ball

;; Author: Matthew Ball <mathew.ball@gmail.com>
;; Keywords: extensions, languages

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;;; Commentary:

;; This will add syntax highlighting and appropriate code folding to a file to be used as input to FINDER.

;;; Code:

(defvar logic4fun-mode-hook nil)

(defvar logic4fun-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "C-j") 'newline-and-indent)
    (define-key map (kbd "C-c s") 'logic4fun-insert-sort)
    (define-key map (kbd "C-c f") 'logic4fun-insert-function)
    (define-key map (kbd "C-c c") 'logic4fun-insert-clause)
    (define-key map (kbd "C-c d") 'execute-diagnose-on-current-buffer)
    (define-key map (kbd "C-c e") 'execute-finder-on-current-buffer)
    map)
  "Keymap for `logic4fun-mode'.")

(defconst logic4fun-font-lock-keywords-1
  (list
   '("% .*" . font-lock-comment-face)
   '("\\<\\(AND\\|DIF\\|EST\\|IMP\\|M\\(?:AX\\|IN\\)\\|NOT\\|OR\\|PRED\\|SUCC\\|all_different\\|b\\(?:ijective\\|ool\\)\\|c\\(?:lauses\\|ommutative\\|ut\\|ardinality\\)\\|en\\(?:um\\|d\\)\\|functions\\|hidden\\|in\\(?:jective\\|t\\)\\|no_cut\\|one_one\\|partial\\|s\\(?:orts\\|urjective\\|etting\\)\\|total\\)\\>" . font-lock-builtin-face))
  "Minimal highlighting for `logic4fun-mode' mode")

(defconst logic4fun-font-lock-keywords-2
  (append logic4fun-font-lock-keywords-1
	  (list
	   ;; '("\\<\\(AUTHOR\\|C\\(ONDITION\\|REATED\\)\\|DE\\(FAULT_VALUE\\|SCRIPTION\\)\\|EXTENDED_ATTRIBUTE\\|FROM\\|I\\(MPLEMENTATION\\|N_PARAMETERS\\)\\|JOIN\\|NAME\\|O\\(THERWISE\\|UT_PARAMETERS\\)\\|PERFORMER\\|ROUTE\\|S\\(PLIT\\|TATUS\\)\\|T\\(O\\(OLNAME\\)?\\|YPE\\)\\|VENDOR\\|WPDL_VERSION\\)\\>" . font-lock-keyword-face)
	   ;; '("\\<\\([A-Za-z0-9_]+\\)\\>:" . font-lock-function-name-face)))
	   '("\\<\\([A-Za-z0-9_]+\\)\\>[:(]" . font-lock-keyword-face)))
  "Additional highlighting for `logic4fun-mode' mode")

(defconst logic4fun-font-lock-keywords-3
  (append logic4fun-font-lock-keywords-2
	  (list
	   ;; '("\\<\\(A\\(ND\\|PPLICATIONS\\)\\|BOOLEAN\\|HUMAN\\|INTEGER\\|NO\\|OR\\(GANISATIONAL_UNIT\\)?\\|R\\(EFERENCE\\|OLE\\)\\|S\\(TRING\\|YNCHR\\)\\|UNDER_REVISION\\|WORKFLOW\\|XOR\\)\\>" . font-lock-constant-face)
	   '("\\<\\([A-Za-z0-9_]+\\)\\>" . font-lock-variable-name-face)
	   '("\\<\\(TRUE\\|FALSE\\)\\>" . font-lock-constant-face)))
  "Maximum highlighting for `logic4fun-mode' mode")

(defvar logic4fun-font-lock-keywords logic4fun-font-lock-keywords-3
  "Default highlighting expressions for `logic4fun-mode' mode")

(defvar logic4fun-mode-syntax-table
  (let ((st (make-syntax-table)))
    (modify-syntax-entry ?_ "w" st) ;; the underscore is a valid character in a word
    ;; (modify-syntax-entry ?% ". b" st)
    ;; (modify-syntax-entry ?# "<" st)
    ;; (modify-syntax-entry ?\n ">" st)
    ;; (modify-syntax-entry ?% ". 23" st)
    (modify-syntax-entry ?% "<" st)
    (modify-syntax-entry ?\n ">" st)
    st)
  "Syntax table for `logic4fun-mode'.")

(add-to-list 'auto-mode-alist '("\\.l4f\\'" . logic4fun-mode))

(define-derived-mode logic4fun-mode fundamental-mode "logic4fun"
  "A major mode for editing logic4fun (FINDER) source code."
  :syntax-table logic4fun-mode-syntax-table
  (set (make-local-variable 'comment-start) "% ")
  (set (make-local-variable 'comment-start-skip) "%+\\s-*")
  (set (make-local-variable 'font-lock-defaults) '(logic4fun-font-lock-keywords)))

(setq major-mode 'logic4fun-mode mode-name "logic4fun")

(run-hooks 'logic4fun-mode-hook)

;; need macro for the following three skeletons

(define-skeleton logic4fun-insert-sort
  "Insert a user defined sort."
  "Type name of sort: "
  str ":")

(define-skeleton logic4fun-insert-function
  "Insert a user defined function."
  "Type name of function: "
  str ":")

(define-skeleton logic4fun-insert-clause
  "Insert a user defined clause."
  "Type clause: "
  str)


;; fix the following two functions (make them use COMINT or something instead of the lazy approach taken here)
(defun execute-finder-on-current-buffer ()
  "Execute FINDER (in an eshell process) on the current buffer."
  (interactive)
  (let ((puzzle-file (buffer-file-name)))
    (if (get-buffer eshell-buffer-name)
	(progn
	 (display-buffer eshell-buffer-name t)
	 (switch-to-buffer-other-window eshell-buffer-name))
      (progn
	(split-window-horizontally)
	(other-window 1)
	(eshell)))
    (insert-string (concat "cat " puzzle-file " | ./finder2007_4/finder\n"))
    (eshell-send-input)
    (message (concat "Running \"" puzzle-file "\" in FINDER."))))

(defun execute-diagnose-on-current-buffer ()
  "Execute FINDER's diagnostic tool (in an eshell process) on the current buffer."
  (interactive)
  (let ((puzzle-file (buffer-file-name)))
    (if (get-buffer eshell-buffer-name)
	(progn
	 (display-buffer eshell-buffer-name t)
	 (switch-to-buffer-other-window eshell-buffer-name))
      (progn
	(split-window-horizontally)
	(other-window 1)
	(eshell)))
    (insert-string (concat "./finder2007_4/diagnose " puzzle-file))
    (eshell-send-input)
    (message (concat "Running \"" puzzle-file "\" in FINDER."))))

(provide 'logic4fun)
;;; logic4fun.el ends here