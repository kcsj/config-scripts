Sorts:
child enum: alice, boris, claire, david.
stage enum: before, after, during.

Functions:
% returns the bean count of a specified child at a specified stage
beans: child, stage -> int {}.
% one child gives beans to another child at a specified stage
gives: child, child, stage -> int {}.

Clauses:
% [function: gives]
% if child x gives child y, q beans at (immediately after) stage z then:
% x’s beans at stage z + 1 are equal to x’s beans at stage z minus q beans (and)
% y’s beans at stage z + 1 are equal to y’s beans at stage z plus q beans
gives(x, y, z) = q -> (beans(x, z + 1) = beans(x, z) - q) AND (beans(y, z + 1) = beans(y, z) + q).

% [stage: before]
% each child has a different number of beans (greater than 1 and less than 10)
beans(x, before) > 1 AND beans(x, before) < 10.

% [stage: during]
% all of the numbers of beans given is different, and each is less than 7.
gives(x, y, z) < 7.

% david gives some of his beans to alice immediately after the before stage
gives(david, alice, during) > 0 AND beans(david, during) > 0.

% claire gives some of her beans to boris immediately after the before stage
gives(claire, boris, during) > 0 AND beans(claire, during) > 0.

% boris gives some of his beans to alice immediately after the during stage
gives(boris, alice, during) > 0 AND beans(boris, during) > 0.

% david gives some of his beans to claire immediately after the during stage
gives(david, claire, during) > 0 AND beans(david, during) > 0.

% [stage: after]
beans(x, after) > 1 AND beans(x, after) < 10.

% alice has one more bean than david
beans(alice, after) = beans(david, after) + 1.

% claire has one less bean than boris
beans(claire, after) = beans(boris, after) + 1.

% alice gets more beans from david than she does from boris (questionable)
gives(david, alice, during) > gives(boris, alice, during).
