;; -*- coding: utf-8 -*-
(("Planet Emacsen" nil nil (19774 21473 269566) feed 0 nil nil ((title nil "Planet Emacsen") (link ((rel . "self") (href . "http://planet.emacsen.org/atom.xml"))) (link ((href . "http://planet.emacsen.org/"))) (id nil "http://planet.emacsen.org/atom.xml") (updated nil "2011-01-25T03:02:05+00:00") (generator ((uri . "http://www.planetplanet.org/")) "http://intertwingly.net/code/venus/") (entry nil (title ((type . "html") (xml:lang . "en-us")) "Julien Danjou: Emacs snapshot Ubuntu packages") (link ((href . "http://julien.danjou.info/blog/index.html#Emacs_snapshot_Ubuntu_packages"))) (id nil "http://julien.danjou.info/blog/index.html#Emacs_snapshot_Ubuntu_packages") (updated nil "2011-01-24T14:13:00+00:00") (content ((type . "html")) "<p><a href=\"http://emacs.naquadah.org\">Emacs snapshot packages for Ubuntu</a> are now available, thanks to
<a href=\"http://blog.tapoueh.org\">Dimitri Fontaine</a>.</p>



<a href=\"http://flattr.com/thing/47923/Julien-Danjous-blog\" target=\"_blank\">
<img alt=\"Flattr this\" border=\"0\" src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" title=\"Flattr this\" /></a>") (author nil (name nil "Julien Danjou") (email nil "julien@danjou.info") (uri nil "http://julien.danjou.info/blog/index.html")) (source nil (title ((type . "html")) "jd:/dev/blog") (subtitle ((type . "html")) "Julien Danjou's blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.html"))) (entry nil (title ((type . "html") (xml:lang . "es")) "suso: Actualizado el Manual de GNU Emacs a 22.2") (link ((href . "http://gnu.manticore.es/node/1685"))) (id nil "http://gnu.manticore.es/1685 at http://gnu.manticore.es") (updated nil "2011-01-24T13:56:40+00:00") (content ((type . "html")) "<p>Tengo el inmenso placer de anunciar la actualización de la traducción<br />
del Manual de GNU Emacs<sup class=\"glossary-indicator\" title=\"Encarnación GNU de Emacs.\"><a class=\"glossary-indicator\" href=\"http://gnu.manticore.es/glossary/6/letterg#term47\" title=\"Encarnación GNU de Emacs.\">i</a></sup> a su Decimosexta Edición, correspondiente a<br />
GNU Emacs 22.2.  Sigue estando en fase alfa, aunque hemos corregido<br />
muchos errores mecanográficos y avanzado en tareas de la fase beta.</p>
<p>Ha sido un trabajo arduo e ingrato, pues en dicha edición se produjeron<br />
sustanciales cambios estructurales en el manual original que nos<br />
retrasaron muchísimo la actualización.  Buena parte de esos cambios no<br />
eran de especial importancia desde el punto de vista de la edición en</p>
 <p><a href=\"http://gnu.manticore.es/node/1685\" target=\"_blank\">leer más</a></p>") (author nil (name nil "suso") (uri nil "http://gnu.manticore.es/taxonomy/term/1/0")) (source nil (title ((type . "html")) "GNU + Emacs en español para usuarios finales - Emacs") (link ((rel . "self") (href . "http://gnu.manticore.es/taxonomy/term/1/0/feed"))) (id nil "http://gnu.manticore.es/taxonomy/term/1/0"))) (entry nil (title ((type . "html")) "Tom Breton: cord-and-emacs-3") (link ((href . "http://tehom-blog.blogspot.com/2011/01/cord-and-emacs-3.html"))) (id nil "tag:blogger.com,1999:blog-5983563776019477979.post-604376293439899135") (updated nil "2011-01-24T05:01:32+00:00") (content ((type . "html")) "<div>
<div class=\"outline-2\" id=\"outline-container-1\">
<h2 id=\"sec-1\">cord-and-emacs-3 </h2>
<div class=\"outline-text-2\" id=\"text-1\">



</div>

<div class=\"outline-3\" id=\"outline-container-1_1\">
<h3 id=\"sec-1_1\">Quick catchup </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">


<p>
About a year ago I <a href=\"http://tehom-blog.blogspot.com/2010/03/cords-and-emacs_25.html\">blogged an idea</a> about combining cords and
emacs<sup><a class=\"footref\" href=\"http://tehom-blog.blogspot.com/feeds/posts/default/-/emacs#fn.1\" name=\"fnr.1\">1</a></sup>.  Now that it has jangled around in my head for another
year, I have some further thoughts.  Yesterday I <a href=\"http://tehom-blog.blogspot.com/2011/01/structure-of-emacs-text.html\">talked about</a> how
emacs wants to structure text and how it pretends to.
</p>
<p>
Now I want to talk about the ramifications of structured text on my
wild idea of combining emacs and cords.
</p>
</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_2\">
<h3 id=\"sec-1_2\">Don't ask buffer to hold a list etc </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">


<p>
One things I talked about yesterday was how some modes want the buffer
to be a list or tree of objects.  It's tempting, then, to imagine that
some buffers would hold a list or tree of printable objects instead of
text.
</p>
<p>
But it wouldn't work well.  Even when printable objects fully control
their own representation, as widgets and ewocs do, they are generally
do not want to be the whole printed representation.  They want
accoutrements, often headers, footers, and separators.
</p>
</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_3\">
<h3 id=\"sec-1_3\">So just one object </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">


<p>
So buffer would hold at most one object, either (as now) a text
string, or a printable object that manages both its own sub-objects
(the model) and the cord that it presents for display (the view).
</p>
<p>
Presumably the design is basically recursive, something like this: The
root object supplies a template and farms most of its representation
out to its sub-objects.  They in turn farm it out to sub-sub-objects,
etc.  Each sub<sup>N</sup>-object generates a cord from data that it owns.
</p>
</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_4\">
<h3 id=\"sec-1_4\">Dynamic content </h3>
<div class=\"outline-text-3\" id=\"text-1_4\">


<p>
Our sub<sup>N</sup>-objects will create content dynamically.  Cords support that
with CORD_from_fn.  But doing only that has some drawbacks:
</p>
<ul>
<li>
CORD_fn wants to give one character at a time.  That's very
inefficient.
</li>
<li>
Each displayable object would have to manage caching etc itself.
</li>
<li>
We'll want different things from it for different purposes:
<ul>
<li>
To display
<ul>
<li>
It might be blank or abbreviated for invisibility or folding.
Emacs does this by looking at a magic text property, but it's
really a display concern.
</li>
<li>
It might include ornaments that are not part of the proper
text.
</li>
</ul>
</li>
<li>
To search.
<ul>
<li>
If an item is folded, we generally still want to search its
text.
</li>
<li>
For widgets and similar, we'd like to search on just the real
text and not ornaments in the display such as button
characters.
</li>
</ul>
</li>
<li>
To save to file.
<ul>
<li>
This representation might be completely different that the
displayed text, eg as we do for project-buffer-mode buffers.
</li>
</ul>
</li>
<li>
Other lesser purposes, such as:
<ul>
<li>
Displaying differently in different windows.
</li>
<li>
Exporting
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>
So let's make these objects' lives a little easier.  I suggest adding
to the roster of cords types a super-CORD_from_fn, which would
contain:
</p><ul>
<li>
client<sub>data</sub> as for CORD_from_fn
</li>
<li>
A cache for each major use-type above (display,search,save)
<ul>
<li>
A dirty or uninitialized cache could be indicated as a magic
object.
</li>
<li>
Possibly also a catchall cache for other use-types.
</li>
</ul>
</li>
<li>
A method that:
<ul>
<li>
Takes client_data
</li>
<li>
Takes an object indicating the use-type
</li>
<li>
Returns a cord
</li>
</ul>
</li>
<li>
Not length.  It may differ across use-types.  If cache is dirty,
it's not known, while if cache is clean, one can just find length
in it.
</li>
</ul>


</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_5\">
<h3 id=\"sec-1_5\">Some quick notes </h3>
<div class=\"outline-text-3\" id=\"text-1_5\">


</div>

<div class=\"outline-4\" id=\"outline-container-1_5_1\">
<h4 id=\"sec-1_5_1\">Display and faces </h4>
<div class=\"outline-text-4\" id=\"text-1_5_1\">


<p>
Displaying in different faces need no longer be a trick.  We could add
to the roster of cords types a \"face\" cord that controls the face that
text enclosed in it is displayed in.
</p>
<p>
We could also provide an \"image\" cord, meaning to show that image
inline with the text.
</p>
</div>
</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_6\">
<h3 id=\"sec-1_6\">How to read such files? </h3>
<div class=\"outline-text-3\" id=\"text-1_6\">


<p>
How does one know to use this structuring for a given file?  Just
about as now: an auto-mode-alist tells what mode to use.  A \"mode\"
file-local variable can be used to supplement this mechanism.  Just
let modes can control the read and hand the buffer a
super-CORD_from_fn object instead of a plain text cord object.
</p>
<p>
A file could be visited as plain text by another command,
`find-file-as-text'.
</p>




</div>
</div>
</div>
<div id=\"footnotes\">
<h2 class=\"footnotes\">Footnotes: </h2>
<div id=\"text-footnotes\">
<p class=\"footnote\"><sup><a class=\"footnum\" href=\"http://tehom-blog.blogspot.com/feeds/posts/default/-/emacs#fnr.1\" name=\"fn.1\">1</a></sup> Quick summary: Cords are neat and mondo efficient, Emacs, for
all its greatness, uses buffer-gap which is much weaker.  But emacs
text isn't just text, it has properties and markers and other useful
stuff.  To make that work, we'd have to add some stuff onto cords, but
it's doable.
</p>
</div>
</div>

    </div>
  <div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/5983563776019477979-604376293439899135?l=tehom-blog.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Tehom") (email nil "noreply@blogger.com") (uri nil "http://tehom-blog.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "Tehom") (link ((rel . "self") (href . "http://www.blogger.com/feeds/5983563776019477979/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-5983563776019477979"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Yoni Rabkin Katzenell: rt-liberation.el update") (link ((href . "http://yrk.rabkins.net/emacs/pants-2011-01-23-08-50.html"))) (id nil "http://yrk.rabkins.net/2011/01/23/pants-2011-01-23-08-50") (updated nil "2011-01-23T13:50:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I've pushed out a small update to rt-liberation: When you open, assign and resolve tickets in the browser, point will return the ticket instead of <i>point-min</i>. Really small change; fixes a really annoying behavior.</p><p>

G[ei]t it with: <code>git clone http://yrk.nfshost.com/repos/rt-liberation.git</code></p>") (author nil (name nil "Yoni Rabkin") (uri nil "http://yrk.rabkins.net/emacs/index.atom")) (source nil (title ((type . "html")) "Talk is Talk, Kill is Kill") (subtitle ((type . "html")) "The Bestest Blog... in the World") (link ((rel . "self") (href . "http://yrk.rabkins.net/emacs/index.atom"))) (id nil "http://yrk.rabkins.net/emacs/index.atom") (rights ((type . "html")) "Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Yoni Rabkin"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "Julien Danjou: OrgCamp Paris 2011 review") (link ((href . "http://julien.danjou.info/blog/index.html#OrgCamp_Paris__review"))) (id nil "http://julien.danjou.info/blog/index.html#OrgCamp_Paris__review") (updated nil "2011-01-23T12:26:00+00:00") (content ((type . "html")) "<p class=\"first\">Yesterday afternoon, I was at the first <a href=\"http://www.lifehacking.fr/mediawiki/index.php/OrgModeCampJanvier2011\">OrgCamp in Paris</a>. It was my first
attendance to a <a href=\"http://en.wikipedia.org/wiki/BarCamp\">BarCamp</a>, and I really liked it. It's basically the first
geek event I do not find boring nor useless.</p>

<p>There was about 18-20 persons participating, which was quite high, since we
all initially though we would have been only 5.</p>

<p>We had several presentations of various features and personal usages of
<a href=\"http://www.orgmode.org\">Org-mode</a>. For my part, I've quickly presented the agenda, and my <a href=\"http://bbdb.sourceforge.net/\">BBDB</a>
replacement named <a href=\"http://git.naquadah.org/?p=org-contacts.git;a=summary\">org-contacts</a> (I'll probably talk about it on this blog in
another post later).</p>

<p>The only downside was that Bastien (the new Org-mode maintainer) was not
able to come and join us. On the other side, there were so much to tell for
a first time, I did not have so much time to code. I only have been able to
<a href=\"http://lists.gnu.org/archive/html/emacs-orgmode/2011-01/msg01002.html\">fix one bug</a> reported during my agenda presentation.</p>

<p>In the end, the overall atmosphere was very enthusiastic and friendly, which
was extremely pleasant. The #org-mode-fr IRC channel has been created on
<a href=\"http://freenode.net\">Freenode</a>, following this event. Feel free to join us.</p>

<p>Since people liked it so badly, it seems there should be another barcamp in
the next months. Stay tuned.</p>



<a href=\"http://flattr.com/thing/47923/Julien-Danjous-blog\" target=\"_blank\">
<img alt=\"Flattr this\" border=\"0\" src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" title=\"Flattr this\" /></a>") (author nil (name nil "Julien Danjou") (email nil "julien@danjou.info") (uri nil "http://julien.danjou.info/blog/index.html")) (source nil (title ((type . "html")) "jd:/dev/blog") (subtitle ((type . "html")) "Julien Danjou's blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.html"))) (entry nil (title ((type . "html")) "Tom Breton: Structure of emacs text") (link ((href . "http://tehom-blog.blogspot.com/2011/01/structure-of-emacs-text.html"))) (id nil "tag:blogger.com,1999:blog-5983563776019477979.post-3858024574402722986") (updated nil "2011-01-22T23:17:18+00:00") (content ((type . "html")) "<div>
<div class=\"outline-2\" id=\"outline-container-1\">
<h2 id=\"sec-1\">The effective structure of emacs text </h2>
<div class=\"outline-text-2\" id=\"text-1\">



</div>

<div class=\"outline-3\" id=\"outline-container-1_1\">
<h3 id=\"sec-1_1\">Emacs wants to structure text </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">


<p>
Emacs is not a structural editor, but it structures text a lot.  Right
now I'm writing in org-mode, and in this one buffer I'm looking at
maybe 3 dozen distinct meaningful regions displaying in 8 different
faces.  And that's just what I've written so far, here at the third
paragraph.
</p>
<p>
Furthermore, there are outlines, ewocs, widgets, overlays, and
stretches of text that have their own keymaps, or faces, or actions
before and after insertion, etc.  On the emacs-devel list, they were
recently proposing \"islands\" of text that would nearly have their own
modes.
</p>

</div>

<div class=\"outline-4\" id=\"outline-container-1_1_1\">
<h4 id=\"sec-1_1_1\">But the structure is a trick </h4>
<div class=\"outline-text-4\" id=\"text-1_1_1\">


<p>
Yet except for overlays, they are all tricks.  They are faked by
careful control over emacs' interaction with the text \"inside\" the
fake objects.  This can involve controlling point motion, regions,
insertion, marks, display, sticky properties, etc.  As an elisp
programmer, IMO this need to fake structure contributes more
complexity to elisp code than any other single factor does.
</p>
<p>
It also makes for fragile interactions.  A user can accidentally
transgress the structural assumptions, for instance by splitting a
headline in an outline.  Sometimes I do.  It's hard to prevent.
</p>
</div>

</div>

<div class=\"outline-4\" id=\"outline-container-1_1_2\">
<h4 id=\"sec-1_1_2\">Flexibility is important too </h4>
<div class=\"outline-text-4\" id=\"text-1_1_2\">


<p>
On the other hand, there's something to be said for that situation.
It's flexible.  It doesn't limit you to a predefined set of types and
operations on them.  It doesn't need to predict what sort of structure
will be useful, because it doesn't provide any.  It just hands the
Elisp programmer a set of basic tools with which to build structure.
</p>
</div>
</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_2\">
<h3 id=\"sec-1_2\">The dimensions of useful text structure </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">



</div>

<div class=\"outline-4\" id=\"outline-container-1_2_1\">
<h4 id=\"sec-1_2_1\">Boundaries </h4>
<div class=\"outline-text-4\" id=\"text-1_2_1\">


</div>

<div class=\"outline-5\" id=\"outline-container-1_2_1_1\">
<h5 id=\"sec-1_2_1_1\">Solid objects </h5>
<div class=\"outline-text-5\" id=\"text-1_2_1_1\">


<p>
On the one hand, there are structures that want to be real objects,
with an inside and an outside.  For example, an ewoc or a widget.
</p>
<p>
There's no such thing as half of one of these.  Half an ewoc makes no
sense.  If you kill half the text inside a widget, you're left with a
complete widget that has less text.
</p>
<p>
We don't want to cross scope on these objects at all.  A region with
(say) point inside a widget and mark outside is not generally useful.
</p>
</div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_1_2\">
<h5 id=\"sec-1_2_1_2\">Not solid: Mere stretches of text </h5>
<div class=\"outline-text-5\" id=\"text-1_2_1_2\">


<p>
On the other hand, there are structures that want to be just stretches
of text.  For example, ordinary text even if you have marked a region
in it, or given some part of it a special face or property.
</p>
<p>
These have no intrinsic inside and outside, nor any strong intrinsic
structure.  In fact, these things are scarcely \"things\".  We're just
pointing at some length of text, asking whether it's an object, and
getting \"no\".
</p>
</div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_1_3\">
<h5 id=\"sec-1_2_1_3\">Semi-solid objects </h5>
<div class=\"outline-text-5\" id=\"text-1_2_1_3\">


<p>
And there are intermediate cases.  For example, an item in an outline.
For a less solid example, a word or paragraph in a text mode.
</p>
<p>
These still want to have an inside and an outside, but it's editable.
If you delete the whitespace between two words, you've got just one
word.
</p>
</div>
</div>

</div>

<div class=\"outline-4\" id=\"outline-container-1_2_2\">
<h4 id=\"sec-1_2_2\">Holds data? </h4>
<div class=\"outline-text-4\" id=\"text-1_2_2\">


<p>
If there's a text-containing object, can it hold data in addition to
the text itself?  In emacs, the answer is always \"yes\".  Text can have
properties, which can be of any type.
</p>
<p>
So the question is not \"does it hold data?\", but \"does it hold data in
a way that covaries with the (pseudo)type of object it is?\"
</p>
<p>
For ewocs and widgets, the answer is clearly yes.  Even for outline
items, the answer wants to be yes.  For instance, org items can have
properties, and all outline items have an implied \"depth\" property.
</p>
</div>

</div>

<div class=\"outline-4\" id=\"outline-container-1_2_3\">
<h4 id=\"sec-1_2_3\">Has behavior? </h4>
<div class=\"outline-text-4\" id=\"text-1_2_3\">


<p>
Again, in emacs the answer is always \"yes\", and of course there's the
caveat that behavior is really due to commands and not objects and we
need to rule out buggy commands that don't understand the given
object.
</p>
<p>
So again we need to refine the question.  \"Does it, in conjunction
with the set of commands appropriate to it, behave in a way that
covaries with the (pseudo)type of object it is?\"
</p>
<p>
Again, for the solid objects the answer is clearly yes, and \"yes\" also
seems correct for the semi-solid objects.
</p>
</div>

</div>

<div class=\"outline-4\" id=\"outline-container-1_2_4\">
<h4 id=\"sec-1_2_4\">Weight </h4>
<div class=\"outline-text-4\" id=\"text-1_2_4\">



</div>

<div class=\"outline-5\" id=\"outline-container-1_2_4_1\">
<h5 id=\"sec-1_2_4_1\">Lightweight </h5>
<div class=\"outline-text-5\" id=\"text-1_2_4_1\">


<p>
For instance, words and paragraphs.  Emacs deals specially with those
in various ways.  But it often does so without remembering the
lightweight object as an entity.  For instance, word constituents are
defined the syntax table.
</p>
</div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_4_2\">
<h5 id=\"sec-1_2_4_2\">Heavyweight </h5>
<div class=\"outline-text-5\" id=\"text-1_2_4_2\">


<p>
For instance, widgets.  Also ewocs.
</p>
</div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_4_3\">
<h5 id=\"sec-1_2_4_3\">In between </h5>
<div class=\"outline-text-5\" id=\"text-1_2_4_3\">


<p>
Of course there's a whole spectrum of weight in between widgets and
words.
</p>
</div>
</div>

</div>

<div class=\"outline-4\" id=\"outline-container-1_2_5\">
<h4 id=\"sec-1_2_5\">Impact on buffer structure </h4>
<div class=\"outline-text-4\" id=\"text-1_2_5\">



</div>

<div class=\"outline-5\" id=\"outline-container-1_2_5_1\">
<h5 id=\"sec-1_2_5_1\">Observation </h5>
<div class=\"outline-text-5\" id=\"text-1_2_5_1\">


<p>
(This is not a category).  The other dimensions were keyed by object
type, but for this dimension ISTM it makes more sense to key by mode
type.
</p></div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_5_2\">
<h5 id=\"sec-1_2_5_2\">Total </h5>
<div class=\"outline-text-5\" id=\"text-1_2_5_2\">


<p>
In some modes, the buffer wants to be structured from beginning to
end.  For instance, dired or gnus.
</p>
<p>
Yanking in unstructured text would just confuse the mode.  Often the
buffer is read-only, even if user operations modify it, so that one
can't mess up the structured text at all.
</p>
</div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_5_3\">
<h5 id=\"sec-1_2_5_3\">Minimal </h5>
<div class=\"outline-text-5\" id=\"text-1_2_5_3\">


<p>
Some modes expect essentially no structure.  For instance, fundamental
mode.  One can yank in arbitrary text; it's nothing special.  Now the
buffer has more text in it.
</p>
<p>
Text-mode is another example, now a little more structured.  It can be
viewed as structured into paragraphs, but any text whatsoever
qualifies as zero or more paragraphs.
</p>
</div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_5_4\">
<h5 id=\"sec-1_2_5_4\">Partly structured </h5>
<div class=\"outline-text-5\" id=\"text-1_2_5_4\">


<p>
Other modes are intermediate.  For instance, outline mode, org mode,
or almost any source code mode.
</p>
<p>
These modes generally try to cope with any arbitrary text in it.  They
don't try to prevent killing or yanking.  But they also treat some
text specially or give it extra meaning - for outline, it's headlines
and stars.  For source code, it generally includes comments, code,
strings.
</p>
<p>
So the user is free to kill or yank, but needs to be somewhat careful
and needs to understand the meaning of various types of text.
</p>


</div>
</div>
</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_3\">
<h3 id=\"sec-1_3\">The picture </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">


<p>
So as I see it, the picture is one of wanna-be objects of varying
sizes floating around in emacs buffers.  The heavier ones are trying
to be real objects, the lighter ones aren't (much).  Some modes want
to be made up of text, others really want to be a list or tree of
objects.
</p>
<p>
In the next post, I plan to build on that.
</p>
</div>
</div>
</div>

    </div>
  <div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/5983563776019477979-3858024574402722986?l=tehom-blog.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Tehom") (email nil "noreply@blogger.com") (uri nil "http://tehom-blog.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "Tehom") (link ((rel . "self") (href . "http://www.blogger.com/feeds/5983563776019477979/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-5983563776019477979"))) (entry nil (title ((type . "html")) "Flickr tag 'emacs': emacs_sdic_waei") (link ((href . "http://www.flickr.com/photos/syohex/5377964920/"))) (id nil "tag:flickr.com,2004:/photo/5377964920") (updated nil "2011-01-22T13:46:19+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/syohex/\">896c0476fd083deb41404f54a6466a77</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/syohex/5377964920/\" title=\"emacs_sdic_waei\"><img alt=\"emacs_sdic_waei\" height=\"240\" src=\"http://farm6.static.flickr.com/5244/5377964920_0a198bf06a_m.jpg\" width=\"226\" /></a></p>") (author nil (name nil "896c0476fd083deb41404f54a6466a77") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/"))) (entry nil (title ((type . "html")) "Flickr tag 'emacs': external_editor_emacs") (link ((href . "http://www.flickr.com/photos/syohex/5376725858/"))) (id nil "tag:flickr.com,2004:/photo/5376725858") (updated nil "2011-01-21T23:51:08+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/syohex/\">896c0476fd083deb41404f54a6466a77</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/syohex/5376725858/\" title=\"external_editor_emacs\"><img alt=\"external_editor_emacs\" height=\"240\" src=\"http://farm6.static.flickr.com/5247/5376725858_ed114a1e6e_m.jpg\" width=\"226\" /></a></p>") (author nil (name nil "896c0476fd083deb41404f54a6466a77") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Yoni Rabkin Katzenell: <p>I've changed my tramp default to blog editing with:</p>") (link ((href . "http://yrk.rabkins.net/emacs/pants-2011-01-19-23-33.html"))) (id nil "http://yrk.rabkins.net/2011/01/19/pants-2011-01-19-23-33") (updated nil "2011-01-20T04:33:00+00:00") (content ((type . "html") (xml:lang . "en")) "<pre><code>
(setq tramp-default-method \"ssh\"
      vc-ignore-dir-regexp (format \"\\\\(%s\\\\)\\\\|\\\\(%s\\\\)\"
				   vc-ignore-dir-regexp
				   tramp-file-name-regexp)
      tramp-default-host \"my.server.com#1234\"
      tramp-default-user \"emacs\")
</code>
</pre>
So I can show up in the server with <code>C-x C-f /ssh:: RET</code>") (author nil (name nil "Yoni Rabkin") (uri nil "http://yrk.rabkins.net/emacs/index.atom")) (source nil (title ((type . "html")) "Talk is Talk, Kill is Kill") (subtitle ((type . "html")) "The Bestest Blog... in the World") (link ((rel . "self") (href . "http://yrk.rabkins.net/emacs/index.atom"))) (id nil "http://yrk.rabkins.net/emacs/index.atom") (rights ((type . "html")) "Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Yoni Rabkin"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Mickey Petersen: Make script files executable automatically") (link ((href . "http://www.masteringemacs.org/articles/2011/01/19/script-files-executable-automatically/"))) (id nil "http://www.masteringemacs.org/?p=295") (updated nil "2011-01-19T15:28:15+00:00") (content ((type . "html") (xml:lang . "en")) "<p>You can force Emacs to make a file executable (respecting your <code>umask</code> settings) if Emacs considers it a script. To determine if it is a script, Emacs will look for the <em>hash-bang</em> notation in the file and treat it as a script if it finds it.</p>
<p>Add this to your .emacs and Emacs will then make the file executable if it is a script.</p>

<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span>add-hook 'after-save-hook
  'executable-make-buffer-file-executable-if-script-p<span style=\"color: #66cc66;\">)</span></pre></div></div>

<p><a class=\"a2a_button_reddit\" href=\"http://www.addtoany.com/add_to/reddit?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Reddit\"><img alt=\"Reddit\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/reddit.png\" width=\"16\" /></a> <a class=\"a2a_button_twitter\" href=\"http://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Twitter\"><img alt=\"Twitter\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/twitter.png\" width=\"16\" /></a> <a class=\"a2a_button_google_reader\" href=\"http://www.addtoany.com/add_to/google_reader?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Google Reader\"><img alt=\"Google Reader\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/reader.png\" width=\"16\" /></a> <a class=\"a2a_button_delicious\" href=\"http://www.addtoany.com/add_to/delicious?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Delicious\"><img alt=\"Delicious\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/delicious.png\" width=\"16\" /></a> <a class=\"a2a_button_facebook\" href=\"http://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Facebook\"><img alt=\"Facebook\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/facebook.png\" width=\"16\" /></a> <a class=\"a2a_dd addtoany_share_save\" href=\"http://www.addtoany.com/share_save\"><img alt=\"Share\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/favicon.png\" width=\"16\" /></a> </p>") (author nil (name nil "mickey") (uri nil "http://www.masteringemacs.org")) (source nil (title ((type . "html")) "Mastering Emacs") (subtitle ((type . "html")) "mastering the world's best text editor") (link ((rel . "self") (href . "http://www.masteringemacs.org/feed/"))) (id nil "http://www.masteringemacs.org"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Ian Eure: Toggle between root &amp; non-root in Emacs with Tramp") (link ((href . "http://atomized.org/2011/01/toggle-between-root-non-root-in-emacs-with-tramp/"))) (id nil "http://atomized.org/?p=794") (updated nil "2011-01-19T03:26:47+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I love that I can edit files on remote hosts right from the comfort of my local Emacs session. Even better, you can edit those same files as root, given <a href=\"http://www.gnu.org/software/emacs/manual/html_node/tramp/Multi_002dhops.html\">the proper configuration.</a></p>
<p>Unfortunately, the interface for this is a bit fiddly. I find myself taking one of two approaches:</p>
<ol>
<li>Open a file as non-root, then hit <code>C-x C-v</code> and edit the filename to use <code>/sudo:root@…</code>.</li>
<li>Hit <code>C-x C-f</code>, edit the directory to use <code>/sudo:root@…</code>, then open the file I want.</li>
</ol>
<p>Since I didn’t like either of these, I wrote two functions to assist:</p>
<ul>
<li><code>find-file-as-root</code> behaves as <code>find-file</code>, except the default shown is changed to be <code>/sudo:root@…</code></li>
<li><code>toggle-alternate-file-as-root</code> is similar to <code>toggle-read-only</code> (<code>C-x C-q</code>), in that it will swap back and forth between the unprivileged version of a file and the as-root version.</li>
</ul>
<p></p>
<p>I bind these to <code>C-c C-x C-q</code> and <code>C-c x f</code>, respectively.</p>
<p>There are two caveats. The first is that you must have <code>tramp-default-proxies-alist</code> configured for the <code>sudo</code> method to work on remote hosts. The second is that it is impossible to know for sure what the previous file name was after invoking <code>toggle-alternate-file-as-root</code>. Any buffer-local values are lost after replacing the buffer with the sudo version, and if I used a persistent structure outside of the buffer, it would require more complexity to prevent it from going stale. So instead, it just make a best effort to come up with something reasonable. Edge cases are going to fail, such as when you are editing a file as another non-root user. Patches are welcomed.</p>") (author nil (name nil "Ian") (uri nil "http://atomized.org")) (source nil (title ((type . "html")) "Atomized » emacs") (subtitle ((type . "html")) "Fragmenting reality.") (link ((rel . "self") (href . "http://atomized.org/tag/emacs/feed/"))) (id nil "http://atomized.org"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Daniel Blanc: Blogging with emacs, org-mode and wordpress") (link ((href . "http://42kettles.net/?p=29"))) (id nil "http://42kettles.net/?p=29") (updated nil "2011-01-18T19:13:49+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I want to be able to seemlessly publish from emacs to wordpress. I’d like to create or update posts as an org-mode entry and then to publish them on this blog. </p>
<p> To achieve this I’ll need <a class=\"aga aga_3\" href=\"https://github.com/punchagan/org2blog\">org2blog/wp</a>, a lisp package that can export org entries to wordpress, org2blog depends on <a class=\"aga aga_4\" href=\"https://launchpad.net/xml-rpc-el\">xml-rpc-el</a>. </p>
<p> So first step is to get the software from the code repos: </p>
<pre class=\"example\">$ cd ~/.emacs.d/
$ bzr branch lp:xml-rpc-el
$ git clone https://github.com/punchagan/org2blog.git
</pre>
<p> Then add some lines in ~/.emacs.d/init.el: </p>
<pre class=\"src src-emacs-lisp\"><span class=\"linenr\"> 1:  </span>(add-to-list 'load-path <span style=\"color: #e9b96e;\">\"~/.emacs.d/xml-rpc-el\"</span>)
<span class=\"linenr\"> 2:  </span>(add-to-list 'load-path <span style=\"color: #e9b96e;\">\"~/.emacs.d/org2blog\"</span>)
<span class=\"linenr\"> 3:  </span>(<span style=\"color: #b4fa70;\">require</span> '<span style=\"color: #e6a8df;\">org2blog</span>)
<span class=\"linenr\"> 4:  </span>
<span class=\"linenr\"> 5:  </span>(setq org2blog/wp-blog-alist
<span class=\"linenr\"> 6:  </span>  '((<span style=\"color: #e9b96e;\">\"42kettles\"</span>
<span class=\"linenr\"> 7:  </span>    <span style=\"color: #ad7fa8;\">:url</span> <span style=\"color: #e9b96e;\">\"http://42kettles.net/xmlrpc.php\"</span>
<span class=\"linenr\"> 8:  </span>    <span style=\"color: #ad7fa8;\">:username</span> <span style=\"color: #e9b96e;\">\"xxxx\"</span>
<span class=\"linenr\"> 9:  </span>    <span style=\"color: #ad7fa8;\">:tags-as-categories</span> nil)))
<span class=\"linenr\">10:  </span>
<span class=\"linenr\">11:  </span>(setq org2blog/wp-track-posts nil)
</pre>
<p> Then try to login just to be sure that everything is working smoothly: </p>
<pre class=\"example\">M-x org2blog/wp-login
</pre>
<p> If it doesn’t work, check that xml-rpc is enabled in wordpress’s writing settings. </p>
<p> Now to post or update an article all I have to do is to go to the org-mode entry I want to publish and do: </p>
<pre class=\"example\">M-x org2blog/wp-post-subtree
</pre>
<p> And that’s it ! </p>
<p> Small tweaks I need to do: </p>
<ul>
<li> by default the entry is posted as a draft, I’ve yet to find how to publish it. </li>
<li> define settings for syntax highlighting </li>
<li> define settings for categories/tags and org file structure (test tag inheritance). </li>
</ul>
<p> I’m all for ATOM so as wordpress support it, I may give a try to <a class=\"aga aga_5\" href=\"http://www.emacswiki.org/emacs/Org2BlogAtom\">org2blog/atom</a>. </p>") (author nil (name nil "dabl") (uri nil "http://42kettles.net")) (source nil (title ((type . "html")) "42 kettles » emacs") (subtitle ((type . "html")) "Don't panic !") (link ((rel . "self") (href . "http://42kettles.net/?cat=6&feed=atom"))) (id nil "http://42kettles.net/?feed=atom"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "Chris Ball: MIT Mystery Hunt 2011") (link ((href . "http://blog.printf.net/articles/2011/01/18/mit-mystery-hunt-2011"))) (id nil "urn:uuid:52add30e-85a2-418e-bb19-bd2cbc2bf6d5") (updated nil "2011-01-18T19:01:00+00:00") (content ((type . "html")) "Well, that was unexpected — the <a href=\"http://en.wikipedia.org/wiki/MIT_Mystery_Hunt\">Mystery Hunt</a> team I've hunted with for the past three years, Codex, won the hunt this year!  It's the team's tenth year of competing and our first win.  Congrats to everyone!  Here's a <a href=\"http://www.boston.com/news/local/massachusetts/articles/2011/01/17/at_mit_mystery_hunt_teams_labor_to_solve_elaborate_puzzles/\">Boston Globe</a> article about the whole thing.
<p></p><p>
The hunt organizers did a beautiful job putting together the hunt (it took an estimated 20,000 person-hours), and the laser-etched \"coin\" we won the hunt by finding at 6am on Sunday morning was a reflection of how much effort had gone into the hunt in general:
</p><p>
</p><div align=\"center\">
 <a href=\"http://www.flickr.com/photos/16838219@N00/5364190449/\"> <img alt=\"The coin!\" src=\"http://chris.printf.net/2011-coin.jpg\" /></a>
 <br /><i>The coin!</i>
</div>
<p></p><p>
Of course, this means that now it's our turn to write the hunt — as <a href=\"http://cananian.livejournal.com/61919.html\">Scott</a> says, our free time for the next year has just vanished.  It'll be fun, though; it's always sad when the hunt ends and you realize you aren't going to get to hang out with the awesome people you just spent a sleepless weekend solving puzzles with until next year, but having to meet up regularly to write and test the puzzles for next year will fix that.  We've got a very high bar to live up to, and a thirty-year-old tradition to keep alive.
</p><p></p><p>
(Oh, yeah, geekiest moment of the hunt: one of the puzzles  — <a href=\"http://ihavetofindpeach.com/puzzles/mega_man/redundant_obsolescence/answer/\">Redundant Obsolescence</a> — involved plugging an Iomega Zip drive into my desktop PC via parallel port and reading files back off it, in Linux.  I couldn't believe it worked.)
</p><p></p><p>

While I'm here and blogging, here's a guitar video I recorded over Christmas.  I'm happy I finally got to record a Kaki King piece.

</p><div align=\"center\">
 
<br />
 <i>Kaki King - Goby (<a href=\"http://www.youtube.com/watch?v=5MTiXDunjEU&amp;hd=1\">youtube</a>, <a href=\"http://chris.printf.net/goby.ogv\">download in Ogg Theora</a>)
 </i> 
</div>") (author nil (name nil "Chris Ball") (uri nil "http://blog.printf.net")) (source nil (title ((type . "html")) "Chris Ball") (link ((rel . "self") (href . "http://blog.printf.net/xml/rss20/feed.xml"))) (id nil "http://blog.printf.net"))) (entry nil (title ((type . "html")) "Got Emacs?: emacs-23.2.92 pretest binaries available") (link ((href . "http://feedproxy.google.com/~r/GotEmacs/~3/7TJXLNYZ03g/emacs-23292-pretest-binaries-available.html"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420.post-1038695036045328126") (updated nil "2011-01-17T02:28:52+00:00") (content ((type . "html")) "<div><a href=\"http://permalink.gmane.org/gmane.emacs.devel/134608\" target=\"_blank\">New Emacs pretest binaries</a> for windows are available <a href=\"http://alpha.gnu.org/gnu/emacs/pretest/windows/\" target=\"_blank\">here</a>.<br /></div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-1038695036045328126?l=emacsworld.blogspot.com\" width=\"1\" /></div>
<p><a href=\"http://feedads.g.doubleclick.net/~a/cG3ULTGuFzqb3Vwg44eRbhx0zag/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/cG3ULTGuFzqb3Vwg44eRbhx0zag/0/di\" /></a><br />
<a href=\"http://feedads.g.doubleclick.net/~a/cG3ULTGuFzqb3Vwg44eRbhx0zag/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/cG3ULTGuFzqb3Vwg44eRbhx0zag/1/di\" /></a></p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/7TJXLNYZ03g\" width=\"1\" />") (author nil (name nil "sivaram") (email nil "noreply@blogger.com") (uri nil "http://emacsworld.blogspot.com/")) (source nil (title ((type . "html")) "Got Emacs?") (subtitle ((type . "html")) "Postings on living in an Emacs world.  Posts will be mostly on using Emacs, related functions and tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/GotEmacs"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420"))) (entry nil (title ((type . "html") (xml:lang . "en")) "sachachua: Emacs 24 and the package manager") (link ((href . "http://sachachua.com/blog/2011/01/emacs-24-package-manager/"))) (id nil "http://sachachua.com/blog/?p=22045") (updated nil "2011-01-15T16:00:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p>By default, the Emacs 24 package manager (<code>M-x package-list-packages</code>) points to a small repository of Emacs packages. Want more? <a href=\"http://technomancy.us/144\">Phil Hagelberg</a> added support for multiple repositories to package.el. There’s the original ELPA at <a href=\"http://tromey.com/elpa\">http://tromey.com/elpa</a>, and there’s a community package source called Marmalade that anyone can upload packages to. Add this to your <code>~/.emacs</code> and evaluate it: </p>
<pre class=\"src src-emacs-lisp\"><span style=\"color: #ff7f24;\">;; </span><span style=\"color: #ff7f24;\">Add the original Emacs Lisp Package Archive
</span>(add-to-list 'package-archives
             '(<span style=\"color: #ffa07a;\">\"elpa\"</span> . <span style=\"color: #ffa07a;\">\"http://tromey.com/elpa/\"</span>))
<span style=\"color: #ff7f24;\">;; </span><span style=\"color: #ff7f24;\">Add the user-contributed repository
</span>(add-to-list 'package-archives
             '(<span style=\"color: #ffa07a;\">\"marmalade\"</span> . <span style=\"color: #ffa07a;\">\"http://marmalade-repo.org/packages/\"</span>))
</pre>
<p> You should then be able to call <code>M-x package-list-packages</code> to browse and install Emacs packages. </p>
<p> If you don’t have <a href=\"http://sachachua.com/blog/2010/12/whats-new-in-emacs-24/\">Emacs 24</a> yet (and you might want to wait for the official release if you use things like BBDB), Phil suggests downloading <a href=\"http://bit.ly/pkg-el\">package.el</a> from the Emacs development tree. This version includes support for multiple repositories. </p>
<p> For even more Emacs goodness outside the package system, check out <a href=\"https://github.com/emacsmirror\">the Emacs mirror</a>, which lists more than 2,900 packages available through Git.  </p>
<p> Thanks to: </p>
<ul>
<li> <a href=\"http://technomancy.us/144\">Phil Hagelberg for the post about ELPA</a> </li>
<li> <a href=\"http://blog.emacsmirror.org/announcing-the-emacsmirror\">Jonas Bernoulli for the post about emacsmirror</a> </li>
</ul>
<p> <span class=\"timestamp-wrapper\"> <span class=\"timestamp\">2011-01-15 Sat 10:31</span></span> </p>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2011/01/emacs-24-package-manager/\">Emacs 24 and the package manager</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Mickey Petersen: Effective Editing I: Movement") (link ((href . "http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/"))) (id nil "http://www.masteringemacs.org/?p=266") (updated nil "2011-01-14T15:32:32+00:00") (content ((type . "html") (xml:lang . "en")) "<p>If you can master movement and editing in Emacs, you have effectively conquered two of the biggest productivity boosters available to you. Emacs has unrivaled movement and editing capabilities and aside from enabling Ido Mode, few other things in Emacs will, pound-for-pound, give you a bigger productivity boost.</p>
<p><span id=\"more-266\"></span></p>
<h2>Overview</h2>
<p>Emacs has grown organically — some might say uncontrollably like kudzu — over its more than 30 year history, and in that time it has been honed and sharpened as a tool for effective text and source code editing. I’ve met lots of IDE users who use the mouse to edit text or access menu options, even though — and they realize this — it is very ineffective. But old habits die hard, and when your IDE’s most advanced text editing capability is a poorly-emulated <em>Brief</em> mode it’s no wonder people can’t be bothered.</p>
<p>The best way to maximize your productivity is to eliminate common bottlenecks like learning how to touch type and, of course, mastering Emacs. Editing text effectively can take a while to learn, as there are many specialized tools available to you to make your life easier. I’ve been using Emacs for a long time and I still learn new ways of doing things faster; but ultimately it is tenacity and persistence that will pay off in the long run.</p>
<p>Included in this series will be code snippets, suggestions for rebinding keys and other tips and tricks I’ve picked up over the years. You may not want to use all of them — which is fine — but I will try to highlight the importance of switching or changing something to give you an idea of how much of an improvement it is.</p>
<h2>Command Arguments</h2>
<h3>Universal Argument</h3>
<p>This concept deserves a mention as it will invoke an extended, and typically more complex, version of a command <em>or</em> it will default to the numeric argument <code>4</code>, meaning it essentially does the same as though you had typed <code>C-u 4</code>. The <em>universal argument</em> (also known as <em>prefix argument</em>) is multiplicative when invoked repeatedly.</p>
<h3>Numeric Argument</h3>
<p>The <em>numeric argument</em> is so called because it lets you pass a numeric constant to a command. What the number is for used for depends entirely on the command you use it on. For <code>C-p</code> it moves up <em>n</em> lines, for other commands it does nothing. It all depends. Most commands do what you would expect.</p>
<p>Because numeric arguments are so useful they are bound to a multitude of keys: <code>M-0</code> to <code>M-9</code>; <code>C-0</code> to <code>C-9</code>; <code>C-M-0</code> to <code>C-M-9</code> and <code>C-u &lt;num&gt;</code>.</p>
<p>By duplicating the same command multiple times, you don’t have to move your fingers to execute a command that uses <code>C-</code>, <code>M-</code> or <code>C-M-</code>. So to run the command <code>forward-word</code>, bound to <code>M-f</code>, 10 times you’d type <code>M-1 M-0 M-f</code>.</p>
<p>Simple things like duplicate keybindings cut down on finger-straining typing and it increases the likelihood of people actually <em>using</em> numeric arguments in the first place. Odd or hard to reach keys are used less — empirically, it is not a difficult conclusion to reach.</p>
<h3>Negative Argument</h3>
<p>When used with the numeric argument, the <em>negative argument</em> inverts the operation the command would otherwise carry out.</p>
<p>Like numeric arguments, the negative argument is bound to multiple keys to minimize unnecessary finger movement. It is bound to <code>M--</code> (that’s meta followed by a dash); <code>C--</code>; and <code>C-M--</code>.</p>
<p>Negative arguments are very useful, for they can let you operate on words, lines or phrases you have just finished typing. If you want to capitalize the last word you just typed, type <code>M-- M-c</code>. Not all commands have an inverse, or they do unexpected things — particularly if it is a third-party command — but almost all the keys I’ll be talking about in this series will work with a negative argument.</p>
<h2>Basic Movement</h2>
<p>If you’re an experienced Emacs user, all of this should be muscle memory by now, but I have to start somewhere and the beginning is the best place.</p>
<p>Emacs does support the navigation keys (arrow keys and pg up/down and so on) but it’s better to learn the real Emacs keys. Every time you take your hand off the “home row” to use the navigation keys you are wasting time — time that adds up, considering how often you move around in code or text. A good Emacs hacker constantly moves and edits, and in rapid succession: it is folly to stop, start, stop, start every time you navigate the buffer.</p>
<h3>Fundamental Movement Keys</h3>
<p>The four fundamental movement keys are <code>C-n</code>, for next logical line; <code>C-p</code>, for previous logical line; <code>C-f</code> for move forward by character; and <code>C-b</code> for move backward by character.</p>
<p>I recommend adding this to your .emacs, as it makes <code>C-n</code> insert newlines if the point is at the end of the buffer. Useful, as it means you won’t have to reach for the return key to add newlines!</p>

<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">setq</span> next-line-add-newlines t<span style=\"color: #66cc66;\">)</span></pre></div></div>

<p>The move to beginning and end of line commands bear mentioning as well, as they are also a crucial part of movement. To move to the beginning of a line, type <code>C-a</code>; to move to the end, type <code>C-e</code>.</p>
<h2>Extended Movement</h2>
<p>It is rarely efficient to use the fundamental movement keys if you are moving the point more than a few characters. It is at this stage that you will have to make a judgment call and decide what the <em>fastest</em> way of getting to where you are going is.</p>
<h3>Movement by Word</h3>
<p>The keybindings for movement by word in Emacs is almost the same as that of movement by character, but instead of the prefix <code>C-</code> it is <code>M-</code>. To move forward one word use <code>M-f</code>; and to move backward one word use <code>M-b</code>.</p>
<p>Movement by word will make up the bulk of your intra-line movement. It pays to understand why it works the way it does, and to understand that, you must know what a <em>word</em> is.</p>
<h4>Definition of a Word</h4>
<p>What a word is is governed by the <em>syntax table</em>, an altogether fascinating topic that deserves its own article at some point. But keeping it simple, the syntax table governs how Emacs treats almost every character — Unicode as well — and what its role is when a function like <code>forward-word</code> is run.</p>
<p>For most things — particularly source code — a word is almost always alphanumeric, possibly with a few other characters like underscore. It may seem counterintuitive to have a fluid definition for what a word is, but if you think about it, it makes perfect sense: what you consider a word when you’re writing text may not be the same as when you are writing code, and the definition of, say, a variable may also differ between languages.</p>
<h3>Movement by Paragraph, Sentence</h3>
<p>Movement in Emacs is not limited to just characters and words. If you are frequently writing text, the <code>forward/backward-paragraph</code> and <code>forward/backward-sentence</code> will come in handy. To move by sentence use the handy keybinds <code>M-e</code> and <code>M-a</code>. The paragraph keys are bound to the less-than-helpful <code>C-down/up</code> navigation keys.</p>
<p>What is considered a <em>paragraph</em> is governed by variables like <code>paragraph-start</code> and <code>paragraph-separate</code>. The same holds true for a <em>sentence</em>, but it uses <code>sentence-end</code> (a function <em>and</em> a variable) to determine what a sentence boundary is; the boundary is usually a full stop followed by one or two whitespaces.</p>
<h3>Scrolling</h3>
<p>You can also scroll by “page” (and what that means deserves its own article) with <code>C-v</code> to scroll down, and <code>M-v</code> to scroll up. I use the word <em>scroll</em> here because the concept of a <em>page</em> in Emacs is not what it is in other editors. But I doubt anybody cares if you refer to it as page up or down, something I often catch myself doing.</p>
<p>The command <code>C-M-v</code> also bears mention, as it scrolls the <em>other</em> window; what <em>other</em> is depends on how many split windows you have open (if you do) or frames (if you don’t). This key is very, very useful if you are reading documentation in another window or frame and you want to scroll it without the hassle of switching to that other window. Incidentally, there is only one command to scroll the other window, and that is the one I mentioned before; to scroll backwards, use the <em>negative argument</em> first.</p>
<h3>Move to Beginning/End of Buffer</h3>
<p>Use <code>M-&lt;</code> to move to the beginning of the buffer, and <code>M-&gt;</code> to move to the end. The buffer jump commands are useful for they leave the mark at the originating position, meaning you can jump back to where you came from with <code>C-u C-SPC</code>. I recommend <a href=\"http://www.masteringemacs.org/articles/2010/12/22/fixing-mark-commands-transient-mark-mode/\">reading my article on the mark commands</a> as it will show you how to make the mark commands more useful.</p>
<h2>Advanced Movement</h2>
<p>Advanced movement commands are meant to augment the basic commands I described above. What makes them advanced is that they require a bit more forethought before use as their functionality is <em>context-aware</em>. The movement keys described here are what makes Emacs stand out from most other editors; it is most important that you work the commands into your daily work-pattern as it will greatly speed up movement and, thus, editing.</p>
<h3>Movement by s-expression</h3>
<p>Moving by s-expression is a little misleading (unless you edit <em>Lisp</em> in which case the name is apt) as what it <em>really</em> means is <em>movement by balanced expression</em>. A balanced expression is, like moving by word, subject to the syntax table, but common examples are quotes (<code>' '</code>, <code>\" \"</code>) and brackets (<code>[ ]</code>, <code>( )</code>, <code>{ }</code>, <code>&lt; &gt;</code>).</p>
<p>Movement by s-expression is similar to movement by character and word, only the prefix is <code>C-M-</code>. So move forward is <code>C-M-f</code> and backward is <code>C-M-b</code>.</p>
<p>Moving by s-expression will take a bit of getting used to, but you will quickly find that it is a more effective means of navigating source code than by word or character. A lot of the things we do in development is deal with quoted strings; expressions in parentheses; and even regular text and code.  Ignoring quotes and parentheses, moving by s-exp is still useful for everyday navigation as <code>forward/backward-sexp</code> will treat a larger swath of characters as part of one \"unit\". So what that basically boils down to is that it is more <em>intelligent</em> in grouping the letters together into meaningful chunks for you to move around by. Use it for a while -- replace movement by word for a while if you have to to learn how to properly navigate by s-exp. You'll thank me for it. I promise. Really.</p>
<h3>Moving In and Out of Lists</h3>
<p>Like the commands to move <em>past</em> a balanced expression, Emacs also lets you move <em>into</em> one. The list commands were obviously meant, again, for Lisp-likes but they serve their purpose well in other languages.</p>
<p>To move into (down) a list type <code>C-M-d</code>; to move out (up) a list type <code>C-M-u</code>. When you move down Emacs will pick the nearest group of balanced parenthesis and move into those; if you wish to move into, say, a neighboring pair you must use...</p>
<p>If you get a scan error it is because you are in a position where Emacs cannot determine how to carry out what you are trying to do. </p>
<h3>Moving Forward and Backward in Lists</h3>
<p>Moving forward and backward are niche-level commands indeed, unless you write a lot of Lisp. They work in much the same manner as moving in and out of lists, although they move forward or backward to a neighboring pair of parentheses that share the same depth.</p>
<h2>ISearch</h2>
<p>Learn to move around the buffer with isearch (<code>C-s</code> or <code>C-r</code>; <code>C-M-s</code> for regexp-aware isearch); it's an incremental search engine in Emacs that looks as you type. It has myriad features (type <code>C-s</code> followed by <code>C-h C-h</code> to see them all) but the most important ones in isearch mode are <code>C-w</code> (to add the word after point to); <code>M-y</code> to yank the text; <code>C-r</code> to reverse the search direction; <code>M-c</code> to toggle case sensitivity folding and <code>M-n</code>/<code>&lt;-p</code> to go through the history of past searches.</p>
<p>Isearch is a superfast way to get around in the code, and if you are often looking for words in source code, I would recommend the ever-useful <code>isearch-forward-word</code> (<code>M-s w</code>) to \"fuzzy-find\" matches in the code. It cleverly ignores things like punctuation as it looks for <em>whole words</em> instead. Super-duper Useful.</p>
<p>Oh, one more tip: if you type <code>C-s C-s</code> it will repeat the last searched query.</p>
<h2>Back to Indentation</h2>
<p>If you've ever typed <code>C-a M-f</code> or something to that effect to move the point past the whitespace on a line then good news! There's a better way. In Emacs the command <code>back-to-indentation</code> moves point to the beginning of the line and moves forward past all the indentation. The command is bound to the easy-to-reach key <code>M-m</code>.</p>
<h2>Registers / Bookmarks</h2>
<p>You can use Emacs registers (and the bookmark functionality) to store the location of the point. If you only care about transient storage (that gets lost on Emacs exit) you should use registers; should you desire something more permanent then perhaps bookmarks are what you want. Bookmarks and registers both introduce a myriad features that I'll introduce in a later article, but the commands that affect movement are <code>C-x r SPC</code> to store point in a register and <code>C-x r j</code> to jump to a point stored in a register.</p>
<p>The bookmark functionality in Emacs is very flexible and lets you do much more than simply storing and retrieving a point location. To use the bookmark functionality to store, retrieve and list bookmarks type <code>C-x r m</code> to save a named bookmark; type <code>C-x r b</code> to jump to a named bookmark; and <code>C-x r l</code> to list all bookmarks.</p>
<h2>The Mark</h2>
<p>The mark commands in Emacs are used to not only define one part of a region (the other being the point) but they are also used as a form of <em>transient beacon</em> that you can recall the point to. This functionality is very useful, as there are several movement commands in Emacs that set the mark, like moving to the beginning or end of a buffer, say.</p>
<p>My <a href=\"http://www.masteringemacs.org/articles/2010/12/22/fixing-mark-commands-transient-mark-mode/\">article on the mark commands</a> will tell you how to optimize the use of the mark commands if you use transient mark mode, as sometimes <em>tmm</em> will get in the way of using the mark as a <em>transient beacon</em>, and not just as a boundary for the region.</p>
<p>The commands that most interest you as far as movement is concerned is <code>C-x C-x</code> to toggle between the point and the mark in the buffer. If you yank text, you can exchange the point and mark to jump between the beginning and end of the yanked text.</p>
<p>Another useful command is the command to jump to the head of the mark ring (subsequent calls will cycle through the other marks in the buffer's mark ring) and that command is <code>C-u C-SPC</code>. It bears mention that my aforementioned article suggests binding this useful command to <code>M-`</code>.</p>
<p>Jumping to the mark is useful, but explicitly setting it is just as useful, and this is where <em>tmm</em> can get in the way: the command to set the mark is <code>C-SPC</code> (note that there is no universal argument here) but that will also activate the region -- very annoying. Again, my article above has custom code that will set the mark but not activate the region.</p>
<p>The mark is invisible by default, but I use a cool module called <em>visiblemark.el</em> that makes, well, <a href=\"http://www.emacswiki.org/emacs/VisibleMark\">the mark visible</a>.</p>
<h2>Repositioning Point</h2>
<p>You can move the point between the top, center and bottom (by default) of the visible window but without actually scrolling up or down. The command is sometimes useful if you want to reach text in one of the previous three areas, although you can configure the variable <code>recenter-positions</code> to change that. The command is bound to <code>M-r</code> which makes it very easy to reach and thus use.</p>
<h2>Imenu</h2>
<p>Imenu is a useful and extensible tool in Emacs that lets you jump to key areas of your buffer, most usually functions definitions in source code. Unfortunately, the imenu is marred somewhat by no default key binding (<code>M-x imenu</code> to invoke) making it less known than it should be; another negative is that it uses the standard completion mechanism which is terrible for quickly navigating by \"feel\".</p>
<p>I use <a href=\"http://www.emacswiki.org/emacs/ImenuMode#toc10\">a super-charged ido version of imenu</a> and bind it to the <code>M-i</code> key:</p>

<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">(</span>kbd <span style=\"color: #0000ff;\">\"M-i\"</span><span style=\"color: #66cc66;\">)</span> 'ido-goto-<span style=\"color: #483D8B;\">symbol</span><span style=\"color: #66cc66;\">)</span></pre></div></div>

<h2>TAGS</h2>
<p>TAGS is ancient technology that uses an external tool called <em>ctags</em> or <em>etags</em> to index function signatures from source files into one big flat file. Emacs has excellent support for TAGS (but again lacks the fuzziness ido provides, unless you write some elisp) but TAGS was never meant for modern object-oriented languages as it struggles with the hierarchical nature of the code; another big problem is that TAGS is unbearably slow on large codebases, making it unusable in single-threaded Emacs.</p>
<p>The two bread-and-butter TAGS commands to find stuff are bound to <code>M-,</code> and <code>M-.</code> (use <code>M-*</code> to jump back); there is also an Emacs-style <em>apropos</em> command called <code>M-x tags-apropos</code> for wildcard search.</p>
<p>If you use my code below, you can use <code>C-.</code> to find by file in the TAGS file, like a poor man's IDE-style project file.</p>
<p>I don't remember if I wrote the code below (or if I simply snarfed it from somewhere and modified it.)</p>

<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span>require 'etags<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> ido-find-tag <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #0000ff;\">\"Find a tag using ido\"</span>
  <span style=\"color: #66cc66;\">(</span>interactive<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>tags-completion-table<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">let</span> <span style=\"color: #66cc66;\">(</span>tag-names<span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">mapc</span> <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">lambda</span> <span style=\"color: #66cc66;\">(</span>x<span style=\"color: #66cc66;\">)</span>
	    <span style=\"color: #66cc66;\">(</span>unless <span style=\"color: #66cc66;\">(</span>integerp x<span style=\"color: #66cc66;\">)</span>
	      <span style=\"color: #66cc66;\">(</span>push <span style=\"color: #66cc66;\">(</span>prin1-to-string x t<span style=\"color: #66cc66;\">)</span> tag-names<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
	  tags-completion-table<span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span>find-tag <span style=\"color: #66cc66;\">(</span>ido-completing-read <span style=\"color: #0000ff;\">\"Tag: \"</span> tag-names<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> ido-find-file-in-tag-files <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>interactive<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>save-excursion
    <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">let</span> <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span>enable-recursive-minibuffers t<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
      <span style=\"color: #66cc66;\">(</span>visit-tags-table-buffer<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span>find-file
     <span style=\"color: #66cc66;\">(</span>expand-file-<span style=\"color: #483D8B;\">name</span>
      <span style=\"color: #66cc66;\">(</span>ido-completing-read
       <span style=\"color: #0000ff;\">\"Project file: \"</span> <span style=\"color: #66cc66;\">(</span>tags-table-files<span style=\"color: #66cc66;\">)</span> <span style=\"color: #483D8B;\">nil</span> t<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">[</span>remap find-tag<span style=\"color: #66cc66;\">]</span> 'ido-find-tag<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">(</span>kbd <span style=\"color: #0000ff;\">\"C-.\"</span><span style=\"color: #66cc66;\">)</span> 'ido-find-file-in-tag-files<span style=\"color: #66cc66;\">)</span></pre></div></div>

<h2>Goal Column</h2>
<p>If you find yourself editing multiple lines in a row -- perhaps in a macro -- you may want to change the default column the point moves to when you change lines; naturally it will only do so if it is possible. This functionality is called <em>goal column</em> and it's bound to <code>C-x C-n</code> (<code>C-u C-x C-n</code> to disable).</p>
<h2>Subword Mode</h2>
<p>Editing code <code>WithCamelCaseWritingLikeThis</code> is frustrating in part because Emacs treats a camelcased identifier as a single word. The good news is, though, that Emacs has something called <code>subword-mode</code> (called <code>c-subword-mode</code> in earlier Emacsen) that rewires the movement and edit commands to work on CapitalizedWords.</p>
<h2>Smart Scan</h2>
<p>A long time ago I used an IDE feature that let you quickly search up or down for whatever identifier the point was on, and I decided I wanted something like it in Emacs so I wrote the code snippet you see below. Now, it's perfectly possible to do what it does with isearch but I use the code as it avoids the hassle of fidgeting with isearch to get the term under point into the search field.</p>
<p>In the code below the commands are bound to <code>M-p</code> and <code>M-n</code>.</p>
<p>Smart Scan's main advantage over isearch is that all you need to do is move the point to whatever identifier you wish to search for and then press <code>M-n</code> to find the next match in the buffer. The main use is not that you go \"looking\" for the identifier you wish to search for first: you are probably better off using isearch then; no, the main advantage is when you're already writing code -- or stepping through it with a debugger -- then smart scan will beat out isearch.</p>
<p>Smart Scan is also clever enough to ignore comments and strings containing the identifier you are looking for.</p>
<p>I'm contemplating cleaning it up a bit more and making it available as a package; for now though it'll remain a \"snippet\" here. Feel free to suggest changes here in the comments or by contacting me.</p>
<p>Paste this into your .emacs to add smart scan support.</p>

<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span>defvar smart-use-extended-syntax <span style=\"color: #483D8B;\">nil</span>
  <span style=\"color: #0000ff;\">\"If t the smart symbol functionality will consider extended
syntax in finding matches, if such matches exist.\"</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>defvar smart-last-symbol-<span style=\"color: #483D8B;\">name</span> <span style=\"color: #0000ff;\">\"\"</span>
  <span style=\"color: #0000ff;\">\"Contains the current symbol name.
 
This is only refreshed when `last-command' does not contain
either `smart-symbol-go-forward' or `smart-symbol-go-backward'\"</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>make-local-variable 'smart-use-extended-syntax<span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>defvar smart-symbol-old-pt <span style=\"color: #483D8B;\">nil</span>
  <span style=\"color: #0000ff;\">\"Contains the location of the old point\"</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> smart-symbol-goto <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">name</span> direction<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #0000ff;\">\"Jumps to the next NAME in DIRECTION in the current buffer.
 
DIRECTION must be either `forward' or `backward'; no other option
is valid.\"</span>
 
  <span style=\"color: #808080; font-style: italic;\">;; if `last-command' did not contain</span>
  <span style=\"color: #808080; font-style: italic;\">;; `smart-symbol-go-forward/backward' then we assume it's a</span>
  <span style=\"color: #808080; font-style: italic;\">;; brand-new command and we re-set the search term.</span>
  <span style=\"color: #66cc66;\">(</span>unless <span style=\"color: #66cc66;\">(</span>memq last-command '<span style=\"color: #66cc66;\">(</span>smart-symbol-go-forward
                               smart-symbol-go-backward<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">setq</span> smart-last-symbol-<span style=\"color: #483D8B;\">name</span> <span style=\"color: #483D8B;\">name</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">setq</span> smart-symbol-old-pt <span style=\"color: #66cc66;\">(</span>point<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>message <span style=\"color: #66cc66;\">(</span>format <span style=\"color: #0000ff;\">\"%s scan for symbol <span style=\"color: #000099; font-weight: bold;\">\\\"</span>%s<span style=\"color: #000099; font-weight: bold;\">\\\"</span>\"</span>
                   <span style=\"color: #66cc66;\">(</span>capitalize <span style=\"color: #66cc66;\">(</span>symbol-<span style=\"color: #483D8B;\">name</span> direction<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
                   smart-last-symbol-<span style=\"color: #483D8B;\">name</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>unless <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">catch</span> 'done
            <span style=\"color: #66cc66;\">(</span>while <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">funcall</span> <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">cond</span>
                             <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">eq</span> direction 'forward<span style=\"color: #66cc66;\">)</span> <span style=\"color: #808080; font-style: italic;\">; forward</span>
                              'search-forward<span style=\"color: #66cc66;\">)</span>
                             <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">eq</span> direction 'backward<span style=\"color: #66cc66;\">)</span> <span style=\"color: #808080; font-style: italic;\">; backward</span>
                              'search-backward<span style=\"color: #66cc66;\">)</span>
                             <span style=\"color: #66cc66;\">(</span>t <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">error</span> <span style=\"color: #0000ff;\">\"Invalid direction\"</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span> <span style=\"color: #808080; font-style: italic;\">; all others</span>
                            smart-last-symbol-<span style=\"color: #483D8B;\">name</span> <span style=\"color: #483D8B;\">nil</span> t<span style=\"color: #66cc66;\">)</span>
              <span style=\"color: #66cc66;\">(</span>unless <span style=\"color: #66cc66;\">(</span>memq <span style=\"color: #66cc66;\">(</span>syntax-ppss-context
                             <span style=\"color: #66cc66;\">(</span>syntax-ppss <span style=\"color: #66cc66;\">(</span>point<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span> '<span style=\"color: #66cc66;\">(</span>string comment<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
                <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">throw</span> 'done t<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span>goto-char smart-symbol-old-pt<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> smart-symbol-go-forward <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #0000ff;\">\"Jumps forward to the next symbol at point\"</span>
  <span style=\"color: #66cc66;\">(</span>interactive<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>smart-symbol-goto <span style=\"color: #66cc66;\">(</span>smart-symbol-at-pt 'end<span style=\"color: #66cc66;\">)</span> 'forward<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> smart-symbol-go-backward <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #0000ff;\">\"Jumps backward to the previous symbol at point\"</span>
  <span style=\"color: #66cc66;\">(</span>interactive<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>smart-symbol-goto <span style=\"color: #66cc66;\">(</span>smart-symbol-at-pt 'beginning<span style=\"color: #66cc66;\">)</span> 'backward<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> smart-symbol-at-pt <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">&amp;</span>optional dir<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #0000ff;\">\"Returns the symbol at point and moves point to DIR (either `beginning' or `end') of the symbol.
 
If `smart-use-extended-syntax' is t then that symbol is returned
instead.\"</span>
  <span style=\"color: #66cc66;\">(</span>with-syntax-table <span style=\"color: #66cc66;\">(</span>make-syntax-table<span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">if</span> smart-use-extended-syntax
        <span style=\"color: #66cc66;\">(</span>modify-syntax-entry ?<span style=\"color: #66cc66;\">.</span> <span style=\"color: #0000ff;\">\"w\"</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span>modify-syntax-entry ?_ <span style=\"color: #0000ff;\">\"w\"</span><span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span>modify-syntax-entry ?- <span style=\"color: #0000ff;\">\"w\"</span><span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #808080; font-style: italic;\">;; grab the word and return it</span>
    <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">let</span> <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span>word <span style=\"color: #66cc66;\">(</span>thing-at-point 'word<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
          <span style=\"color: #66cc66;\">(</span>bounds <span style=\"color: #66cc66;\">(</span>bounds-of-thing-at-point 'word<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
      <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">if</span> word
          <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">progn</span>
            <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">cond</span>
             <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">eq</span> dir 'beginning<span style=\"color: #66cc66;\">)</span> <span style=\"color: #66cc66;\">(</span>goto-char <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">car</span> bounds<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
             <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">eq</span> dir 'end<span style=\"color: #66cc66;\">)</span> <span style=\"color: #66cc66;\">(</span>goto-char <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">cdr</span> bounds<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
             <span style=\"color: #66cc66;\">(</span>t <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">error</span> <span style=\"color: #0000ff;\">\"Invalid direction\"</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
            word<span style=\"color: #66cc66;\">)</span>
        <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">error</span> <span style=\"color: #0000ff;\">\"No symbol found\"</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">(</span>kbd <span style=\"color: #0000ff;\">\"M-n\"</span><span style=\"color: #66cc66;\">)</span> 'smart-symbol-go-forward<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">(</span>kbd <span style=\"color: #0000ff;\">\"M-p\"</span><span style=\"color: #66cc66;\">)</span> 'smart-symbol-go-backward<span style=\"color: #66cc66;\">)</span></pre></div></div>

<h2>Goto Line</h2>
<p>Emacs does, of course, support jumping to a specific line, and it is bound to two commands: <code>M-g g</code> (that everybody seems to use), and the easier-to-type <code>M-g M-g</code>. The goto command is smart enough to default to whatever number point is on when the command is invoked, which will come in handy if you combine it with the command <code>C-u M-g M-g</code>, which executes <code>goto-line</code> in the <em>previous</em> buffer -- that is, the buffer you just came from. The use case is if you switch to a buffer -- say, a shell or output window -- and you want to jump to a line in the buffer you just came from.</p>
<p>One important thing to note when using <code>goto-line</code> is that, if the buffer is narrowed the goto line command still counts from the first line of the buffer, rather than the first line of the <em>narrowed</em> buffer.</p>
<h2>Next / Prev Error</h2>
<p>If you use the compile mode (compile mode is also used for things like <code>grep</code> and <code>occur</code>) in Emacs you will, for free, gain the ability to jump to the next/prev error in that compile buffer by invoking <code>M-g M-n</code> and <code>M-g M-p</code> for next and previous error, respectively.</p>
<h2>Beginning / End of Defun</h2>
<p>Despite the cryptic Lisp name for a function, the functions <code>beginning-of-defun</code> and <code>end-of-defun</code> works great with most programming modes in Emacs, by jumping to the beginning (duh) and end of the function/class definition point is contained in.</p>
<p>The commands are bound to <code>C-M-a</code> and <code>C-M-e</code> making them very easy to reach and use, and they will definitely make editing your code easier.</p>
<h2>Conclusion</h2>
<p>Emacs has a staggering array of commands that makes moving around your buffer much, much easier; of course it's easier said than done to learn all of them and make them part of your day-to-day life, but if you start slow and incorporate one command at a time then before long you will be speeding through text and code.</p>
<p><a class=\"a2a_button_reddit\" href=\"http://www.addtoany.com/add_to/reddit?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Reddit\"><img alt=\"Reddit\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/reddit.png\" width=\"16\" /></a> <a class=\"a2a_button_twitter\" href=\"http://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Twitter\"><img alt=\"Twitter\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/twitter.png\" width=\"16\" /></a> <a class=\"a2a_button_google_reader\" href=\"http://www.addtoany.com/add_to/google_reader?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Google Reader\"><img alt=\"Google Reader\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/reader.png\" width=\"16\" /></a> <a class=\"a2a_button_delicious\" href=\"http://www.addtoany.com/add_to/delicious?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Delicious\"><img alt=\"Delicious\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/delicious.png\" width=\"16\" /></a> <a class=\"a2a_button_facebook\" href=\"http://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Facebook\"><img alt=\"Facebook\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/facebook.png\" width=\"16\" /></a> <a class=\"a2a_dd addtoany_share_save\" href=\"http://www.addtoany.com/share_save\"><img alt=\"Share\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/favicon.png\" width=\"16\" /></a> </p>") (author nil (name nil "mickey") (uri nil "http://www.masteringemacs.org")) (source nil (title ((type . "html")) "Mastering Emacs") (subtitle ((type . "html")) "mastering the world's best text editor") (link ((rel . "self") (href . "http://www.masteringemacs.org/feed/"))) (id nil "http://www.masteringemacs.org"))) (entry nil (title ((type . "html")) "David's World: The new rockstars") (link ((href . "http://www.davids-world.com/archives/2011/01/the_new_rocksta.html"))) (id nil "tag:www.davids-world.com,2011://1.261") (updated nil "2011-01-13T22:47:01+00:00") (content ((type . "html") (xml:lang . "en")) "<span class=\"mt-enclosure mt-enclosure-image\" style=\"display: inline;\"><img alt=\"scientists-are.png\" class=\"mt-image-none\" src=\"http://www.davids-world.com/scientists-are.png\" width=\"650\" /></span>") (author nil (name nil "David Reitter") (uri nil "http://www.davids-world.com/")) (source nil (title ((type . "html")) "David's World") (subtitle ((type . "html")) "... looms large and daunting.") (link ((rel . "self") (href . "http://www.davids-world.com/atom.xml"))) (id nil "tag:www.davids-world.com,2011://1"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Juan Garcia: The Problem with Scripting Language REPLs") (link ((href . "http://curiousprogrammer.wordpress.com/2011/01/13/the-problem-with-scripting-language-repls/"))) (id nil "http://curiousprogrammer.wordpress.com/?p=1468") (updated nil "2011-01-13T21:12:41+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I figured out what the problem is with Devel::REPL and the command line REPLs provided by Python and Ruby – evaluation is not a separate step.  When I press enter, I’m forced to evaluate the current line.</p>
<p><em>Yes</em>, you say, that is what REPL means – Read, Evalute, Print, Loop.  <em>Evaluate</em> comes after <em>Read</em>.</p>
<p>In reality, usable REPLs, such as Emacs<sup><a class=\"footref\" href=\"http://curiousprogrammer.wordpress.com/2011/01/13/the-problem-with-scripting-language-repls/#fn.1\" name=\"fnr.1\">1</a></sup>, let you control when the read evaluate print sequence happens.  I can craft the most beautiful function I can think of.  Better still, if I change my mind, I can easily modify the function and redefine it with a keystroke.  Well, a key chord at least.</p>
<p>In contrast, with Devel::REPL, once I have pressed enter, changing my mind is painful.  Integrating it with Emacs comint will probably alleviate a lot of that pain.</p>
<p>Or better yet, as <a href=\"http://curiousprogrammer.wordpress.com/2011/01/04/devel-repl/#comment-8745\">Anonymous recommends</a>, I should take a look at Sepia or PDE which already have emacs integration.  Having said that, basic integration is, what, 20 lines of emacs-lisp?</p>
<hr />
<p class=\"footnote\"><a class=\"footnum\" href=\"http://curiousprogrammer.wordpress.com/2011/01/13/the-problem-with-scripting-language-repls/#fnr.1\" name=\"fn.1\">1.</a> Yes, Emacs is a REPL.  Kinda.</p>
<br />Filed under: <a href=\"http://curiousprogrammer.wordpress.com/category/programming/perl-programming/\">Perl</a> Tagged: <a href=\"http://curiousprogrammer.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://curiousprogrammer.wordpress.com/tag/repl/\">repl</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/curiousprogrammer.wordpress.com/1468/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=curiousprogrammer.wordpress.com&amp;blog=367204&amp;post=1468&amp;subd=curiousprogrammer&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "Jared") (uri nil "http://curiousprogrammer.wordpress.com")) (source nil (title ((type . "html")) "A Curious Programmer » Emacs") (subtitle ((type . "html")) "Leveraging Perl and Emacs") (link ((rel . "self") (href . "http://curiousprogrammer.wordpress.com/tag/emacs/feed/atom/"))) (id nil "http://curiousprogrammer.wordpress.com/feed/atom/"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "Dimitri Fontaine: Starting afresh with el-get") (link ((href . "http://blog.tapoueh.org/news.dim.html#%20Starting%20afresh%20with%20el%2Dget"))) (id nil "http://blog.tapoueh.org/news.dim.html#%20Starting%20afresh%20with%20el%2Dget") (updated nil "2011-01-11T16:20:00+00:00") (content ((type . "html")) "<p>It so happens that a colleague of mine wanted to start using <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> but
couldn't get to it. He insists on having proper color themes in all
applications and some sensible defaults full of nifty add-ons everywhere,
and didn't want to have to learn that much about <em>Emacs</em> and <em>Emacs Lisp</em> to get
started. I'm not even sure that he will <a href=\"http://www.gnu.org/software/emacs/tour/\">Take the Emacs tour</a>.</p>

<p>You would tell me that there's nothing we can do for so unfriendly
users. Well, here's what I did:</p>

<pre class=\"src\"><span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">emacs setup
</span>
(add-to-list 'load-path <span style=\"color: #ad7fa8; font-style: italic;\">\"~/.emacs.d/el-get/el-get\"</span>)
(<span style=\"color: #729fcf; font-weight: bold;\">require</span> '<span style=\"color: #8ae234;\">el-get</span>)
(setq
 el-get-sources
 '(el-get
   php-mode-improved
   psvn
   auto-complete
   switch-window

   (<span style=\"color: #729fcf;\">:name</span> buffer-move
          <span style=\"color: #729fcf;\">:after</span> (<span style=\"color: #729fcf; font-weight: bold;\">lambda</span> ()
                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"&lt;C-S-up&gt;\"</span>)     'buf-move-up)
                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"&lt;C-S-down&gt;\"</span>)   'buf-move-down)
                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"&lt;C-S-left&gt;\"</span>)   'buf-move-left)
                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"&lt;C-S-right&gt;\"</span>)  'buf-move-right)))

   (<span style=\"color: #729fcf;\">:name</span> magit
          <span style=\"color: #729fcf;\">:after</span> (<span style=\"color: #729fcf; font-weight: bold;\">lambda</span> ()
                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"C-x C-z\"</span>) 'magit-status)))

   (<span style=\"color: #729fcf;\">:name</span> goto-last-change
          <span style=\"color: #729fcf;\">:after</span> (<span style=\"color: #729fcf; font-weight: bold;\">lambda</span> ()
                   <span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">azerty keyboard here, don't use C-x C-/
</span>                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"C-x C-_\"</span>) 'goto-last-change)))))

(<span style=\"color: #729fcf; font-weight: bold;\">when</span> window-system
   (add-to-list 'el-get-sources  'color-theme-tango))

(el-get 'sync)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">visual settings
</span>(setq inhibit-splash-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(line-number-mode 1)
(column-number-mode 1)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">Use the clipboard, pretty please, so that copy/paste \"works\"
</span>(setq x-select-enable-clipboard t)

(set-frame-font <span style=\"color: #ad7fa8; font-style: italic;\">\"Monospace-10\"</span>)

(global-hl-line-mode)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">suivre les changements exterieurs sur les fichiers
</span>(global-auto-revert-mode 1)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">pour les couleurs dans M-x shell
</span>(autoload 'ansi-color-for-comint-mode-on <span style=\"color: #ad7fa8; font-style: italic;\">\"ansi-color\"</span> nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">S-fleches pour changer de fenêtre
</span>(windmove-default-keybindings)
(setq windmove-wrap-around t)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">find-file-at-point quand ça a du sens
</span>(setq ffap-machine-p-known 'accept) <span style=\"color: #888a85;\">; </span><span style=\"color: #888a85;\">no pinging
</span>(setq ffap-url-regexp nil) <span style=\"color: #888a85;\">; </span><span style=\"color: #888a85;\">disable URL features in ffap
</span>(setq ffap-ftp-regexp nil) <span style=\"color: #888a85;\">; </span><span style=\"color: #888a85;\">disable FTP features in ffap
</span>(define-key global-map (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"C-x C-f\"</span>) 'find-file-at-point)

(<span style=\"color: #729fcf; font-weight: bold;\">require</span> '<span style=\"color: #8ae234;\">ibuffer</span>)
(global-set-key <span style=\"color: #ad7fa8; font-style: italic;\">\"\\C-x\\C-b\"</span> 'ibuffer)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">use iswitchb-mode for C-x b
</span>(iswitchb-mode)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">I can't remember having meant to use C-z as suspend-frame
</span>(global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"C-z\"</span>) 'undo)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">winner-mode pour revenir sur le layout précédent C-c &lt;left&gt;
</span>(winner-mode 1)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">dired-x pour C-x C-j
</span>(<span style=\"color: #729fcf; font-weight: bold;\">require</span> '<span style=\"color: #8ae234;\">dired-x</span>)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">full screen
</span>(<span style=\"color: #729fcf; font-weight: bold;\">defun</span> <span style=\"color: #edd400; font-weight: bold; font-style: italic;\">fullscreen</span> ()
  (interactive)
  (set-frame-parameter nil 'fullscreen
                       (<span style=\"color: #729fcf; font-weight: bold;\">if</span> (frame-parameter nil 'fullscreen) nil 'fullboth)))
(global-set-key [f11] 'fullscreen)
</pre>

<p>With just this simple 87 lines (all included) of setup, my local user is
very happy to switch to using <a href=\"http://www.gnu.org/software/emacs/\">our favorite editor</a>. And he's not even afraid
(yet) of his <code>~/.emacs</code>. I say that's a very good sign of where we are with
<a href=\"https://github.com/dimitri/el-get\">el-get</a>!</p>") (author nil (name nil "Dimitri Fontaine") (uri nil "http://blog.tapoueh.org/news.dim.html")) (source nil (title ((type . "html")) "tail -f /dev/dim") (subtitle ((type . "html")) "dim's general purpose blog, which might turn into emacs specific") (link ((rel . "self") (href . "http://tapoueh.org/news.dim.xml"))) (id nil "http://blog.tapoueh.org/news.dim.html"))) (entry nil (title ((type . "html")) "David's World: iPhone 3G with iOS 4.x and jailbreak: Fix for crashes and a battery drain issue.") (link ((href . "http://www.davids-world.com/archives/2011/01/iphone_3g_with.html"))) (id nil "tag:www.davids-world.com,2011://1.260") (updated nil "2011-01-11T15:30:15+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Plenty of trouble with my jailbroken iPhone 3G, which I run on T-Mobile in the US.  Apple offers its iPhone bundled with an AT&amp;T contract, which keeps the initial payment down (attractive for delusioned customers) and the total cost of ownership up (good for Apple and AT&amp;T.)
</p><p>
To use an iPhone with any GSM network (such as AT&amp;:T or T-Mobile in the US, and virtually any provider in Europe), it needs to be \"jailbroken\" and \"unlocked\".  The process is simple: download a program called \"PwnageTool\" from a <a href=\"http://blog.iphone-dev.org/\">website</a>, run it over the iOS operating system that was downloaded with iTunes (.ipsw), then install the operating system on the iPhone with iTunes.
Once the firmware update has been installed,  start the new Cydia app on your phone, find the <i>Ultrasn0w</i> application and install. That's it: your iPhone will now accept GSM SIM cards from all carriers and in all countries.  <i>PwnageTool only runs on Macs.  If you are still on Windows, have a look at a program called Redsn0w.</i>
</p><p>
The real know-how is in the details, and the iPhone-Dev team makes you read a lot of text before getting a corse idea what to look for.  On top of that, crashes and battery drains have made my life difficult over the last few months.  <b>Here are the solutions I found.</b>  The apply to the iPhone 3G, but not to later iPhones (3GS, iPhone 4).

</p><h2>Installing iOS 4.0, 4.1 and 4.2 on iPhone - slowness, crash and reboot issues</h2>
<p>

Lots of trouble. First the incredible slowness IN IOS 4.0.  The solution was to upgrade to 4.1 when it finally came out.
This wasn't as slow, but buggy in conjunction with the iPhone-Dev team's Jailbreak. Crashes galore all complete with a reboot that took many minutes, just when you're urgently looking for directions. A clean slate supposedly helped: restore the iPhone via iTunes and a jailbroken operating system file but one had to avoid restoring one's data and apps from a backup in iTunes. The manual restore is easier done than it sounds: ITunes synchronizes all data from the Address Book and Mail.app. Of course, if one keeps mail accounts or phone numbers in the phone without syncing them back to a computer, the install process will be much more involved.   This solved the crashes for me.

</p><p>
I upgraded my phone to iOS 4.2.1, with the iPhone-dev jailbreak and the ultrasnow unlock. The trick here is to make sure that the phone's baseband version is compatible.  Then, no baseband upgrade should be performed. Pwnagetool will ask you whether to upgrade the baseband. 

</p><h2>Battery drain issue with iOS 4.x</h2>

<p>
 The ordeal wasn't over for me, though. Now I dealt with a phone that drained its battery At an impressive rate - it would not last an afternoon. 
Online pundits have suggested many solutions to the problem, but the correct one appears to be that the iPhone keeps checking for \"push certificates\" via a Wifi or EDGE or 3G data connection.  These certificates fail to validate, and the checking goes on.  The Data Usage statistic (in Settings -&gt; General) demonstrates these transfers.
</p><p>
One solution is to use <a href=\"http://www.ezdia.com/epad/activate-iphone-3gs-3g-ultrasn0w-1-2fix-battery-drain/4938/\">a new version of Redsn0w</a> for the jailbreak.  If using Ultrasn0w, install a further Cydia package called \"<a href=\"http://www.ihackintosh.com/2010/03/push-doctor-free-push-fix-for-hacktivated-iphones/\">Push Doctor</a>\".  This has fixed the battery drain issue for me and others.
Important note: uninstall OpenSSH afterwards, or at least change the iPhone's root and mobile user passwords.</p>") (author nil (name nil "David Reitter") (uri nil "http://www.davids-world.com/")) (source nil (title ((type . "html")) "David's World") (subtitle ((type . "html")) "... looms large and daunting.") (link ((rel . "self") (href . "http://www.davids-world.com/atom.xml"))) (id nil "tag:www.davids-world.com,2011://1"))) (entry nil (title ((type . "html") (xml:lang . "en")) "sachachua: Emacs, BBDB, and getting your contacts on the Android or iPhone") (link ((href . "http://sachachua.com/blog/2011/01/emacs-bbdb-and-getting-your-contacts-on-the-android-or-iphone/"))) (id nil "http://sachachua.com/blog/?p=22034") (updated nil "2011-01-07T13:00:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Want your Emacs BBDB contacts on your Android or iPhone? </p>
<p> The easiest way I’ve found is to export your contacts to CSV, then import them into something like Google Contacts. You can export your BBDB contacts using <code>bbdb-to-outlook.el</code>, which is available in the BBDB package in the <code>bits/</code> directory. <a href=\"http://bbdb.cvs.sourceforge.net/viewvc/bbdb/bbdb/bits/bbdb-to-outlook.el\">Download bbdb-to-outlook.el from Sourceforge</a>  if you can’t find it in your BBDB directory. To use: </p>
<ol>
<li> Load bbdb-to-outlook.el and use <code>M-x eval-buffer</code> to load the code. </li>
<li> Use <code>M-x bbdb</code> to open your BBDB records, and search for <code>.</code> to show all the records. Alternatively, search for a subset of your records. </li>
<li> Type <code>O</code> to run <code>bbdb-to-outlook</code> and choose the file. </li>
</ol>
<p> Tada! Step one done. Review the file and delete anything you don’t want to include. </p>
<p> To import the contacts into Google Contacts, go to Google Mail and click on Contacts. Click on <code>Import</code> and choose your file. After some time and some fiddling, you can get that synchronized onto your Android or iPhone. </p>
<p> I haven’t thought about syncing, but I’m trying to keep my BBDB as The Master File for Contacts anyway, as it’s so much more flexible than any other contact database I’ve tried. (Although gist.com is pretty cool and I do like the Android’s merging of photos, contact info, and updates…) </p>
<p> There was some work on <a href=\"http://www.emacswiki.org/emacs/BbdbExportImportSync\">synchronizing BBDB with the Palm</a>, so that might be a possibility. </p>
<p> Enjoy! </p>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2011/01/emacs-bbdb-and-getting-your-contacts-on-the-android-or-iphone/\">Emacs, BBDB, and getting your contacts on the Android or iPhone</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog"))) (entry nil (title ((type . "html") (xml:lang . "es")) "suso: Anuncio sobre la Ponencia de Emacs de Stallman") (link ((href . "http://gnu.manticore.es/node/1668"))) (id nil "http://gnu.manticore.es/1668 at http://gnu.manticore.es") (updated nil "2011-01-06T16:26:59+00:00") (content ((type . "html")) "<p>Doy por finalizada la fase alfa de la traducción de la ponencia sobre<br />
Emacs<sup class=\"glossary-indicator\" title=\"EL Único Editor Verdadero\"><a class=\"glossary-indicator\" href=\"http://gnu.manticore.es/glossary/6/lettere#term46\" title=\"EL Único Editor Verdadero\">i</a></sup> enviada por Richard Stallman a la ACM en 1981.</p>
<p>Como ya se sabe, se trata de un histórico pero vigente documento que<br />
explica la filosofía del desarrollo de Emacs.</p>
<p>----------</p>
<p>Elimino las galeradas de texto intermedias y las genero en HTML<br />
provisional de muestra. Recuérdese, son <strong>galeradas</strong>.<br />
<em>El material aún no está listo para distribución</em>, pero se puede<br />
consultar.</p>
<p>Fase \"alfa\" significa que aún hay que hacerle los pases de traducción</p>
 <p><a href=\"http://gnu.manticore.es/node/1668\" target=\"_blank\">leer más</a></p>") (author nil (name nil "admin") (uri nil "http://gnu.manticore.es/taxonomy/term/1/0")) (source nil (title ((type . "html")) "GNU + Emacs en español para usuarios finales - Emacs") (link ((rel . "self") (href . "http://gnu.manticore.es/taxonomy/term/1/0/feed"))) (id nil "http://gnu.manticore.es/taxonomy/term/1/0"))) (entry nil (title ((type . "html")) "Emacs-fu: setting the frame title") (link ((href . "http://emacs-fu.blogspot.com/2011/01/setting-frame-title.html"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-7583600805500387232") (updated nil "2011-01-06T15:47:52+00:00") (content ((type . "html")) "<div class=\"outline-2\" id=\"outline-container-1\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
The 'frame title' (window title) that emacs uses in graphical environments
defaults to something like <code>emacs@hostname</code>. 
</p>
<p>
Of course emacs lets us customize this, by changing the value of
<code>frame-title-format</code>. Emacs accepts many different things there, (see the
documentation for <code>frame-title-format</code> and <code>mode-line-format</code> for that), but
let's look at an example.
</p>
<p>
Instead of the default <code>emacs@hostname</code>, I find it more useful to include the
name of the file I'm working on instead, or, in case of non-file buffers, the
buffer name. To do this, I have something like the following in my <code>.emacs</code>:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> frame-title-format
  '(<span class=\"org-string\">\"\"</span> invocation-name <span class=\"org-string\">\": \"</span>(<span class=\"org-builtin\">:eval</span> (<span class=\"org-keyword\">if</span> (buffer-file-name)
                (abbreviate-file-name (buffer-file-name))
                  <span class=\"org-string\">\"%b\"</span>))))
</pre>



<p>
As you see, <code>frame-title-format</code> is a template for the items that are present
in the title bar; i.e.. emacs concatenates the items in the list, and it
supports various <code>%</code>-constructs, which are replaced with actual values; see
below.
</p>
<p>
In addition to the <code>%</code>-constructs, you can use <code>:eval</code> to make emacs evaluate
the expression whenever it wants to update the title bar.
</p>
<p>
<code>invocation-name</code> is the name of the emacs binary.
</p>
<p>
<code>abbreviate-file-name</code> replaces the home directory part in file names with
<code>~</code>; for very deep paths it might be nice to do some abbreviation as well as
some shells do; this is left as an exercise to the reader :)
</p>
<p>
You can experiment with some other things to put in <code>frame-title-format</code>;
use the <code>:eval</code> construct as above to use emacs-lisp functions, and the
various <code>%</code>-specifiers which are replaced by certain values; the emacs
documentation lists the following:
</p>



<pre class=\"src src-text\">%b -- print buffer name.      %f -- print visited file name.
%F -- print frame name.
%* -- print %, * or hyphen.   %+ -- print *, % or hyphen.
      %&amp; is like %*, but ignore read-only-ness.
      % means buffer is read-only and * means it is modified.
      For a modified read-only buffer, %* gives % and %+ gives *.
%s -- print process status.
%i -- print the size of the buffer.
%I -- like %i, but use k, M, G, etc., to abbreviate.
%p -- print percent of buffer above top of window, or Top, Bot or All.
%P -- print percent of buffer above bottom of window, perhaps plus Top,
      or print Bottom or All.
%n -- print Narrow if appropriate.
%t -- visited file is text or binary (if OS supports this distinction).
%z -- print mnemonics of keyboard, terminal, and buffer coding systems.
%Z -- like %z, but including the end-of-line format.
%e -- print error message about full memory.
%@ -- print @ or hyphen.  @ means that default-directory is on a
      remote machine.
%[ -- print one [ for each recursive editing level.  %] similar.
%% -- print %.   %- -- print infinitely many dashes.
Decimal digits after the % specify field width to which to pad.
</pre>



<p>
So, if we'd like to include the host (system) name and some indication of the
status of this buffer, we could do something like:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> frame-title-format
  '(<span class=\"org-string\">\"emacs%@\"</span> (<span class=\"org-builtin\">:eval</span> (system-name)) <span class=\"org-string\">\": \"</span> (<span class=\"org-builtin\">:eval</span> (<span class=\"org-keyword\">if</span> (buffer-file-name)
                (abbreviate-file-name (buffer-file-name))
                  <span class=\"org-string\">\"%b\"</span>)) <span class=\"org-string\">\" [%*]\"</span>))
</pre>



<p>
Of course, some of the information is available elsewhere already, but it
might be clearer in the frame-title. Or not – there's a lot of room for
tweaking and experimentation here.
</p></div>
</div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3992530807750384868-7583600805500387232?l=emacs-fu.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "djcb") (email nil "noreply@blogger.com") (uri nil "http://emacs-fu.blogspot.com/search/label/new")) (source nil (title ((type . "html")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/-/new"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868"))) (entry nil (title ((type . "html") (xml:lang . "en-US")) "Phil Hagelberg: in which the author sighs and realizes he publishes very few posts which do not contain the word package") (link ((href . "http://technomancy.us/144"))) (id nil "tag:technomancy.us,2007:in%20which%20the%20author%20sighs%20and%20realizes%20he%20publishes%20very%20few%20posts%20which%20do%20not%20contain%20the%20word%20package") (updated nil "2011-01-05T09:09:55+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>As someone who maintains a fair amount of Emacs libraries, I've
  long been in search of improvements to the release process. I've
  <a href=\"http://technomancy.us/133\">lobbied for including package.el in
    Emacs itself</a>, which finally happened over the summer. But
    political concerns interfered a bit, and it is only configured
    to point
    to <a href=\"http://elpa.gnu.org/packages/archive-contents\">the
    FSF package repository</a> out of the box. This repository only
    accepts code for which copyright has been granted to the Free
    Software Foundation. At the time of this writing it has only six
    packages in it compared to ELPA's 130, making it somewhat less
    useful than it could be. For a number of
    reasons[<a href=\"http://technomancy.us#fn1\">1</a>] the copyright assignment policy
    doesn't work for the packages I maintain, so this was a bit
    disappointing to me.</p>

<img align=\"right\" alt=\"some corn or something, I dunno man. unrelated.\" src=\"http://technomancy.us/i/corn.jpg\" title=\"some corn or something, I dunno man. unrelated.\" />

<p>On the other hand, I was able to add support for multiple package
  sources to package.el before it was included in Emacs. This allows
  users to add alternate third-party sources like the
  original <a href=\"http://tromey.com/elpa\">ELPA</a> repository. I
  should note here that there's been some confusion regarding the
  difference between package.el and ELPA which I must admit to
  having helped spread at one point. To be precise, package.el is
  the package manager, while ELPA is the original package source
  from which most packages so far have been hosted. The term \"ELPA\"
  is often mistakenly used to refer to package.el because for a long
  time package.el was hard-coded to only download from ELPA, but now
  that it supports multiple sources it's important to make a
  distinction between them.</p>

<p>Unfortunately ELPA is still manually curated with package
  submission over email, so it can take weeks or even months for new
  versions of my libraries to become available. I've started my own
  package source
  at <a href=\"http://repo.technomancy.us/emacs\">http://repo.technomancy.us/emacs</a>,
  but it turns out maintaining a package source consisting of a
  bunch of static files is not a lot of fun and can be error
  prone. Luckily Nathan Wizenbaum has cooked
  up <a href=\"http://marmalade-repo.org\">Marmalade</a>, a community
  package source that allows users to upload their own packages much
  like <a href=\"http://clojars.org\">Clojars</a>
  or <a href=\"http://rubygems.org\">Rubygems.org</a>. While it hasn't
  seen much use yet, it's quite promising as a way for elisp authors
  to get their code out to users. The following snippet will add
  Marmalade as a repository:</p>

<pre class=\"code\">(<span class=\"keyword\">require</span> '<span class=\"constant\">package</span>)
(add-to-list 'package-archives
             '(<span class=\"string\">\"marmalade\"</span> . 
               <span class=\"string\">\"http://marmalade-repo.org/packages/\"</span>) t) </pre>

<p>If you are using Emacs 23 you
  can <a href=\"http://bit.ly/pkg-el\">download package.el from Emacs
  trunk</a>. The version from tromey.com doesn't support multiple
  archive sources.</p>

<p>Moving forward I'm planning on uploading the packages I maintain
  over to Marmalade. It offers a much faster turnaround time
  for updates than the old system of submitting by email to
  ELPA. I've already uploaded my Clojure libraries and am working
  on a version of
  the <a href=\"http://github.com/technomancy/emacs-starter-kit\">Emacs
  Starter Kit</a> that is structured as a set of packages in order
  to be more modular. (The new Starter Kit only targets Emacs 24 and
  up, so at this point it's intended for the adventurous.) Happy hacking!</p>



<hr />

<p>[<a name=\"fn1\">1</a>] The main reason being that I could never
  bring myself to answer the question \"can you apply this patch?\"
  with \"well that depends, <a href=\"http://achewood.com/index.php?date=11222006\">do you have a fax machine</a>?\".</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Vinh Nguyen: Add one to a number using Emacs’ regexp") (link ((href . "http://blog.nguyenvq.com/2011/01/04/add-one-to-a-number-using-emacs-regexp/"))) (id nil "http://blog.nguyenvq.com/?p=846") (updated nil "2011-01-04T18:52:53+00:00") (content ((type . "html") (xml:lang . "en")) "<div class=\"topsy_widget_data topsy_theme_jade\" style=\"float: right; margin-left: 0.75em;\"></div>
<p>I recently had to add one to all numbers of the form <code>\"n\"</code> where <code>n</code> is a number in a text file.  Thanks to <code>jlf</code> on <code>#emacs</code>, I could do so with the the command <code>replace-regexp</code> to change <code>\\\"\\([0-9]+\\)\\\"</code> to <code>\"\\,(1+ \\#1)\"</code>.  I’m never going to remember this so I’m writing it down now.</p>") (author nil (name nil "Vinh Nguyen") (uri nil "http://blog.nguyenvq.com")) (source nil (title ((type . "html")) "Super Nerdy Cool » emacs") (subtitle ((type . "html")) "My (technical) adventures through the professional world...") (link ((rel . "self") (href . "http://blog.nguyenvq.com/category/emacs/feed/"))) (id nil "http://blog.nguyenvq.com"))) (entry nil (title ((type . "html") (xml:lang . "en")) "M-x all-things-emacs: How I Work: Working with OS X and Emacs") (link ((href . "http://emacsblog.org/2011/01/04/how-i-work-working-with-os-x-and-emacs/"))) (id nil "http://emacsblog.org/?p=259") (updated nil "2011-01-04T17:08:58+00:00") (content ((type . "html") (xml:lang . "en")) "<p><a href=\"http://how-i-work.com/workbenches/30-working-with-os-x-and-emacs\"><img alt=\"\" src=\"http://emacsblog.org/wp-content/uploads/2011/01/working-with-osx-emacs.png\" title=\"\" /></a></p>

	<p>I’m being featured this week on a new site called <a href=\"http://how-i-work.com\">How I Work</a>.  The site is about letting developers watch screencasts to see how other people work and improve their productivity by learning about new tools and practices.  Given the interest in how focused work in an all inclusive environment can help productivity, they contacted me about putting up a <a href=\"http://how-i-work.com/workbenches/30-working-with-os-x-and-emacs\">workbench on how I use Emacs</a> and how it fits into my overall OS X workflow.</p>

	<p>Please <a href=\"http://how-i-work.com/workbenches/30-working-with-os-x-and-emacs\">check it out</a> and vote up my video so other people learn about <a href=\"http://ryan.mcgeary.org\">me</a>, <a href=\"http://mcgearygroup.com\">McGeary Consulting Group</a>, and our favorite editor.</p>") (author nil (name nil "Ryan McGeary") (uri nil "http://emacsblog.org")) (source nil (title ((type . "html")) "M-x all-things-emacs") (subtitle ((type . "html")) "EmacsBlog.org") (link ((rel . "self") (href . "http://emacsblog.org/feed/"))) (id nil "http://emacsblog.org"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Jason McBrayer: Todochiku notifications in identica-mode") (link ((href . "http://www.carcosa.net/jason/blog/computing/identica-mode-notification-2011-01-04-12-00"))) (id nil "http://www.carcosa.net/jason/blog/computing/computing/identica-mode-notification-2011-01-04-12-00") (updated nil "2011-01-04T17:00:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Just a quick response to <a href=\"http://blog.nethazard.net/emacs-identica-mode-notifications/\">Gabriel Saldaña's recent post</a> on
identica-mode notifications: the code for using todochiku for
identica-mode notifications is as follows:</p>

<div class=\"codeblock\">
<pre>(add-hook \\'identica-new-dents-hook
  (lambda nil
    (let ((n identica-new-dents-count))
      (todochiku-message \\\"Emacs Identica-mode New dents\\\"
                         (format \\\"You have %d new dent%s.\\\" n (if (&gt; n 1) \\\"s\\\" \\\"\\\"))
                         (todochiku-icon \\'social)))))
</pre>
</div>

<p>The advantage of using todochiku here is that you can let it handle
talking to different notification systems (KDE vs. Gnome vs.Growl on
MacOS vs Snarl on MS Windows), and have the same configuration
everywhere.</p>") (author nil (name nil "Jason F. McBrayer") (uri nil "http://www.carcosa.net/jason/blog")) (source nil (title ((type . "html")) "Prosthetic Conscience") (subtitle ((type . "html")) "Jason McBrayer's weblog; occasional personal notes and commentary") (link ((rel . "self") (href . "http://www.carcosa.net/jason/blog/computing/index.rss2"))) (id nil "http://www.carcosa.net/jason/blog"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Gabriel Saldaña: Emacs Identica-mode notifications") (link ((href . "http://blog.nethazard.net/emacs-identica-mode-notifications/#utm_source=feed&utm_medium=feed&utm_campaign=feed"))) (id nil "http://blog.nethazard.net/?p=734") (updated nil "2011-01-02T21:32:14+00:00") (content ((type . "html") (xml:lang . "en")) "<p>There’s a feature on <a href=\"http://blog.nethazard.net/identica-mode-for-emacs#utm_source=feed&amp;utm_medium=feed&amp;utm_campaign=feed\">Emacs identica-mode</a> that I haven’t documented or written about before and its been there for quite some time.</p>

<p>Its very nice to have notifications when you get new updates on your timeline. I’ve seen it on other clients like TweetDeck. So I made a hook for Emacs to execute some code after it has fetched new dents. With this you can call any notification system to show a message of the new dents.</p>

<p>Here’s the code I’ve been using to show new notice count on KDE4 notification system (similar code can be used for Gnome’s notification system):</p>

<p></p><pre>;; KDE 4 Notification of new dents
(add-hook 'identica-new-dents-hook (lambda ()
   (let ((n identica-new-dents-count))
     (start-process \"identica-notify\" nil \"kdialog\"
            \"--title\"
            \"Emacs Identica-mode New dents\"
            \"--passivepopup\"
                    (format \"You have %d new dent%s\"
                            n (if (&gt; n 1) \"s\" \"\"))
            \"3\"
))))
</pre><p></p>

<p><img alt=\"Emacs Identica-mode notifications\" class=\"alignnone size-medium wp-image-735\" height=\"225\" src=\"http://blog.nethazard.net/wp-content/uploads/2011/01/identicamode-notifications-300x225.jpg\" title=\"identicamode-notifications\" width=\"300\" /></p>

<p>I haven’t tried to do the same in Mac OS with Growl but I guess its also possible. If someone has the code for that, please share it in the comments. You can also use <a href=\"http://www.emacswiki.org/emacs/ToDoChiKu\">ToDoChiKu</a> as a universal notification system.</p>

<p><strong>Update</strong> Jason McBrayer has <a href=\"http://www.carcosa.net/jason/blog/computing/identica-mode-notification-2011-01-04-12-00\">posted the elisp code to use identica-mode with ToDoChiKu</a> on his blog.</p>

<p>I hope you like this hook feature and please let me know other ways to use the hook, or if any other hook is usefull to have.</p>

<div class=\"sociable\">
<div class=\"sociable_tagline\">
<strong>Share:</strong>
</div>
<ul>
	<li class=\"sociablefirst\"><a href=\"http://digg.com/submit?phase=2&amp;url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications&amp;bodytext=There%27s%20a%20feature%20on%20Emacs%20identica-mode%20that%20I%20haven%27t%20documented%20or%20written%20about%20before%20and%20its%20been%20there%20for%20quite%20some%20time.%0D%0A%0D%0AIts%20very%20nice%20to%20have%20notifications%20when%20you%20get%20new%20updates%20on%20your%20timeline.%20I%27ve%20seen%20it%20on%20other%20clients%20like%20Tw\" rel=\"nofollow\" target=\"_blank\" title=\"Digg\"><img alt=\"Digg\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/digg.png\" title=\"Digg\" /></a></li>
	<li><a href=\"http://delicious.com/post?url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications&amp;notes=There%27s%20a%20feature%20on%20Emacs%20identica-mode%20that%20I%20haven%27t%20documented%20or%20written%20about%20before%20and%20its%20been%20there%20for%20quite%20some%20time.%0D%0A%0D%0AIts%20very%20nice%20to%20have%20notifications%20when%20you%20get%20new%20updates%20on%20your%20timeline.%20I%27ve%20seen%20it%20on%20other%20clients%20like%20Tw\" rel=\"nofollow\" target=\"_blank\" title=\"del.icio.us\"><img alt=\"del.icio.us\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/delicious.png\" title=\"del.icio.us\" /></a></li>
	<li><a href=\"http://technorati.com/faves?add=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Technorati\"><img alt=\"Technorati\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/technorati.png\" title=\"Technorati\" /></a></li>
	<li><a href=\"http://reddit.com/submit?url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications\" rel=\"nofollow\" target=\"_blank\" title=\"Reddit\"><img alt=\"Reddit\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/reddit.png\" title=\"Reddit\" /></a></li>
	<li><a href=\"http://www.stumbleupon.com/submit?url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications\" rel=\"nofollow\" target=\"_blank\" title=\"StumbleUpon\"><img alt=\"StumbleUpon\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/stumbleupon.png\" title=\"StumbleUpon\" /></a></li>
	<li><a href=\"http://www.facebook.com/share.php?u=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;t=Emacs%20Identica-mode%20notifications\" rel=\"nofollow\" target=\"_blank\" title=\"Facebook\"><img alt=\"Facebook\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/facebook.png\" title=\"Facebook\" /></a></li>
	<li><a href=\"http://meneame.net/submit.php?url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Meneame\"><img alt=\"Meneame\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/meneame.png\" title=\"Meneame\" /></a></li>
	<li><a href=\"http://www.friendfeed.com/share?title=Emacs%20Identica-mode%20notifications&amp;link=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"FriendFeed\"><img alt=\"FriendFeed\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/friendfeed.png\" title=\"FriendFeed\" /></a></li>
	<li><a href=\"http://identi.ca/notice/new?status_textarea=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Identi.ca\"><img alt=\"Identi.ca\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/identica.png\" title=\"Identi.ca\" /></a></li>
	<li><a href=\"http://twitter.com/home?status=Emacs%20Identica-mode%20notifications%20-%20http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Twitter\"><img alt=\"Twitter\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/twitter.png\" title=\"Twitter\" /></a></li>
	<li class=\"sociablelast\"><a href=\"http://www.google.com/bookmarks/mark?op=edit&amp;bkmk=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications&amp;annotation=There%27s%20a%20feature%20on%20Emacs%20identica-mode%20that%20I%20haven%27t%20documented%20or%20written%20about%20before%20and%20its%20been%20there%20for%20quite%20some%20time.%0D%0A%0D%0AIts%20very%20nice%20to%20have%20notifications%20when%20you%20get%20new%20updates%20on%20your%20timeline.%20I%27ve%20seen%20it%20on%20other%20clients%20like%20Tw\" rel=\"nofollow\" target=\"_blank\" title=\"Google Bookmarks\"><img alt=\"Google Bookmarks\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/googlebookmark.png\" title=\"Google Bookmarks\" /></a></li>
</ul>
</div>
<img alt=\"\" src=\"http://blog.nethazard.net/?ak_action=api_record_view&amp;id=734&amp;type=feed\" />

<p>Related posts:</p><ol><li><a href=\"http://blog.nethazard.net/emacs-identica-mode-with-replies-highlighting/\" rel=\"bookmark\" title=\"Permanent Link: Emacs identica-mode with replies highlighting\">Emacs identica-mode with replies highlighting</a></li>
<li><a href=\"http://blog.nethazard.net/emacs-identica-mode-version-0-7/\" rel=\"bookmark\" title=\"Permanent Link: Emacs identica-mode version 0.7\">Emacs identica-mode version 0.7</a></li>
<li><a href=\"http://blog.nethazard.net/identica-mode-for-emacs-update-support-for-any-laconica-server/\" rel=\"bookmark\" title=\"Permanent Link: Identica mode for Emacs update: support for any Laconica server\">Identica mode for Emacs update: support for any Laconica server</a></li>
</ol><p></p>") (author nil (name nil "Gabriel Saldaña") (uri nil "http://blog.nethazard.net")) (source nil (title ((type . "html")) "Nethazard.net » Emacs") (subtitle ((type . "html")) "Gabriel Saldana's blog about web development, free software and other lifestyle topics") (link ((rel . "self") (href . "http://blog.nethazard.net/category/linux/emacs/feed/"))) (id nil "http://blog.nethazard.net"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Alex Bennée: 2010 In Memorium") (link ((href . "http://www.bennee.com/~alex/blog/2011/01/02/2010-in-memorium/"))) (id nil "http://www.bennee.com/~alex/blog/?p=2129") (updated nil "2011-01-02T15:25:07+00:00") (content ((type . "html") (xml:lang . "en")) "<p>2010 has been a pretty good year for us, it seems like is has packed a lot in.</p>
<p>Professionally I’ve been doing really well. The <a href=\"http://cbnl.com/\">company I work for</a> has had yet another record breaking year which has triggered my bonus again (although I don’t find out how much until I get back). It continues to grow in both revenue and <a href=\"http://cbnl.com/jobs/\">size</a>. I finally feel comfortable with the code base I’m working with. At the same time the ever growing feature list means I’ve still got plenty of interesting things to do with it. Although the internal code is proprietary to the company I’ve got a fairly wide latitude to work with FLOSS code and it makes a significant portion of the NMS product. Pretty much anything that I hack on that is useful to the wider community outside the application specific task is fed upstream which is good for both the company and the wider world.</p>
<p>Aside from my work based hacking 2010 was also the year I became a real open source project maintainer. I’ve been <a href=\"https://github.com/stsquad\">publishing code</a> I write and use for a long time and have done maintenance work on some niche <a href=\"http://stonx.sourceforge.net/\">projects</a> as well as contributing to other projects as normal. However at the start of 2010 I released <a href=\"http://www.bennee.com/~alex/blog/2010/01/25/finally-public/\">Edit with Emacs</a> to an unsuspecting world. It started as a simple exercise in learning some Chrome Javascript and kicking me to delve deeper into elisp coding. However since then it has grown to something that gets regular contributions and is used by <a href=\"https://chrome.google.com/extensions/detail/ljobjlafonikaiipfkggjbhkghgicgoh\">over a thousand people</a>. To quote Blur it gives me an enormous sense of well being <img alt=\":-)\" class=\"wp-smiley\" src=\"http://www.bennee.com/~alex/blog/wp-includes/images/smilies/icon_smile.gif\" /> </p>
<p>This year has also been an interesting year politically. While there is plenty of debate about the economics of some of the choices made by the coalition I’m personally fairly happy with the approach being taken given the fairly dire conditions they inherited. From my geek point of view it’s heartening to see the pre-election commitment that was made to open data seems to be being lived up to. I’m hoping the changes to openness will get embedded into the way government does business permanently.  </p>
<p>The big thing that dwarfed all other things this year of course was getting married to the wonderful Fliss. Saving up all my holidays for the honeymoon meant we didn’t have many extended breaks and of course as the logistical tasks approached there was much running around and controlled panics. In the end everything went like a dream and the wedding itself was a blur of happy memories. It was a fantastic day and made all the better for all the friends and family that came along to share in the celebration. Getting married to Fliss is quite possibly the best thing I’ve ever done.</p>
<p>I do occasionally have pangs of guilt considering how lucky we have been especially when so many are struggling with the uncertainty of the economic situation and the stress that causes. All I can do is wish the best of lucky to everyone for the next year. I hope it exceeds the positive expectations and under-performs on the negative ones!</p>") (author nil (name nil "Alex") (uri nil "http://www.bennee.com/~alex/blog")) (source nil (title ((type . "html")) "Alex's Adventures on the Infobahn » emacs") (subtitle ((type . "html")) "the wanderings of a supposed digital native") (link ((rel . "self") (href . "http://www.bennee.com/~alex/blog/tag/emacs/feed/"))) (id nil "http://www.bennee.com/~alex/blog"))) (entry nil (title ((type . "html")) "Kyle Sexton: Fixed MobileOrg") (link ((href . "http://mocker.org/mobileorg"))) (id nil "http://mocker.org/mobileorg") (updated nil "2011-01-01T20:38:00+00:00") (content ((type . "html")) "<p>
	</p><p>I kept getting a \"Wrong type argument: stringp, nil\" error when I tried to do org-mobile-pull. The trick is to understand that 'org-mobile-inbox-for-pull' should be set to a file in your org directory, not the file that org-mobile is writing to. </p><p></p> This: (setq org-mobile-inbox-for-pull \"~/Dropbox/orgmode/mobileorg.org\") <p></p> Not this: <p></p> (setq org-mobile-inbox-for-pull \"~/Dropbox/MobileOrg/mobileorg.org\")<p></p>
	
<p></p>

<p><a href=\"http://mocker.org/mobileorg\">Permalink</a> 

	| <a href=\"http://mocker.org/mobileorg#comment\">Leave a comment  »</a>

</p>") (author nil (name nil "Kyle Sexton") (uri nil "http://mocker.org")) (source nil (title ((type . "html")) "mocker.org") (subtitle ((type . "html")) "Most recent posts at mocker.org") (link ((rel . "self") (href . "http://mocker.org/rss.xml"))) (id nil "http://mocker.org"))))) ("Julien Danjou: Emacs snapshot Ubuntu packages" "<p><a href=\"http://emacs.naquadah.org\">Emacs snapshot packages for Ubuntu</a> are now available, thanks to
<a href=\"http://blog.tapoueh.org\">Dimitri Fontaine</a>.</p>
<a href=\"http://flattr.com/thing/47923/Julien-Danjous-blog\" target=\"_blank\">
<img alt=\"Flattr this\" border=\"0\" src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" title=\"Flattr this\" /></a>" "http://julien.danjou.info/blog/index.html#Emacs_snapshot_Ubuntu_packages" (19773 35052) old 1 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Julien Danjou: Emacs snapshot Ubuntu packages") (link ((href . "http://julien.danjou.info/blog/index.html#Emacs_snapshot_Ubuntu_packages"))) (id nil "http://julien.danjou.info/blog/index.html#Emacs_snapshot_Ubuntu_packages") (updated nil "2011-01-24T14:13:00+00:00") (content ((type . "html")) "<p><a href=\"http://emacs.naquadah.org\">Emacs snapshot packages for Ubuntu</a> are now available, thanks to
<a href=\"http://blog.tapoueh.org\">Dimitri Fontaine</a>.</p>



<a href=\"http://flattr.com/thing/47923/Julien-Danjous-blog\" target=\"_blank\">
<img alt=\"Flattr this\" border=\"0\" src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" title=\"Flattr this\" /></a>") (author nil (name nil "Julien Danjou") (email nil "julien@danjou.info") (uri nil "http://julien.danjou.info/blog/index.html")) (source nil (title ((type . "html")) "jd:/dev/blog") (subtitle ((type . "html")) "Julien Danjou's blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.html")))) ("suso: Actualizado el Manual de GNU Emacs a 22.2" "<p>Tengo el inmenso placer de anunciar la actualización de la traducción<br />
del Manual de GNU Emacs<sup class=\"glossary-indicator\" title=\"Encarnación GNU de Emacs.\"><a class=\"glossary-indicator\" href=\"http://gnu.manticore.es/glossary/6/letterg#term47\" title=\"Encarnación GNU de Emacs.\">i</a></sup> a su Decimosexta Edición, correspondiente a<br />
GNU Emacs 22.2.  Sigue estando en fase alfa, aunque hemos corregido<br />
muchos errores mecanográficos y avanzado en tareas de la fase beta.</p>
<p>Ha sido un trabajo arduo e ingrato, pues en dicha edición se produjeron<br />
sustanciales cambios estructurales en el manual original que nos<br />
retrasaron muchísimo la actualización.  Buena parte de esos cambios no<br />
eran de especial importancia desde el punto de vista de la edición en</p>
<p><a href=\"http://gnu.manticore.es/node/1685\" target=\"_blank\">leer más</a></p>" "http://gnu.manticore.es/node/1685" (19773 34072) old 2 nil nil ((title ((type . "html") (xml:lang . "es")) "suso: Actualizado el Manual de GNU Emacs a 22.2") (link ((href . "http://gnu.manticore.es/node/1685"))) (id nil "http://gnu.manticore.es/1685 at http://gnu.manticore.es") (updated nil "2011-01-24T13:56:40+00:00") (content ((type . "html")) "<p>Tengo el inmenso placer de anunciar la actualización de la traducción<br />
del Manual de GNU Emacs<sup class=\"glossary-indicator\" title=\"Encarnación GNU de Emacs.\"><a class=\"glossary-indicator\" href=\"http://gnu.manticore.es/glossary/6/letterg#term47\" title=\"Encarnación GNU de Emacs.\">i</a></sup> a su Decimosexta Edición, correspondiente a<br />
GNU Emacs 22.2.  Sigue estando en fase alfa, aunque hemos corregido<br />
muchos errores mecanográficos y avanzado en tareas de la fase beta.</p>
<p>Ha sido un trabajo arduo e ingrato, pues en dicha edición se produjeron<br />
sustanciales cambios estructurales en el manual original que nos<br />
retrasaron muchísimo la actualización.  Buena parte de esos cambios no<br />
eran de especial importancia desde el punto de vista de la edición en</p>
 <p><a href=\"http://gnu.manticore.es/node/1685\" target=\"_blank\">leer más</a></p>") (author nil (name nil "suso") (uri nil "http://gnu.manticore.es/taxonomy/term/1/0")) (source nil (title ((type . "html")) "GNU + Emacs en español para usuarios finales - Emacs") (link ((rel . "self") (href . "http://gnu.manticore.es/taxonomy/term/1/0/feed"))) (id nil "http://gnu.manticore.es/taxonomy/term/1/0")))) ("Tom Breton: cord-and-emacs-3" "<div>
<div class=\"outline-2\" id=\"outline-container-1\">
<h2 id=\"sec-1\">cord-and-emacs-3 </h2>
<div class=\"outline-text-2\" id=\"text-1\">
</div>
<div class=\"outline-3\" id=\"outline-container-1_1\">
<h3 id=\"sec-1_1\">Quick catchup </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">
<p>
About a year ago I <a href=\"http://tehom-blog.blogspot.com/2010/03/cords-and-emacs_25.html\">blogged an idea</a> about combining cords and
emacs<sup><a class=\"footref\" href=\"http://tehom-blog.blogspot.com/feeds/posts/default/-/emacs#fn.1\" name=\"fnr.1\">1</a></sup>.  Now that it has jangled around in my head for another
year, I have some further thoughts.  Yesterday I <a href=\"http://tehom-blog.blogspot.com/2011/01/structure-of-emacs-text.html\">talked about</a> how
emacs wants to structure text and how it pretends to.
</p>
<p>
Now I want to talk about the ramifications of structured text on my
wild idea of combining emacs and cords.
</p>
</div>
</div>
<div class=\"outline-3\" id=\"outline-container-1_2\">
<h3 id=\"sec-1_2\">Don't ask buffer to hold a list etc </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">
<p>
One things I talked about yesterday was how some modes want the buffer
to be a list or tree of objects.  It's tempting, then, to imagine that
some buffers would hold a list or tree of printable objects instead of
text.
</p>
<p>
But it wouldn't work well.  Even when printable objects fully control
their own representation, as widgets and ewocs do, they are generally
do not want to be the whole printed representation.  They want
accoutrements, often headers, footers, and separators.
</p>
</div>
</div>
<div class=\"outline-3\" id=\"outline-container-1_3\">
<h3 id=\"sec-1_3\">So just one object </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">
<p>
So buffer would hold at most one object, either (as now) a text
string, or a printable object that manages both its own sub-objects
(the model) and the cord that it presents for display (the view).
</p>
<p>
Presumably the design is basically recursive, something like this: The
root object supplies a template and farms most of its representation
out to its sub-objects.  They in turn farm it out to sub-sub-objects,
etc.  Each sub<sup>N</sup>-object generates a cord from data that it owns.
</p>
</div>
</div>
<div class=\"outline-3\" id=\"outline-container-1_4\">
<h3 id=\"sec-1_4\">Dynamic content </h3>
<div class=\"outline-text-3\" id=\"text-1_4\">
<p>
Our sub<sup>N</sup>-objects will create content dynamically.  Cords support that
with CORD_from_fn.  But doing only that has some drawbacks:
</p>
<ul>
<li>
CORD_fn wants to give one character at a time.  That's very
inefficient.
</li>
<li>
Each displayable object would have to manage caching etc itself.
</li>
<li>
We'll want different things from it for different purposes:
<ul>
<li>
To display
<ul>
<li>
It might be blank or abbreviated for invisibility or folding.
Emacs does this by looking at a magic text property, but it's
really a display concern.
</li>
<li>
It might include ornaments that are not part of the proper
text.
</li>
</ul>
</li>
<li>
To search.
<ul>
<li>
If an item is folded, we generally still want to search its
text.
</li>
<li>
For widgets and similar, we'd like to search on just the real
text and not ornaments in the display such as button
characters.
</li>
</ul>
</li>
<li>
To save to file.
<ul>
<li>
This representation might be completely different that the
displayed text, eg as we do for project-buffer-mode buffers.
</li>
</ul>
</li>
<li>
Other lesser purposes, such as:
<ul>
<li>
Displaying differently in different windows.
</li>
<li>
Exporting
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>
So let's make these objects' lives a little easier.  I suggest adding
to the roster of cords types a super-CORD_from_fn, which would
contain:
</p><ul>
<li>
client<sub>data</sub> as for CORD_from_fn
</li>
<li>
A cache for each major use-type above (display,search,save)
<ul>
<li>
A dirty or uninitialized cache could be indicated as a magic
object.
</li>
<li>
Possibly also a catchall cache for other use-types.
</li>
</ul>
</li>
<li>
A method that:
<ul>
<li>
Takes client_data
</li>
<li>
Takes an object indicating the use-type
</li>
<li>
Returns a cord
</li>
</ul>
</li>
<li>
Not length.  It may differ across use-types.  If cache is dirty,
it's not known, while if cache is clean, one can just find length
in it.
</li>
</ul>
</div>
</div>
<div class=\"outline-3\" id=\"outline-container-1_5\">
<h3 id=\"sec-1_5\">Some quick notes </h3>
<div class=\"outline-text-3\" id=\"text-1_5\">
</div>
<div class=\"outline-4\" id=\"outline-container-1_5_1\">
<h4 id=\"sec-1_5_1\">Display and faces </h4>
<div class=\"outline-text-4\" id=\"text-1_5_1\">
<p>
Displaying in different faces need no longer be a trick.  We could add
to the roster of cords types a \"face\" cord that controls the face that
text enclosed in it is displayed in.
</p>
<p>
We could also provide an \"image\" cord, meaning to show that image
inline with the text.
</p>
</div>
</div>
</div>
<div class=\"outline-3\" id=\"outline-container-1_6\">
<h3 id=\"sec-1_6\">How to read such files? </h3>
<div class=\"outline-text-3\" id=\"text-1_6\">
<p>
How does one know to use this structuring for a given file?  Just
about as now: an auto-mode-alist tells what mode to use.  A \"mode\"
file-local variable can be used to supplement this mechanism.  Just
let modes can control the read and hand the buffer a
super-CORD_from_fn object instead of a plain text cord object.
</p>
<p>
A file could be visited as plain text by another command,
`find-file-as-text'.
</p>
</div>
</div>
</div>
<div id=\"footnotes\">
<h2 class=\"footnotes\">Footnotes: </h2>
<div id=\"text-footnotes\">
<p class=\"footnote\"><sup><a class=\"footnum\" href=\"http://tehom-blog.blogspot.com/feeds/posts/default/-/emacs#fnr.1\" name=\"fn.1\">1</a></sup> Quick summary: Cords are neat and mondo efficient, Emacs, for
all its greatness, uses buffer-gap which is much weaker.  But emacs
text isn't just text, it has properties and markers and other useful
stuff.  To make that work, we'd have to add some stuff onto cords, but
it's doable.
</p>
</div>
</div>
</div>
<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/5983563776019477979-604376293439899135?l=tehom-blog.blogspot.com\" width=\"1\" /></div>" "http://tehom-blog.blogspot.com/2011/01/cord-and-emacs-3.html" (19773 1964) old 3 nil nil ((title ((type . "html")) "Tom Breton: cord-and-emacs-3") (link ((href . "http://tehom-blog.blogspot.com/2011/01/cord-and-emacs-3.html"))) (id nil "tag:blogger.com,1999:blog-5983563776019477979.post-604376293439899135") (updated nil "2011-01-24T05:01:32+00:00") (content ((type . "html")) "<div>
<div class=\"outline-2\" id=\"outline-container-1\">
<h2 id=\"sec-1\">cord-and-emacs-3 </h2>
<div class=\"outline-text-2\" id=\"text-1\">



</div>

<div class=\"outline-3\" id=\"outline-container-1_1\">
<h3 id=\"sec-1_1\">Quick catchup </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">


<p>
About a year ago I <a href=\"http://tehom-blog.blogspot.com/2010/03/cords-and-emacs_25.html\">blogged an idea</a> about combining cords and
emacs<sup><a class=\"footref\" href=\"http://tehom-blog.blogspot.com/feeds/posts/default/-/emacs#fn.1\" name=\"fnr.1\">1</a></sup>.  Now that it has jangled around in my head for another
year, I have some further thoughts.  Yesterday I <a href=\"http://tehom-blog.blogspot.com/2011/01/structure-of-emacs-text.html\">talked about</a> how
emacs wants to structure text and how it pretends to.
</p>
<p>
Now I want to talk about the ramifications of structured text on my
wild idea of combining emacs and cords.
</p>
</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_2\">
<h3 id=\"sec-1_2\">Don't ask buffer to hold a list etc </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">


<p>
One things I talked about yesterday was how some modes want the buffer
to be a list or tree of objects.  It's tempting, then, to imagine that
some buffers would hold a list or tree of printable objects instead of
text.
</p>
<p>
But it wouldn't work well.  Even when printable objects fully control
their own representation, as widgets and ewocs do, they are generally
do not want to be the whole printed representation.  They want
accoutrements, often headers, footers, and separators.
</p>
</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_3\">
<h3 id=\"sec-1_3\">So just one object </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">


<p>
So buffer would hold at most one object, either (as now) a text
string, or a printable object that manages both its own sub-objects
(the model) and the cord that it presents for display (the view).
</p>
<p>
Presumably the design is basically recursive, something like this: The
root object supplies a template and farms most of its representation
out to its sub-objects.  They in turn farm it out to sub-sub-objects,
etc.  Each sub<sup>N</sup>-object generates a cord from data that it owns.
</p>
</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_4\">
<h3 id=\"sec-1_4\">Dynamic content </h3>
<div class=\"outline-text-3\" id=\"text-1_4\">


<p>
Our sub<sup>N</sup>-objects will create content dynamically.  Cords support that
with CORD_from_fn.  But doing only that has some drawbacks:
</p>
<ul>
<li>
CORD_fn wants to give one character at a time.  That's very
inefficient.
</li>
<li>
Each displayable object would have to manage caching etc itself.
</li>
<li>
We'll want different things from it for different purposes:
<ul>
<li>
To display
<ul>
<li>
It might be blank or abbreviated for invisibility or folding.
Emacs does this by looking at a magic text property, but it's
really a display concern.
</li>
<li>
It might include ornaments that are not part of the proper
text.
</li>
</ul>
</li>
<li>
To search.
<ul>
<li>
If an item is folded, we generally still want to search its
text.
</li>
<li>
For widgets and similar, we'd like to search on just the real
text and not ornaments in the display such as button
characters.
</li>
</ul>
</li>
<li>
To save to file.
<ul>
<li>
This representation might be completely different that the
displayed text, eg as we do for project-buffer-mode buffers.
</li>
</ul>
</li>
<li>
Other lesser purposes, such as:
<ul>
<li>
Displaying differently in different windows.
</li>
<li>
Exporting
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>
So let's make these objects' lives a little easier.  I suggest adding
to the roster of cords types a super-CORD_from_fn, which would
contain:
</p><ul>
<li>
client<sub>data</sub> as for CORD_from_fn
</li>
<li>
A cache for each major use-type above (display,search,save)
<ul>
<li>
A dirty or uninitialized cache could be indicated as a magic
object.
</li>
<li>
Possibly also a catchall cache for other use-types.
</li>
</ul>
</li>
<li>
A method that:
<ul>
<li>
Takes client_data
</li>
<li>
Takes an object indicating the use-type
</li>
<li>
Returns a cord
</li>
</ul>
</li>
<li>
Not length.  It may differ across use-types.  If cache is dirty,
it's not known, while if cache is clean, one can just find length
in it.
</li>
</ul>


</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_5\">
<h3 id=\"sec-1_5\">Some quick notes </h3>
<div class=\"outline-text-3\" id=\"text-1_5\">


</div>

<div class=\"outline-4\" id=\"outline-container-1_5_1\">
<h4 id=\"sec-1_5_1\">Display and faces </h4>
<div class=\"outline-text-4\" id=\"text-1_5_1\">


<p>
Displaying in different faces need no longer be a trick.  We could add
to the roster of cords types a \"face\" cord that controls the face that
text enclosed in it is displayed in.
</p>
<p>
We could also provide an \"image\" cord, meaning to show that image
inline with the text.
</p>
</div>
</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_6\">
<h3 id=\"sec-1_6\">How to read such files? </h3>
<div class=\"outline-text-3\" id=\"text-1_6\">


<p>
How does one know to use this structuring for a given file?  Just
about as now: an auto-mode-alist tells what mode to use.  A \"mode\"
file-local variable can be used to supplement this mechanism.  Just
let modes can control the read and hand the buffer a
super-CORD_from_fn object instead of a plain text cord object.
</p>
<p>
A file could be visited as plain text by another command,
`find-file-as-text'.
</p>




</div>
</div>
</div>
<div id=\"footnotes\">
<h2 class=\"footnotes\">Footnotes: </h2>
<div id=\"text-footnotes\">
<p class=\"footnote\"><sup><a class=\"footnum\" href=\"http://tehom-blog.blogspot.com/feeds/posts/default/-/emacs#fnr.1\" name=\"fn.1\">1</a></sup> Quick summary: Cords are neat and mondo efficient, Emacs, for
all its greatness, uses buffer-gap which is much weaker.  But emacs
text isn't just text, it has properties and markers and other useful
stuff.  To make that work, we'd have to add some stuff onto cords, but
it's doable.
</p>
</div>
</div>

    </div>
  <div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/5983563776019477979-604376293439899135?l=tehom-blog.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Tehom") (email nil "noreply@blogger.com") (uri nil "http://tehom-blog.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "Tehom") (link ((rel . "self") (href . "http://www.blogger.com/feeds/5983563776019477979/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-5983563776019477979")))) ("Yoni Rabkin Katzenell: rt-liberation.el update" "<p>I've pushed out a small update to rt-liberation: When you open, assign and resolve tickets in the browser, point will return the ticket instead of <i>point-min</i>. Really small change; fixes a really annoying behavior.</p><p>
G[ei]t it with: <code>git clone http://yrk.nfshost.com/repos/rt-liberation.git</code></p>" "http://yrk.rabkins.net/emacs/pants-2011-01-23-08-50.html" (19772 12808) old 4 nil nil ((title ((type . "html") (xml:lang . "en")) "Yoni Rabkin Katzenell: rt-liberation.el update") (link ((href . "http://yrk.rabkins.net/emacs/pants-2011-01-23-08-50.html"))) (id nil "http://yrk.rabkins.net/2011/01/23/pants-2011-01-23-08-50") (updated nil "2011-01-23T13:50:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I've pushed out a small update to rt-liberation: When you open, assign and resolve tickets in the browser, point will return the ticket instead of <i>point-min</i>. Really small change; fixes a really annoying behavior.</p><p>

G[ei]t it with: <code>git clone http://yrk.nfshost.com/repos/rt-liberation.git</code></p>") (author nil (name nil "Yoni Rabkin") (uri nil "http://yrk.rabkins.net/emacs/index.atom")) (source nil (title ((type . "html")) "Talk is Talk, Kill is Kill") (subtitle ((type . "html")) "The Bestest Blog... in the World") (link ((rel . "self") (href . "http://yrk.rabkins.net/emacs/index.atom"))) (id nil "http://yrk.rabkins.net/emacs/index.atom") (rights ((type . "html")) "Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Yoni Rabkin")))) ("Julien Danjou: OrgCamp Paris 2011 review" "<p class=\"first\">Yesterday afternoon, I was at the first <a href=\"http://www.lifehacking.fr/mediawiki/index.php/OrgModeCampJanvier2011\">OrgCamp in Paris</a>. It was my first
attendance to a <a href=\"http://en.wikipedia.org/wiki/BarCamp\">BarCamp</a>, and I really liked it. It's basically the first
geek event I do not find boring nor useless.</p>
<p>There was about 18-20 persons participating, which was quite high, since we
all initially though we would have been only 5.</p>
<p>We had several presentations of various features and personal usages of
<a href=\"http://www.orgmode.org\">Org-mode</a>. For my part, I've quickly presented the agenda, and my <a href=\"http://bbdb.sourceforge.net/\">BBDB</a>
replacement named <a href=\"http://git.naquadah.org/?p=org-contacts.git;a=summary\">org-contacts</a> (I'll probably talk about it on this blog in
another post later).</p>
<p>The only downside was that Bastien (the new Org-mode maintainer) was not
able to come and join us. On the other side, there were so much to tell for
a first time, I did not have so much time to code. I only have been able to
<a href=\"http://lists.gnu.org/archive/html/emacs-orgmode/2011-01/msg01002.html\">fix one bug</a> reported during my agenda presentation.</p>
<p>In the end, the overall atmosphere was very enthusiastic and friendly, which
was extremely pleasant. The #org-mode-fr IRC channel has been created on
<a href=\"http://freenode.net\">Freenode</a>, following this event. Feel free to join us.</p>
<p>Since people liked it so badly, it seems there should be another barcamp in
the next months. Stay tuned.</p>
<a href=\"http://flattr.com/thing/47923/Julien-Danjous-blog\" target=\"_blank\">
<img alt=\"Flattr this\" border=\"0\" src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" title=\"Flattr this\" /></a>" "http://julien.danjou.info/blog/index.html#OrgCamp_Paris__review" (19772 7768) old 5 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Julien Danjou: OrgCamp Paris 2011 review") (link ((href . "http://julien.danjou.info/blog/index.html#OrgCamp_Paris__review"))) (id nil "http://julien.danjou.info/blog/index.html#OrgCamp_Paris__review") (updated nil "2011-01-23T12:26:00+00:00") (content ((type . "html")) "<p class=\"first\">Yesterday afternoon, I was at the first <a href=\"http://www.lifehacking.fr/mediawiki/index.php/OrgModeCampJanvier2011\">OrgCamp in Paris</a>. It was my first
attendance to a <a href=\"http://en.wikipedia.org/wiki/BarCamp\">BarCamp</a>, and I really liked it. It's basically the first
geek event I do not find boring nor useless.</p>

<p>There was about 18-20 persons participating, which was quite high, since we
all initially though we would have been only 5.</p>

<p>We had several presentations of various features and personal usages of
<a href=\"http://www.orgmode.org\">Org-mode</a>. For my part, I've quickly presented the agenda, and my <a href=\"http://bbdb.sourceforge.net/\">BBDB</a>
replacement named <a href=\"http://git.naquadah.org/?p=org-contacts.git;a=summary\">org-contacts</a> (I'll probably talk about it on this blog in
another post later).</p>

<p>The only downside was that Bastien (the new Org-mode maintainer) was not
able to come and join us. On the other side, there were so much to tell for
a first time, I did not have so much time to code. I only have been able to
<a href=\"http://lists.gnu.org/archive/html/emacs-orgmode/2011-01/msg01002.html\">fix one bug</a> reported during my agenda presentation.</p>

<p>In the end, the overall atmosphere was very enthusiastic and friendly, which
was extremely pleasant. The #org-mode-fr IRC channel has been created on
<a href=\"http://freenode.net\">Freenode</a>, following this event. Feel free to join us.</p>

<p>Since people liked it so badly, it seems there should be another barcamp in
the next months. Stay tuned.</p>



<a href=\"http://flattr.com/thing/47923/Julien-Danjous-blog\" target=\"_blank\">
<img alt=\"Flattr this\" border=\"0\" src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" title=\"Flattr this\" /></a>") (author nil (name nil "Julien Danjou") (email nil "julien@danjou.info") (uri nil "http://julien.danjou.info/blog/index.html")) (source nil (title ((type . "html")) "jd:/dev/blog") (subtitle ((type . "html")) "Julien Danjou's blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.html")))) ("Tom Breton: Structure of emacs text" "<div>
<div class=\"outline-2\" id=\"outline-container-1\">
<h2 id=\"sec-1\">The effective structure of emacs text </h2>
<div class=\"outline-text-2\" id=\"text-1\">
</div>
<div class=\"outline-3\" id=\"outline-container-1_1\">
<h3 id=\"sec-1_1\">Emacs wants to structure text </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">
<p>
Emacs is not a structural editor, but it structures text a lot.  Right
now I'm writing in org-mode, and in this one buffer I'm looking at
maybe 3 dozen distinct meaningful regions displaying in 8 different
faces.  And that's just what I've written so far, here at the third
paragraph.
</p>
<p>
Furthermore, there are outlines, ewocs, widgets, overlays, and
stretches of text that have their own keymaps, or faces, or actions
before and after insertion, etc.  On the emacs-devel list, they were
recently proposing \"islands\" of text that would nearly have their own
modes.
</p>
</div>
<div class=\"outline-4\" id=\"outline-container-1_1_1\">
<h4 id=\"sec-1_1_1\">But the structure is a trick </h4>
<div class=\"outline-text-4\" id=\"text-1_1_1\">
<p>
Yet except for overlays, they are all tricks.  They are faked by
careful control over emacs' interaction with the text \"inside\" the
fake objects.  This can involve controlling point motion, regions,
insertion, marks, display, sticky properties, etc.  As an elisp
programmer, IMO this need to fake structure contributes more
complexity to elisp code than any other single factor does.
</p>
<p>
It also makes for fragile interactions.  A user can accidentally
transgress the structural assumptions, for instance by splitting a
headline in an outline.  Sometimes I do.  It's hard to prevent.
</p>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-1_1_2\">
<h4 id=\"sec-1_1_2\">Flexibility is important too </h4>
<div class=\"outline-text-4\" id=\"text-1_1_2\">
<p>
On the other hand, there's something to be said for that situation.
It's flexible.  It doesn't limit you to a predefined set of types and
operations on them.  It doesn't need to predict what sort of structure
will be useful, because it doesn't provide any.  It just hands the
Elisp programmer a set of basic tools with which to build structure.
</p>
</div>
</div>
</div>
<div class=\"outline-3\" id=\"outline-container-1_2\">
<h3 id=\"sec-1_2\">The dimensions of useful text structure </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">
</div>
<div class=\"outline-4\" id=\"outline-container-1_2_1\">
<h4 id=\"sec-1_2_1\">Boundaries </h4>
<div class=\"outline-text-4\" id=\"text-1_2_1\">
</div>
<div class=\"outline-5\" id=\"outline-container-1_2_1_1\">
<h5 id=\"sec-1_2_1_1\">Solid objects </h5>
<div class=\"outline-text-5\" id=\"text-1_2_1_1\">
<p>
On the one hand, there are structures that want to be real objects,
with an inside and an outside.  For example, an ewoc or a widget.
</p>
<p>
There's no such thing as half of one of these.  Half an ewoc makes no
sense.  If you kill half the text inside a widget, you're left with a
complete widget that has less text.
</p>
<p>
We don't want to cross scope on these objects at all.  A region with
(say) point inside a widget and mark outside is not generally useful.
</p>
</div>
</div>
<div class=\"outline-5\" id=\"outline-container-1_2_1_2\">
<h5 id=\"sec-1_2_1_2\">Not solid: Mere stretches of text </h5>
<div class=\"outline-text-5\" id=\"text-1_2_1_2\">
<p>
On the other hand, there are structures that want to be just stretches
of text.  For example, ordinary text even if you have marked a region
in it, or given some part of it a special face or property.
</p>
<p>
These have no intrinsic inside and outside, nor any strong intrinsic
structure.  In fact, these things are scarcely \"things\".  We're just
pointing at some length of text, asking whether it's an object, and
getting \"no\".
</p>
</div>
</div>
<div class=\"outline-5\" id=\"outline-container-1_2_1_3\">
<h5 id=\"sec-1_2_1_3\">Semi-solid objects </h5>
<div class=\"outline-text-5\" id=\"text-1_2_1_3\">
<p>
And there are intermediate cases.  For example, an item in an outline.
For a less solid example, a word or paragraph in a text mode.
</p>
<p>
These still want to have an inside and an outside, but it's editable.
If you delete the whitespace between two words, you've got just one
word.
</p>
</div>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-1_2_2\">
<h4 id=\"sec-1_2_2\">Holds data? </h4>
<div class=\"outline-text-4\" id=\"text-1_2_2\">
<p>
If there's a text-containing object, can it hold data in addition to
the text itself?  In emacs, the answer is always \"yes\".  Text can have
properties, which can be of any type.
</p>
<p>
So the question is not \"does it hold data?\", but \"does it hold data in
a way that covaries with the (pseudo)type of object it is?\"
</p>
<p>
For ewocs and widgets, the answer is clearly yes.  Even for outline
items, the answer wants to be yes.  For instance, org items can have
properties, and all outline items have an implied \"depth\" property.
</p>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-1_2_3\">
<h4 id=\"sec-1_2_3\">Has behavior? </h4>
<div class=\"outline-text-4\" id=\"text-1_2_3\">
<p>
Again, in emacs the answer is always \"yes\", and of course there's the
caveat that behavior is really due to commands and not objects and we
need to rule out buggy commands that don't understand the given
object.
</p>
<p>
So again we need to refine the question.  \"Does it, in conjunction
with the set of commands appropriate to it, behave in a way that
covaries with the (pseudo)type of object it is?\"
</p>
<p>
Again, for the solid objects the answer is clearly yes, and \"yes\" also
seems correct for the semi-solid objects.
</p>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-1_2_4\">
<h4 id=\"sec-1_2_4\">Weight </h4>
<div class=\"outline-text-4\" id=\"text-1_2_4\">
</div>
<div class=\"outline-5\" id=\"outline-container-1_2_4_1\">
<h5 id=\"sec-1_2_4_1\">Lightweight </h5>
<div class=\"outline-text-5\" id=\"text-1_2_4_1\">
<p>
For instance, words and paragraphs.  Emacs deals specially with those
in various ways.  But it often does so without remembering the
lightweight object as an entity.  For instance, word constituents are
defined the syntax table.
</p>
</div>
</div>
<div class=\"outline-5\" id=\"outline-container-1_2_4_2\">
<h5 id=\"sec-1_2_4_2\">Heavyweight </h5>
<div class=\"outline-text-5\" id=\"text-1_2_4_2\">
<p>
For instance, widgets.  Also ewocs.
</p>
</div>
</div>
<div class=\"outline-5\" id=\"outline-container-1_2_4_3\">
<h5 id=\"sec-1_2_4_3\">In between </h5>
<div class=\"outline-text-5\" id=\"text-1_2_4_3\">
<p>
Of course there's a whole spectrum of weight in between widgets and
words.
</p>
</div>
</div>
</div>
<div class=\"outline-4\" id=\"outline-container-1_2_5\">
<h4 id=\"sec-1_2_5\">Impact on buffer structure </h4>
<div class=\"outline-text-4\" id=\"text-1_2_5\">
</div>
<div class=\"outline-5\" id=\"outline-container-1_2_5_1\">
<h5 id=\"sec-1_2_5_1\">Observation </h5>
<div class=\"outline-text-5\" id=\"text-1_2_5_1\">
<p>
(This is not a category).  The other dimensions were keyed by object
type, but for this dimension ISTM it makes more sense to key by mode
type.
</p></div>
</div>
<div class=\"outline-5\" id=\"outline-container-1_2_5_2\">
<h5 id=\"sec-1_2_5_2\">Total </h5>
<div class=\"outline-text-5\" id=\"text-1_2_5_2\">
<p>
In some modes, the buffer wants to be structured from beginning to
end.  For instance, dired or gnus.
</p>
<p>
Yanking in unstructured text would just confuse the mode.  Often the
buffer is read-only, even if user operations modify it, so that one
can't mess up the structured text at all.
</p>
</div>
</div>
<div class=\"outline-5\" id=\"outline-container-1_2_5_3\">
<h5 id=\"sec-1_2_5_3\">Minimal </h5>
<div class=\"outline-text-5\" id=\"text-1_2_5_3\">
<p>
Some modes expect essentially no structure.  For instance, fundamental
mode.  One can yank in arbitrary text; it's nothing special.  Now the
buffer has more text in it.
</p>
<p>
Text-mode is another example, now a little more structured.  It can be
viewed as structured into paragraphs, but any text whatsoever
qualifies as zero or more paragraphs.
</p>
</div>
</div>
<div class=\"outline-5\" id=\"outline-container-1_2_5_4\">
<h5 id=\"sec-1_2_5_4\">Partly structured </h5>
<div class=\"outline-text-5\" id=\"text-1_2_5_4\">
<p>
Other modes are intermediate.  For instance, outline mode, org mode,
or almost any source code mode.
</p>
<p>
These modes generally try to cope with any arbitrary text in it.  They
don't try to prevent killing or yanking.  But they also treat some
text specially or give it extra meaning - for outline, it's headlines
and stars.  For source code, it generally includes comments, code,
strings.
</p>
<p>
So the user is free to kill or yank, but needs to be somewhat careful
and needs to understand the meaning of various types of text.
</p>
</div>
</div>
</div>
</div>
<div class=\"outline-3\" id=\"outline-container-1_3\">
<h3 id=\"sec-1_3\">The picture </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">
<p>
So as I see it, the picture is one of wanna-be objects of varying
sizes floating around in emacs buffers.  The heavier ones are trying
to be real objects, the lighter ones aren't (much).  Some modes want
to be made up of text, others really want to be a list or tree of
objects.
</p>
<p>
In the next post, I plan to build on that.
</p>
</div>
</div>
</div>
</div>
<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/5983563776019477979-3858024574402722986?l=tehom-blog.blogspot.com\" width=\"1\" /></div>" "http://tehom-blog.blogspot.com/2011/01/structure-of-emacs-text.html" (19771 25982) old 6 nil nil ((title ((type . "html")) "Tom Breton: Structure of emacs text") (link ((href . "http://tehom-blog.blogspot.com/2011/01/structure-of-emacs-text.html"))) (id nil "tag:blogger.com,1999:blog-5983563776019477979.post-3858024574402722986") (updated nil "2011-01-22T23:17:18+00:00") (content ((type . "html")) "<div>
<div class=\"outline-2\" id=\"outline-container-1\">
<h2 id=\"sec-1\">The effective structure of emacs text </h2>
<div class=\"outline-text-2\" id=\"text-1\">



</div>

<div class=\"outline-3\" id=\"outline-container-1_1\">
<h3 id=\"sec-1_1\">Emacs wants to structure text </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">


<p>
Emacs is not a structural editor, but it structures text a lot.  Right
now I'm writing in org-mode, and in this one buffer I'm looking at
maybe 3 dozen distinct meaningful regions displaying in 8 different
faces.  And that's just what I've written so far, here at the third
paragraph.
</p>
<p>
Furthermore, there are outlines, ewocs, widgets, overlays, and
stretches of text that have their own keymaps, or faces, or actions
before and after insertion, etc.  On the emacs-devel list, they were
recently proposing \"islands\" of text that would nearly have their own
modes.
</p>

</div>

<div class=\"outline-4\" id=\"outline-container-1_1_1\">
<h4 id=\"sec-1_1_1\">But the structure is a trick </h4>
<div class=\"outline-text-4\" id=\"text-1_1_1\">


<p>
Yet except for overlays, they are all tricks.  They are faked by
careful control over emacs' interaction with the text \"inside\" the
fake objects.  This can involve controlling point motion, regions,
insertion, marks, display, sticky properties, etc.  As an elisp
programmer, IMO this need to fake structure contributes more
complexity to elisp code than any other single factor does.
</p>
<p>
It also makes for fragile interactions.  A user can accidentally
transgress the structural assumptions, for instance by splitting a
headline in an outline.  Sometimes I do.  It's hard to prevent.
</p>
</div>

</div>

<div class=\"outline-4\" id=\"outline-container-1_1_2\">
<h4 id=\"sec-1_1_2\">Flexibility is important too </h4>
<div class=\"outline-text-4\" id=\"text-1_1_2\">


<p>
On the other hand, there's something to be said for that situation.
It's flexible.  It doesn't limit you to a predefined set of types and
operations on them.  It doesn't need to predict what sort of structure
will be useful, because it doesn't provide any.  It just hands the
Elisp programmer a set of basic tools with which to build structure.
</p>
</div>
</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_2\">
<h3 id=\"sec-1_2\">The dimensions of useful text structure </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">



</div>

<div class=\"outline-4\" id=\"outline-container-1_2_1\">
<h4 id=\"sec-1_2_1\">Boundaries </h4>
<div class=\"outline-text-4\" id=\"text-1_2_1\">


</div>

<div class=\"outline-5\" id=\"outline-container-1_2_1_1\">
<h5 id=\"sec-1_2_1_1\">Solid objects </h5>
<div class=\"outline-text-5\" id=\"text-1_2_1_1\">


<p>
On the one hand, there are structures that want to be real objects,
with an inside and an outside.  For example, an ewoc or a widget.
</p>
<p>
There's no such thing as half of one of these.  Half an ewoc makes no
sense.  If you kill half the text inside a widget, you're left with a
complete widget that has less text.
</p>
<p>
We don't want to cross scope on these objects at all.  A region with
(say) point inside a widget and mark outside is not generally useful.
</p>
</div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_1_2\">
<h5 id=\"sec-1_2_1_2\">Not solid: Mere stretches of text </h5>
<div class=\"outline-text-5\" id=\"text-1_2_1_2\">


<p>
On the other hand, there are structures that want to be just stretches
of text.  For example, ordinary text even if you have marked a region
in it, or given some part of it a special face or property.
</p>
<p>
These have no intrinsic inside and outside, nor any strong intrinsic
structure.  In fact, these things are scarcely \"things\".  We're just
pointing at some length of text, asking whether it's an object, and
getting \"no\".
</p>
</div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_1_3\">
<h5 id=\"sec-1_2_1_3\">Semi-solid objects </h5>
<div class=\"outline-text-5\" id=\"text-1_2_1_3\">


<p>
And there are intermediate cases.  For example, an item in an outline.
For a less solid example, a word or paragraph in a text mode.
</p>
<p>
These still want to have an inside and an outside, but it's editable.
If you delete the whitespace between two words, you've got just one
word.
</p>
</div>
</div>

</div>

<div class=\"outline-4\" id=\"outline-container-1_2_2\">
<h4 id=\"sec-1_2_2\">Holds data? </h4>
<div class=\"outline-text-4\" id=\"text-1_2_2\">


<p>
If there's a text-containing object, can it hold data in addition to
the text itself?  In emacs, the answer is always \"yes\".  Text can have
properties, which can be of any type.
</p>
<p>
So the question is not \"does it hold data?\", but \"does it hold data in
a way that covaries with the (pseudo)type of object it is?\"
</p>
<p>
For ewocs and widgets, the answer is clearly yes.  Even for outline
items, the answer wants to be yes.  For instance, org items can have
properties, and all outline items have an implied \"depth\" property.
</p>
</div>

</div>

<div class=\"outline-4\" id=\"outline-container-1_2_3\">
<h4 id=\"sec-1_2_3\">Has behavior? </h4>
<div class=\"outline-text-4\" id=\"text-1_2_3\">


<p>
Again, in emacs the answer is always \"yes\", and of course there's the
caveat that behavior is really due to commands and not objects and we
need to rule out buggy commands that don't understand the given
object.
</p>
<p>
So again we need to refine the question.  \"Does it, in conjunction
with the set of commands appropriate to it, behave in a way that
covaries with the (pseudo)type of object it is?\"
</p>
<p>
Again, for the solid objects the answer is clearly yes, and \"yes\" also
seems correct for the semi-solid objects.
</p>
</div>

</div>

<div class=\"outline-4\" id=\"outline-container-1_2_4\">
<h4 id=\"sec-1_2_4\">Weight </h4>
<div class=\"outline-text-4\" id=\"text-1_2_4\">



</div>

<div class=\"outline-5\" id=\"outline-container-1_2_4_1\">
<h5 id=\"sec-1_2_4_1\">Lightweight </h5>
<div class=\"outline-text-5\" id=\"text-1_2_4_1\">


<p>
For instance, words and paragraphs.  Emacs deals specially with those
in various ways.  But it often does so without remembering the
lightweight object as an entity.  For instance, word constituents are
defined the syntax table.
</p>
</div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_4_2\">
<h5 id=\"sec-1_2_4_2\">Heavyweight </h5>
<div class=\"outline-text-5\" id=\"text-1_2_4_2\">


<p>
For instance, widgets.  Also ewocs.
</p>
</div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_4_3\">
<h5 id=\"sec-1_2_4_3\">In between </h5>
<div class=\"outline-text-5\" id=\"text-1_2_4_3\">


<p>
Of course there's a whole spectrum of weight in between widgets and
words.
</p>
</div>
</div>

</div>

<div class=\"outline-4\" id=\"outline-container-1_2_5\">
<h4 id=\"sec-1_2_5\">Impact on buffer structure </h4>
<div class=\"outline-text-4\" id=\"text-1_2_5\">



</div>

<div class=\"outline-5\" id=\"outline-container-1_2_5_1\">
<h5 id=\"sec-1_2_5_1\">Observation </h5>
<div class=\"outline-text-5\" id=\"text-1_2_5_1\">


<p>
(This is not a category).  The other dimensions were keyed by object
type, but for this dimension ISTM it makes more sense to key by mode
type.
</p></div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_5_2\">
<h5 id=\"sec-1_2_5_2\">Total </h5>
<div class=\"outline-text-5\" id=\"text-1_2_5_2\">


<p>
In some modes, the buffer wants to be structured from beginning to
end.  For instance, dired or gnus.
</p>
<p>
Yanking in unstructured text would just confuse the mode.  Often the
buffer is read-only, even if user operations modify it, so that one
can't mess up the structured text at all.
</p>
</div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_5_3\">
<h5 id=\"sec-1_2_5_3\">Minimal </h5>
<div class=\"outline-text-5\" id=\"text-1_2_5_3\">


<p>
Some modes expect essentially no structure.  For instance, fundamental
mode.  One can yank in arbitrary text; it's nothing special.  Now the
buffer has more text in it.
</p>
<p>
Text-mode is another example, now a little more structured.  It can be
viewed as structured into paragraphs, but any text whatsoever
qualifies as zero or more paragraphs.
</p>
</div>

</div>

<div class=\"outline-5\" id=\"outline-container-1_2_5_4\">
<h5 id=\"sec-1_2_5_4\">Partly structured </h5>
<div class=\"outline-text-5\" id=\"text-1_2_5_4\">


<p>
Other modes are intermediate.  For instance, outline mode, org mode,
or almost any source code mode.
</p>
<p>
These modes generally try to cope with any arbitrary text in it.  They
don't try to prevent killing or yanking.  But they also treat some
text specially or give it extra meaning - for outline, it's headlines
and stars.  For source code, it generally includes comments, code,
strings.
</p>
<p>
So the user is free to kill or yank, but needs to be somewhat careful
and needs to understand the meaning of various types of text.
</p>


</div>
</div>
</div>

</div>

<div class=\"outline-3\" id=\"outline-container-1_3\">
<h3 id=\"sec-1_3\">The picture </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">


<p>
So as I see it, the picture is one of wanna-be objects of varying
sizes floating around in emacs buffers.  The heavier ones are trying
to be real objects, the lighter ones aren't (much).  Some modes want
to be made up of text, others really want to be a list or tree of
objects.
</p>
<p>
In the next post, I plan to build on that.
</p>
</div>
</div>
</div>

    </div>
  <div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/5983563776019477979-3858024574402722986?l=tehom-blog.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Tehom") (email nil "noreply@blogger.com") (uri nil "http://tehom-blog.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "Tehom") (link ((rel . "self") (href . "http://www.blogger.com/feeds/5983563776019477979/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-5983563776019477979")))) ("Flickr tag 'emacs': emacs_sdic_waei" "<p><a href=\"http://www.flickr.com/people/syohex/\">896c0476fd083deb41404f54a6466a77</a> posted a photo:</p>
<p><a href=\"http://www.flickr.com/photos/syohex/5377964920/\" title=\"emacs_sdic_waei\"><img alt=\"emacs_sdic_waei\" height=\"240\" src=\"http://farm6.static.flickr.com/5244/5377964920_0a198bf06a_m.jpg\" width=\"226\" /></a></p>" "http://www.flickr.com/photos/syohex/5377964920/" (19770 57259) old 7 nil nil ((title ((type . "html")) "Flickr tag 'emacs': emacs_sdic_waei") (link ((href . "http://www.flickr.com/photos/syohex/5377964920/"))) (id nil "tag:flickr.com,2004:/photo/5377964920") (updated nil "2011-01-22T13:46:19+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/syohex/\">896c0476fd083deb41404f54a6466a77</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/syohex/5377964920/\" title=\"emacs_sdic_waei\"><img alt=\"emacs_sdic_waei\" height=\"240\" src=\"http://farm6.static.flickr.com/5244/5377964920_0a198bf06a_m.jpg\" width=\"226\" /></a></p>") (author nil (name nil "896c0476fd083deb41404f54a6466a77") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("Flickr tag 'emacs': external_editor_emacs" "<p><a href=\"http://www.flickr.com/people/syohex/\">896c0476fd083deb41404f54a6466a77</a> posted a photo:</p>
<p><a href=\"http://www.flickr.com/photos/syohex/5376725858/\" title=\"external_editor_emacs\"><img alt=\"external_editor_emacs\" height=\"240\" src=\"http://farm6.static.flickr.com/5247/5376725858_ed114a1e6e_m.jpg\" width=\"226\" /></a></p>" "http://www.flickr.com/photos/syohex/5376725858/" (19770 7148) old 8 nil nil ((title ((type . "html")) "Flickr tag 'emacs': external_editor_emacs") (link ((href . "http://www.flickr.com/photos/syohex/5376725858/"))) (id nil "tag:flickr.com,2004:/photo/5376725858") (updated nil "2011-01-21T23:51:08+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/syohex/\">896c0476fd083deb41404f54a6466a77</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/syohex/5376725858/\" title=\"external_editor_emacs\"><img alt=\"external_editor_emacs\" height=\"240\" src=\"http://farm6.static.flickr.com/5247/5376725858_ed114a1e6e_m.jpg\" width=\"226\" /></a></p>") (author nil (name nil "896c0476fd083deb41404f54a6466a77") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("Yoni Rabkin Katzenell: <p>I've changed my tramp default to blog editing with:</p>" "<pre><code>
(setq tramp-default-method \"ssh\"
vc-ignore-dir-regexp (format \"\\\\(%s\\\\)\\\\|\\\\(%s\\\\)\"
vc-ignore-dir-regexp
tramp-file-name-regexp)
tramp-default-host \"my.server.com#1234\"
tramp-default-user \"emacs\")
</code>
</pre>
So I can show up in the server with <code>C-x C-f /ssh:: RET</code>" "http://yrk.rabkins.net/emacs/pants-2011-01-19-23-33.html" (19767 47868) old 9 nil nil ((title ((type . "html") (xml:lang . "en")) "Yoni Rabkin Katzenell: <p>I've changed my tramp default to blog editing with:</p>") (link ((href . "http://yrk.rabkins.net/emacs/pants-2011-01-19-23-33.html"))) (id nil "http://yrk.rabkins.net/2011/01/19/pants-2011-01-19-23-33") (updated nil "2011-01-20T04:33:00+00:00") (content ((type . "html") (xml:lang . "en")) "<pre><code>
(setq tramp-default-method \"ssh\"
      vc-ignore-dir-regexp (format \"\\\\(%s\\\\)\\\\|\\\\(%s\\\\)\"
				   vc-ignore-dir-regexp
				   tramp-file-name-regexp)
      tramp-default-host \"my.server.com#1234\"
      tramp-default-user \"emacs\")
</code>
</pre>
So I can show up in the server with <code>C-x C-f /ssh:: RET</code>") (author nil (name nil "Yoni Rabkin") (uri nil "http://yrk.rabkins.net/emacs/index.atom")) (source nil (title ((type . "html")) "Talk is Talk, Kill is Kill") (subtitle ((type . "html")) "The Bestest Blog... in the World") (link ((rel . "self") (href . "http://yrk.rabkins.net/emacs/index.atom"))) (id nil "http://yrk.rabkins.net/emacs/index.atom") (rights ((type . "html")) "Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Yoni Rabkin")))) ("Mickey Petersen: Make script files executable automatically" "<p>You can force Emacs to make a file executable (respecting your <code>umask</code> settings) if Emacs considers it a script. To determine if it is a script, Emacs will look for the <em>hash-bang</em> notation in the file and treat it as a script if it finds it.</p>
<p>Add this to your .emacs and Emacs will then make the file executable if it is a script.</p>
<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span>add-hook 'after-save-hook
'executable-make-buffer-file-executable-if-script-p<span style=\"color: #66cc66;\">)</span></pre></div></div>
<p><a class=\"a2a_button_reddit\" href=\"http://www.addtoany.com/add_to/reddit?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Reddit\"><img alt=\"Reddit\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/reddit.png\" width=\"16\" /></a> <a class=\"a2a_button_twitter\" href=\"http://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Twitter\"><img alt=\"Twitter\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/twitter.png\" width=\"16\" /></a> <a class=\"a2a_button_google_reader\" href=\"http://www.addtoany.com/add_to/google_reader?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Google Reader\"><img alt=\"Google Reader\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/reader.png\" width=\"16\" /></a> <a class=\"a2a_button_delicious\" href=\"http://www.addtoany.com/add_to/delicious?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Delicious\"><img alt=\"Delicious\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/delicious.png\" width=\"16\" /></a> <a class=\"a2a_button_facebook\" href=\"http://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Facebook\"><img alt=\"Facebook\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/facebook.png\" width=\"16\" /></a> <a class=\"a2a_dd addtoany_share_save\" href=\"http://www.addtoany.com/share_save\"><img alt=\"Share\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/favicon.png\" width=\"16\" /></a> </p>" "http://www.masteringemacs.org/articles/2011/01/19/script-files-executable-automatically/" (19767 783) old 10 nil nil ((title ((type . "html") (xml:lang . "en")) "Mickey Petersen: Make script files executable automatically") (link ((href . "http://www.masteringemacs.org/articles/2011/01/19/script-files-executable-automatically/"))) (id nil "http://www.masteringemacs.org/?p=295") (updated nil "2011-01-19T15:28:15+00:00") (content ((type . "html") (xml:lang . "en")) "<p>You can force Emacs to make a file executable (respecting your <code>umask</code> settings) if Emacs considers it a script. To determine if it is a script, Emacs will look for the <em>hash-bang</em> notation in the file and treat it as a script if it finds it.</p>
<p>Add this to your .emacs and Emacs will then make the file executable if it is a script.</p>

<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span>add-hook 'after-save-hook
  'executable-make-buffer-file-executable-if-script-p<span style=\"color: #66cc66;\">)</span></pre></div></div>

<p><a class=\"a2a_button_reddit\" href=\"http://www.addtoany.com/add_to/reddit?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Reddit\"><img alt=\"Reddit\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/reddit.png\" width=\"16\" /></a> <a class=\"a2a_button_twitter\" href=\"http://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Twitter\"><img alt=\"Twitter\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/twitter.png\" width=\"16\" /></a> <a class=\"a2a_button_google_reader\" href=\"http://www.addtoany.com/add_to/google_reader?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Google Reader\"><img alt=\"Google Reader\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/reader.png\" width=\"16\" /></a> <a class=\"a2a_button_delicious\" href=\"http://www.addtoany.com/add_to/delicious?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Delicious\"><img alt=\"Delicious\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/delicious.png\" width=\"16\" /></a> <a class=\"a2a_button_facebook\" href=\"http://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F19%2Fscript-files-executable-automatically%2F&amp;linkname=Make%20script%20files%20executable%20automatically\" rel=\"nofollow\" target=\"_blank\" title=\"Facebook\"><img alt=\"Facebook\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/facebook.png\" width=\"16\" /></a> <a class=\"a2a_dd addtoany_share_save\" href=\"http://www.addtoany.com/share_save\"><img alt=\"Share\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/favicon.png\" width=\"16\" /></a> </p>") (author nil (name nil "mickey") (uri nil "http://www.masteringemacs.org")) (source nil (title ((type . "html")) "Mastering Emacs") (subtitle ((type . "html")) "mastering the world's best text editor") (link ((rel . "self") (href . "http://www.masteringemacs.org/feed/"))) (id nil "http://www.masteringemacs.org")))) ("Ian Eure: Toggle between root &amp; non-root in Emacs with Tramp" "<p>I love that I can edit files on remote hosts right from the comfort of my local Emacs session. Even better, you can edit those same files as root, given <a href=\"http://www.gnu.org/software/emacs/manual/html_node/tramp/Multi_002dhops.html\">the proper configuration.</a></p>
<p>Unfortunately, the interface for this is a bit fiddly. I find myself taking one of two approaches:</p>
<ol>
<li>Open a file as non-root, then hit <code>C-x C-v</code> and edit the filename to use <code>/sudo:root@…</code>.</li>
<li>Hit <code>C-x C-f</code>, edit the directory to use <code>/sudo:root@…</code>, then open the file I want.</li>
</ol>
<p>Since I didn’t like either of these, I wrote two functions to assist:</p>
<ul>
<li><code>find-file-as-root</code> behaves as <code>find-file</code>, except the default shown is changed to be <code>/sudo:root@…</code></li>
<li><code>toggle-alternate-file-as-root</code> is similar to <code>toggle-read-only</code> (<code>C-x C-q</code>), in that it will swap back and forth between the unprivileged version of a file and the as-root version.</li>
</ul>
<p></p>
<p>I bind these to <code>C-c C-x C-q</code> and <code>C-c x f</code>, respectively.</p>
<p>There are two caveats. The first is that you must have <code>tramp-default-proxies-alist</code> configured for the <code>sudo</code> method to work on remote hosts. The second is that it is impossible to know for sure what the previous file name was after invoking <code>toggle-alternate-file-as-root</code>. Any buffer-local values are lost after replacing the buffer with the sudo version, and if I used a persistent structure outside of the buffer, it would require more complexity to prevent it from going stale. So instead, it just make a best effort to come up with something reasonable. Edge cases are going to fail, such as when you are editing a file as another non-root user. Patches are welcomed.</p>" "http://atomized.org/2011/01/toggle-between-root-non-root-in-emacs-with-tramp/" (19766 23031) old 11 nil nil ((title ((type . "html") (xml:lang . "en")) "Ian Eure: Toggle between root &amp; non-root in Emacs with Tramp") (link ((href . "http://atomized.org/2011/01/toggle-between-root-non-root-in-emacs-with-tramp/"))) (id nil "http://atomized.org/?p=794") (updated nil "2011-01-19T03:26:47+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I love that I can edit files on remote hosts right from the comfort of my local Emacs session. Even better, you can edit those same files as root, given <a href=\"http://www.gnu.org/software/emacs/manual/html_node/tramp/Multi_002dhops.html\">the proper configuration.</a></p>
<p>Unfortunately, the interface for this is a bit fiddly. I find myself taking one of two approaches:</p>
<ol>
<li>Open a file as non-root, then hit <code>C-x C-v</code> and edit the filename to use <code>/sudo:root@…</code>.</li>
<li>Hit <code>C-x C-f</code>, edit the directory to use <code>/sudo:root@…</code>, then open the file I want.</li>
</ol>
<p>Since I didn’t like either of these, I wrote two functions to assist:</p>
<ul>
<li><code>find-file-as-root</code> behaves as <code>find-file</code>, except the default shown is changed to be <code>/sudo:root@…</code></li>
<li><code>toggle-alternate-file-as-root</code> is similar to <code>toggle-read-only</code> (<code>C-x C-q</code>), in that it will swap back and forth between the unprivileged version of a file and the as-root version.</li>
</ul>
<p></p>
<p>I bind these to <code>C-c C-x C-q</code> and <code>C-c x f</code>, respectively.</p>
<p>There are two caveats. The first is that you must have <code>tramp-default-proxies-alist</code> configured for the <code>sudo</code> method to work on remote hosts. The second is that it is impossible to know for sure what the previous file name was after invoking <code>toggle-alternate-file-as-root</code>. Any buffer-local values are lost after replacing the buffer with the sudo version, and if I used a persistent structure outside of the buffer, it would require more complexity to prevent it from going stale. So instead, it just make a best effort to come up with something reasonable. Edge cases are going to fail, such as when you are editing a file as another non-root user. Patches are welcomed.</p>") (author nil (name nil "Ian") (uri nil "http://atomized.org")) (source nil (title ((type . "html")) "Atomized » emacs") (subtitle ((type . "html")) "Fragmenting reality.") (link ((rel . "self") (href . "http://atomized.org/tag/emacs/feed/"))) (id nil "http://atomized.org")))) ("Daniel Blanc: Blogging with emacs, org-mode and wordpress" "<p>I want to be able to seemlessly publish from emacs to wordpress. I’d like to create or update posts as an org-mode entry and then to publish them on this blog. </p>
<p> To achieve this I’ll need <a class=\"aga aga_3\" href=\"https://github.com/punchagan/org2blog\">org2blog/wp</a>, a lisp package that can export org entries to wordpress, org2blog depends on <a class=\"aga aga_4\" href=\"https://launchpad.net/xml-rpc-el\">xml-rpc-el</a>. </p>
<p> So first step is to get the software from the code repos: </p>
<pre class=\"example\">$ cd ~/.emacs.d/
$ bzr branch lp:xml-rpc-el
$ git clone https://github.com/punchagan/org2blog.git
</pre>
<p> Then add some lines in ~/.emacs.d/init.el: </p>
<pre class=\"src src-emacs-lisp\"><span class=\"linenr\"> 1:  </span>(add-to-list 'load-path <span style=\"color: #e9b96e;\">\"~/.emacs.d/xml-rpc-el\"</span>)
<span class=\"linenr\"> 2:  </span>(add-to-list 'load-path <span style=\"color: #e9b96e;\">\"~/.emacs.d/org2blog\"</span>)
<span class=\"linenr\"> 3:  </span>(<span style=\"color: #b4fa70;\">require</span> '<span style=\"color: #e6a8df;\">org2blog</span>)
<span class=\"linenr\"> 4:  </span>
<span class=\"linenr\"> 5:  </span>(setq org2blog/wp-blog-alist
<span class=\"linenr\"> 6:  </span>  '((<span style=\"color: #e9b96e;\">\"42kettles\"</span>
<span class=\"linenr\"> 7:  </span>    <span style=\"color: #ad7fa8;\">:url</span> <span style=\"color: #e9b96e;\">\"http://42kettles.net/xmlrpc.php\"</span>
<span class=\"linenr\"> 8:  </span>    <span style=\"color: #ad7fa8;\">:username</span> <span style=\"color: #e9b96e;\">\"xxxx\"</span>
<span class=\"linenr\"> 9:  </span>    <span style=\"color: #ad7fa8;\">:tags-as-categories</span> nil)))
<span class=\"linenr\">10:  </span>
<span class=\"linenr\">11:  </span>(setq org2blog/wp-track-posts nil)
</pre>
<p> Then try to login just to be sure that everything is working smoothly: </p>
<pre class=\"example\">M-x org2blog/wp-login
</pre>
<p> If it doesn’t work, check that xml-rpc is enabled in wordpress’s writing settings. </p>
<p> Now to post or update an article all I have to do is to go to the org-mode entry I want to publish and do: </p>
<pre class=\"example\">M-x org2blog/wp-post-subtree
</pre>
<p> And that’s it ! </p>
<p> Small tweaks I need to do: </p>
<ul>
<li> by default the entry is posted as a draft, I’ve yet to find how to publish it. </li>
<li> define settings for syntax highlighting </li>
<li> define settings for categories/tags and org file structure (test tag inheritance). </li>
</ul>
<p> I’m all for ATOM so as wordpress support it, I may give a try to <a class=\"aga aga_5\" href=\"http://www.emacswiki.org/emacs/Org2BlogAtom\">org2blog/atom</a>. </p>" "http://42kettles.net/?p=29" (19765 58989) old 12 nil nil ((title ((type . "html") (xml:lang . "en")) "Daniel Blanc: Blogging with emacs, org-mode and wordpress") (link ((href . "http://42kettles.net/?p=29"))) (id nil "http://42kettles.net/?p=29") (updated nil "2011-01-18T19:13:49+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I want to be able to seemlessly publish from emacs to wordpress. I’d like to create or update posts as an org-mode entry and then to publish them on this blog. </p>
<p> To achieve this I’ll need <a class=\"aga aga_3\" href=\"https://github.com/punchagan/org2blog\">org2blog/wp</a>, a lisp package that can export org entries to wordpress, org2blog depends on <a class=\"aga aga_4\" href=\"https://launchpad.net/xml-rpc-el\">xml-rpc-el</a>. </p>
<p> So first step is to get the software from the code repos: </p>
<pre class=\"example\">$ cd ~/.emacs.d/
$ bzr branch lp:xml-rpc-el
$ git clone https://github.com/punchagan/org2blog.git
</pre>
<p> Then add some lines in ~/.emacs.d/init.el: </p>
<pre class=\"src src-emacs-lisp\"><span class=\"linenr\"> 1:  </span>(add-to-list 'load-path <span style=\"color: #e9b96e;\">\"~/.emacs.d/xml-rpc-el\"</span>)
<span class=\"linenr\"> 2:  </span>(add-to-list 'load-path <span style=\"color: #e9b96e;\">\"~/.emacs.d/org2blog\"</span>)
<span class=\"linenr\"> 3:  </span>(<span style=\"color: #b4fa70;\">require</span> '<span style=\"color: #e6a8df;\">org2blog</span>)
<span class=\"linenr\"> 4:  </span>
<span class=\"linenr\"> 5:  </span>(setq org2blog/wp-blog-alist
<span class=\"linenr\"> 6:  </span>  '((<span style=\"color: #e9b96e;\">\"42kettles\"</span>
<span class=\"linenr\"> 7:  </span>    <span style=\"color: #ad7fa8;\">:url</span> <span style=\"color: #e9b96e;\">\"http://42kettles.net/xmlrpc.php\"</span>
<span class=\"linenr\"> 8:  </span>    <span style=\"color: #ad7fa8;\">:username</span> <span style=\"color: #e9b96e;\">\"xxxx\"</span>
<span class=\"linenr\"> 9:  </span>    <span style=\"color: #ad7fa8;\">:tags-as-categories</span> nil)))
<span class=\"linenr\">10:  </span>
<span class=\"linenr\">11:  </span>(setq org2blog/wp-track-posts nil)
</pre>
<p> Then try to login just to be sure that everything is working smoothly: </p>
<pre class=\"example\">M-x org2blog/wp-login
</pre>
<p> If it doesn’t work, check that xml-rpc is enabled in wordpress’s writing settings. </p>
<p> Now to post or update an article all I have to do is to go to the org-mode entry I want to publish and do: </p>
<pre class=\"example\">M-x org2blog/wp-post-subtree
</pre>
<p> And that’s it ! </p>
<p> Small tweaks I need to do: </p>
<ul>
<li> by default the entry is posted as a draft, I’ve yet to find how to publish it. </li>
<li> define settings for syntax highlighting </li>
<li> define settings for categories/tags and org file structure (test tag inheritance). </li>
</ul>
<p> I’m all for ATOM so as wordpress support it, I may give a try to <a class=\"aga aga_5\" href=\"http://www.emacswiki.org/emacs/Org2BlogAtom\">org2blog/atom</a>. </p>") (author nil (name nil "dabl") (uri nil "http://42kettles.net")) (source nil (title ((type . "html")) "42 kettles » emacs") (subtitle ((type . "html")) "Don't panic !") (link ((rel . "self") (href . "http://42kettles.net/?cat=6&feed=atom"))) (id nil "http://42kettles.net/?feed=atom")))) ("Chris Ball: MIT Mystery Hunt 2011" "Well, that was unexpected — the <a href=\"http://en.wikipedia.org/wiki/MIT_Mystery_Hunt\">Mystery Hunt</a> team I've hunted with for the past three years, Codex, won the hunt this year!  It's the team's tenth year of competing and our first win.  Congrats to everyone!  Here's a <a href=\"http://www.boston.com/news/local/massachusetts/articles/2011/01/17/at_mit_mystery_hunt_teams_labor_to_solve_elaborate_puzzles/\">Boston Globe</a> article about the whole thing.
<p></p><p>
The hunt organizers did a beautiful job putting together the hunt (it took an estimated 20,000 person-hours), and the laser-etched \"coin\" we won the hunt by finding at 6am on Sunday morning was a reflection of how much effort had gone into the hunt in general:
</p><p>
</p><div align=\"center\">
<a href=\"http://www.flickr.com/photos/16838219@N00/5364190449/\"> <img alt=\"The coin!\" src=\"http://chris.printf.net/2011-coin.jpg\" /></a>
<br /><i>The coin!</i>
</div>
<p></p><p>
Of course, this means that now it's our turn to write the hunt — as <a href=\"http://cananian.livejournal.com/61919.html\">Scott</a> says, our free time for the next year has just vanished.  It'll be fun, though; it's always sad when the hunt ends and you realize you aren't going to get to hang out with the awesome people you just spent a sleepless weekend solving puzzles with until next year, but having to meet up regularly to write and test the puzzles for next year will fix that.  We've got a very high bar to live up to, and a thirty-year-old tradition to keep alive.
</p><p></p><p>
(Oh, yeah, geekiest moment of the hunt: one of the puzzles  — <a href=\"http://ihavetofindpeach.com/puzzles/mega_man/redundant_obsolescence/answer/\">Redundant Obsolescence</a> — involved plugging an Iomega Zip drive into my desktop PC via parallel port and reading files back off it, in Linux.  I couldn't believe it worked.)
</p><p></p><p>
While I'm here and blogging, here's a guitar video I recorded over Christmas.  I'm happy I finally got to record a Kaki King piece.
</p><div align=\"center\">
<br />
<i>Kaki King - Goby (<a href=\"http://www.youtube.com/watch?v=5MTiXDunjEU&amp;hd=1\">youtube</a>, <a href=\"http://chris.printf.net/goby.ogv\">download in Ogg Theora</a>)
</i>
</div>" "http://blog.printf.net/articles/2011/01/18/mit-mystery-hunt-2011" (19765 58220) old 13 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Chris Ball: MIT Mystery Hunt 2011") (link ((href . "http://blog.printf.net/articles/2011/01/18/mit-mystery-hunt-2011"))) (id nil "urn:uuid:52add30e-85a2-418e-bb19-bd2cbc2bf6d5") (updated nil "2011-01-18T19:01:00+00:00") (content ((type . "html")) "Well, that was unexpected — the <a href=\"http://en.wikipedia.org/wiki/MIT_Mystery_Hunt\">Mystery Hunt</a> team I've hunted with for the past three years, Codex, won the hunt this year!  It's the team's tenth year of competing and our first win.  Congrats to everyone!  Here's a <a href=\"http://www.boston.com/news/local/massachusetts/articles/2011/01/17/at_mit_mystery_hunt_teams_labor_to_solve_elaborate_puzzles/\">Boston Globe</a> article about the whole thing.
<p></p><p>
The hunt organizers did a beautiful job putting together the hunt (it took an estimated 20,000 person-hours), and the laser-etched \"coin\" we won the hunt by finding at 6am on Sunday morning was a reflection of how much effort had gone into the hunt in general:
</p><p>
</p><div align=\"center\">
 <a href=\"http://www.flickr.com/photos/16838219@N00/5364190449/\"> <img alt=\"The coin!\" src=\"http://chris.printf.net/2011-coin.jpg\" /></a>
 <br /><i>The coin!</i>
</div>
<p></p><p>
Of course, this means that now it's our turn to write the hunt — as <a href=\"http://cananian.livejournal.com/61919.html\">Scott</a> says, our free time for the next year has just vanished.  It'll be fun, though; it's always sad when the hunt ends and you realize you aren't going to get to hang out with the awesome people you just spent a sleepless weekend solving puzzles with until next year, but having to meet up regularly to write and test the puzzles for next year will fix that.  We've got a very high bar to live up to, and a thirty-year-old tradition to keep alive.
</p><p></p><p>
(Oh, yeah, geekiest moment of the hunt: one of the puzzles  — <a href=\"http://ihavetofindpeach.com/puzzles/mega_man/redundant_obsolescence/answer/\">Redundant Obsolescence</a> — involved plugging an Iomega Zip drive into my desktop PC via parallel port and reading files back off it, in Linux.  I couldn't believe it worked.)
</p><p></p><p>

While I'm here and blogging, here's a guitar video I recorded over Christmas.  I'm happy I finally got to record a Kaki King piece.

</p><div align=\"center\">
 
<br />
 <i>Kaki King - Goby (<a href=\"http://www.youtube.com/watch?v=5MTiXDunjEU&amp;hd=1\">youtube</a>, <a href=\"http://chris.printf.net/goby.ogv\">download in Ogg Theora</a>)
 </i> 
</div>") (author nil (name nil "Chris Ball") (uri nil "http://blog.printf.net")) (source nil (title ((type . "html")) "Chris Ball") (link ((rel . "self") (href . "http://blog.printf.net/xml/rss20/feed.xml"))) (id nil "http://blog.printf.net")))) ("Got Emacs?: emacs-23.2.92 pretest binaries available" "<div><a href=\"http://permalink.gmane.org/gmane.emacs.devel/134608\" target=\"_blank\">New Emacs pretest binaries</a> for windows are available <a href=\"http://alpha.gnu.org/gnu/emacs/pretest/windows/\" target=\"_blank\">here</a>.<br /></div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-1038695036045328126?l=emacsworld.blogspot.com\" width=\"1\" /></div>
<p><a href=\"http://feedads.g.doubleclick.net/~a/cG3ULTGuFzqb3Vwg44eRbhx0zag/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/cG3ULTGuFzqb3Vwg44eRbhx0zag/0/di\" /></a><br />
<a href=\"http://feedads.g.doubleclick.net/~a/cG3ULTGuFzqb3Vwg44eRbhx0zag/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/cG3ULTGuFzqb3Vwg44eRbhx0zag/1/di\" /></a></p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/7TJXLNYZ03g\" width=\"1\" />" "http://feedproxy.google.com/~r/GotEmacs/~3/7TJXLNYZ03g/emacs-23292-pretest-binaries-available.html" (19763 43364) old 14 nil nil ((title ((type . "html")) "Got Emacs?: emacs-23.2.92 pretest binaries available") (link ((href . "http://feedproxy.google.com/~r/GotEmacs/~3/7TJXLNYZ03g/emacs-23292-pretest-binaries-available.html"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420.post-1038695036045328126") (updated nil "2011-01-17T02:28:52+00:00") (content ((type . "html")) "<div><a href=\"http://permalink.gmane.org/gmane.emacs.devel/134608\" target=\"_blank\">New Emacs pretest binaries</a> for windows are available <a href=\"http://alpha.gnu.org/gnu/emacs/pretest/windows/\" target=\"_blank\">here</a>.<br /></div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-1038695036045328126?l=emacsworld.blogspot.com\" width=\"1\" /></div>
<p><a href=\"http://feedads.g.doubleclick.net/~a/cG3ULTGuFzqb3Vwg44eRbhx0zag/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/cG3ULTGuFzqb3Vwg44eRbhx0zag/0/di\" /></a><br />
<a href=\"http://feedads.g.doubleclick.net/~a/cG3ULTGuFzqb3Vwg44eRbhx0zag/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/cG3ULTGuFzqb3Vwg44eRbhx0zag/1/di\" /></a></p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/7TJXLNYZ03g\" width=\"1\" />") (author nil (name nil "sivaram") (email nil "noreply@blogger.com") (uri nil "http://emacsworld.blogspot.com/")) (source nil (title ((type . "html")) "Got Emacs?") (subtitle ((type . "html")) "Postings on living in an Emacs world.  Posts will be mostly on using Emacs, related functions and tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/GotEmacs"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420")))) ("sachachua: Emacs 24 and the package manager" "<p>By default, the Emacs 24 package manager (<code>M-x package-list-packages</code>) points to a small repository of Emacs packages. Want more? <a href=\"http://technomancy.us/144\">Phil Hagelberg</a> added support for multiple repositories to package.el. There’s the original ELPA at <a href=\"http://tromey.com/elpa\">http://tromey.com/elpa</a>, and there’s a community package source called Marmalade that anyone can upload packages to. Add this to your <code>~/.emacs</code> and evaluate it: </p>
<pre class=\"src src-emacs-lisp\"><span style=\"color: #ff7f24;\">;; </span><span style=\"color: #ff7f24;\">Add the original Emacs Lisp Package Archive
</span>(add-to-list 'package-archives
'(<span style=\"color: #ffa07a;\">\"elpa\"</span> . <span style=\"color: #ffa07a;\">\"http://tromey.com/elpa/\"</span>))
<span style=\"color: #ff7f24;\">;; </span><span style=\"color: #ff7f24;\">Add the user-contributed repository
</span>(add-to-list 'package-archives
'(<span style=\"color: #ffa07a;\">\"marmalade\"</span> . <span style=\"color: #ffa07a;\">\"http://marmalade-repo.org/packages/\"</span>))
</pre>
<p> You should then be able to call <code>M-x package-list-packages</code> to browse and install Emacs packages. </p>
<p> If you don’t have <a href=\"http://sachachua.com/blog/2010/12/whats-new-in-emacs-24/\">Emacs 24</a> yet (and you might want to wait for the official release if you use things like BBDB), Phil suggests downloading <a href=\"http://bit.ly/pkg-el\">package.el</a> from the Emacs development tree. This version includes support for multiple repositories. </p>
<p> For even more Emacs goodness outside the package system, check out <a href=\"https://github.com/emacsmirror\">the Emacs mirror</a>, which lists more than 2,900 packages available through Git.  </p>
<p> Thanks to: </p>
<ul>
<li> <a href=\"http://technomancy.us/144\">Phil Hagelberg for the post about ELPA</a> </li>
<li> <a href=\"http://blog.emacsmirror.org/announcing-the-emacsmirror\">Jonas Bernoulli for the post about emacsmirror</a> </li>
</ul>
<p> <span class=\"timestamp-wrapper\"> <span class=\"timestamp\">2011-01-15 Sat 10:31</span></span> </p>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2011/01/emacs-24-package-manager/\">Emacs 24 and the package manager</a> (Sacha Chua's blog)</p>" "http://sachachua.com/blog/2011/01/emacs-24-package-manager/" (19761 50304) old 15 nil nil ((title ((type . "html") (xml:lang . "en")) "sachachua: Emacs 24 and the package manager") (link ((href . "http://sachachua.com/blog/2011/01/emacs-24-package-manager/"))) (id nil "http://sachachua.com/blog/?p=22045") (updated nil "2011-01-15T16:00:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p>By default, the Emacs 24 package manager (<code>M-x package-list-packages</code>) points to a small repository of Emacs packages. Want more? <a href=\"http://technomancy.us/144\">Phil Hagelberg</a> added support for multiple repositories to package.el. There’s the original ELPA at <a href=\"http://tromey.com/elpa\">http://tromey.com/elpa</a>, and there’s a community package source called Marmalade that anyone can upload packages to. Add this to your <code>~/.emacs</code> and evaluate it: </p>
<pre class=\"src src-emacs-lisp\"><span style=\"color: #ff7f24;\">;; </span><span style=\"color: #ff7f24;\">Add the original Emacs Lisp Package Archive
</span>(add-to-list 'package-archives
             '(<span style=\"color: #ffa07a;\">\"elpa\"</span> . <span style=\"color: #ffa07a;\">\"http://tromey.com/elpa/\"</span>))
<span style=\"color: #ff7f24;\">;; </span><span style=\"color: #ff7f24;\">Add the user-contributed repository
</span>(add-to-list 'package-archives
             '(<span style=\"color: #ffa07a;\">\"marmalade\"</span> . <span style=\"color: #ffa07a;\">\"http://marmalade-repo.org/packages/\"</span>))
</pre>
<p> You should then be able to call <code>M-x package-list-packages</code> to browse and install Emacs packages. </p>
<p> If you don’t have <a href=\"http://sachachua.com/blog/2010/12/whats-new-in-emacs-24/\">Emacs 24</a> yet (and you might want to wait for the official release if you use things like BBDB), Phil suggests downloading <a href=\"http://bit.ly/pkg-el\">package.el</a> from the Emacs development tree. This version includes support for multiple repositories. </p>
<p> For even more Emacs goodness outside the package system, check out <a href=\"https://github.com/emacsmirror\">the Emacs mirror</a>, which lists more than 2,900 packages available through Git.  </p>
<p> Thanks to: </p>
<ul>
<li> <a href=\"http://technomancy.us/144\">Phil Hagelberg for the post about ELPA</a> </li>
<li> <a href=\"http://blog.emacsmirror.org/announcing-the-emacsmirror\">Jonas Bernoulli for the post about emacsmirror</a> </li>
</ul>
<p> <span class=\"timestamp-wrapper\"> <span class=\"timestamp\">2011-01-15 Sat 10:31</span></span> </p>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2011/01/emacs-24-package-manager/\">Emacs 24 and the package manager</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog")))) ("Mickey Petersen: Effective Editing I: Movement" "<p>If you can master movement and editing in Emacs, you have effectively conquered two of the biggest productivity boosters available to you. Emacs has unrivaled movement and editing capabilities and aside from enabling Ido Mode, few other things in Emacs will, pound-for-pound, give you a bigger productivity boost.</p>
<p><span id=\"more-266\"></span></p>
<h2>Overview</h2>
<p>Emacs has grown organically — some might say uncontrollably like kudzu — over its more than 30 year history, and in that time it has been honed and sharpened as a tool for effective text and source code editing. I’ve met lots of IDE users who use the mouse to edit text or access menu options, even though — and they realize this — it is very ineffective. But old habits die hard, and when your IDE’s most advanced text editing capability is a poorly-emulated <em>Brief</em> mode it’s no wonder people can’t be bothered.</p>
<p>The best way to maximize your productivity is to eliminate common bottlenecks like learning how to touch type and, of course, mastering Emacs. Editing text effectively can take a while to learn, as there are many specialized tools available to you to make your life easier. I’ve been using Emacs for a long time and I still learn new ways of doing things faster; but ultimately it is tenacity and persistence that will pay off in the long run.</p>
<p>Included in this series will be code snippets, suggestions for rebinding keys and other tips and tricks I’ve picked up over the years. You may not want to use all of them — which is fine — but I will try to highlight the importance of switching or changing something to give you an idea of how much of an improvement it is.</p>
<h2>Command Arguments</h2>
<h3>Universal Argument</h3>
<p>This concept deserves a mention as it will invoke an extended, and typically more complex, version of a command <em>or</em> it will default to the numeric argument <code>4</code>, meaning it essentially does the same as though you had typed <code>C-u 4</code>. The <em>universal argument</em> (also known as <em>prefix argument</em>) is multiplicative when invoked repeatedly.</p>
<h3>Numeric Argument</h3>
<p>The <em>numeric argument</em> is so called because it lets you pass a numeric constant to a command. What the number is for used for depends entirely on the command you use it on. For <code>C-p</code> it moves up <em>n</em> lines, for other commands it does nothing. It all depends. Most commands do what you would expect.</p>
<p>Because numeric arguments are so useful they are bound to a multitude of keys: <code>M-0</code> to <code>M-9</code>; <code>C-0</code> to <code>C-9</code>; <code>C-M-0</code> to <code>C-M-9</code> and <code>C-u &lt;num&gt;</code>.</p>
<p>By duplicating the same command multiple times, you don’t have to move your fingers to execute a command that uses <code>C-</code>, <code>M-</code> or <code>C-M-</code>. So to run the command <code>forward-word</code>, bound to <code>M-f</code>, 10 times you’d type <code>M-1 M-0 M-f</code>.</p>
<p>Simple things like duplicate keybindings cut down on finger-straining typing and it increases the likelihood of people actually <em>using</em> numeric arguments in the first place. Odd or hard to reach keys are used less — empirically, it is not a difficult conclusion to reach.</p>
<h3>Negative Argument</h3>
<p>When used with the numeric argument, the <em>negative argument</em> inverts the operation the command would otherwise carry out.</p>
<p>Like numeric arguments, the negative argument is bound to multiple keys to minimize unnecessary finger movement. It is bound to <code>M--</code> (that’s meta followed by a dash); <code>C--</code>; and <code>C-M--</code>.</p>
<p>Negative arguments are very useful, for they can let you operate on words, lines or phrases you have just finished typing. If you want to capitalize the last word you just typed, type <code>M-- M-c</code>. Not all commands have an inverse, or they do unexpected things — particularly if it is a third-party command — but almost all the keys I’ll be talking about in this series will work with a negative argument.</p>
<h2>Basic Movement</h2>
<p>If you’re an experienced Emacs user, all of this should be muscle memory by now, but I have to start somewhere and the beginning is the best place.</p>
<p>Emacs does support the navigation keys (arrow keys and pg up/down and so on) but it’s better to learn the real Emacs keys. Every time you take your hand off the “home row” to use the navigation keys you are wasting time — time that adds up, considering how often you move around in code or text. A good Emacs hacker constantly moves and edits, and in rapid succession: it is folly to stop, start, stop, start every time you navigate the buffer.</p>
<h3>Fundamental Movement Keys</h3>
<p>The four fundamental movement keys are <code>C-n</code>, for next logical line; <code>C-p</code>, for previous logical line; <code>C-f</code> for move forward by character; and <code>C-b</code> for move backward by character.</p>
<p>I recommend adding this to your .emacs, as it makes <code>C-n</code> insert newlines if the point is at the end of the buffer. Useful, as it means you won’t have to reach for the return key to add newlines!</p>
<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">setq</span> next-line-add-newlines t<span style=\"color: #66cc66;\">)</span></pre></div></div>
<p>The move to beginning and end of line commands bear mentioning as well, as they are also a crucial part of movement. To move to the beginning of a line, type <code>C-a</code>; to move to the end, type <code>C-e</code>.</p>
<h2>Extended Movement</h2>
<p>It is rarely efficient to use the fundamental movement keys if you are moving the point more than a few characters. It is at this stage that you will have to make a judgment call and decide what the <em>fastest</em> way of getting to where you are going is.</p>
<h3>Movement by Word</h3>
<p>The keybindings for movement by word in Emacs is almost the same as that of movement by character, but instead of the prefix <code>C-</code> it is <code>M-</code>. To move forward one word use <code>M-f</code>; and to move backward one word use <code>M-b</code>.</p>
<p>Movement by word will make up the bulk of your intra-line movement. It pays to understand why it works the way it does, and to understand that, you must know what a <em>word</em> is.</p>
<h4>Definition of a Word</h4>
<p>What a word is is governed by the <em>syntax table</em>, an altogether fascinating topic that deserves its own article at some point. But keeping it simple, the syntax table governs how Emacs treats almost every character — Unicode as well — and what its role is when a function like <code>forward-word</code> is run.</p>
<p>For most things — particularly source code — a word is almost always alphanumeric, possibly with a few other characters like underscore. It may seem counterintuitive to have a fluid definition for what a word is, but if you think about it, it makes perfect sense: what you consider a word when you’re writing text may not be the same as when you are writing code, and the definition of, say, a variable may also differ between languages.</p>
<h3>Movement by Paragraph, Sentence</h3>
<p>Movement in Emacs is not limited to just characters and words. If you are frequently writing text, the <code>forward/backward-paragraph</code> and <code>forward/backward-sentence</code> will come in handy. To move by sentence use the handy keybinds <code>M-e</code> and <code>M-a</code>. The paragraph keys are bound to the less-than-helpful <code>C-down/up</code> navigation keys.</p>
<p>What is considered a <em>paragraph</em> is governed by variables like <code>paragraph-start</code> and <code>paragraph-separate</code>. The same holds true for a <em>sentence</em>, but it uses <code>sentence-end</code> (a function <em>and</em> a variable) to determine what a sentence boundary is; the boundary is usually a full stop followed by one or two whitespaces.</p>
<h3>Scrolling</h3>
<p>You can also scroll by “page” (and what that means deserves its own article) with <code>C-v</code> to scroll down, and <code>M-v</code> to scroll up. I use the word <em>scroll</em> here because the concept of a <em>page</em> in Emacs is not what it is in other editors. But I doubt anybody cares if you refer to it as page up or down, something I often catch myself doing.</p>
<p>The command <code>C-M-v</code> also bears mention, as it scrolls the <em>other</em> window; what <em>other</em> is depends on how many split windows you have open (if you do) or frames (if you don’t). This key is very, very useful if you are reading documentation in another window or frame and you want to scroll it without the hassle of switching to that other window. Incidentally, there is only one command to scroll the other window, and that is the one I mentioned before; to scroll backwards, use the <em>negative argument</em> first.</p>
<h3>Move to Beginning/End of Buffer</h3>
<p>Use <code>M-&lt;</code> to move to the beginning of the buffer, and <code>M-&gt;</code> to move to the end. The buffer jump commands are useful for they leave the mark at the originating position, meaning you can jump back to where you came from with <code>C-u C-SPC</code>. I recommend <a href=\"http://www.masteringemacs.org/articles/2010/12/22/fixing-mark-commands-transient-mark-mode/\">reading my article on the mark commands</a> as it will show you how to make the mark commands more useful.</p>
<h2>Advanced Movement</h2>
<p>Advanced movement commands are meant to augment the basic commands I described above. What makes them advanced is that they require a bit more forethought before use as their functionality is <em>context-aware</em>. The movement keys described here are what makes Emacs stand out from most other editors; it is most important that you work the commands into your daily work-pattern as it will greatly speed up movement and, thus, editing.</p>
<h3>Movement by s-expression</h3>
<p>Moving by s-expression is a little misleading (unless you edit <em>Lisp</em> in which case the name is apt) as what it <em>really</em> means is <em>movement by balanced expression</em>. A balanced expression is, like moving by word, subject to the syntax table, but common examples are quotes (<code>' '</code>, <code>\" \"</code>) and brackets (<code>[ ]</code>, <code>( )</code>, <code>{ }</code>, <code>&lt; &gt;</code>).</p>
<p>Movement by s-expression is similar to movement by character and word, only the prefix is <code>C-M-</code>. So move forward is <code>C-M-f</code> and backward is <code>C-M-b</code>.</p>
<p>Moving by s-expression will take a bit of getting used to, but you will quickly find that it is a more effective means of navigating source code than by word or character. A lot of the things we do in development is deal with quoted strings; expressions in parentheses; and even regular text and code.  Ignoring quotes and parentheses, moving by s-exp is still useful for everyday navigation as <code>forward/backward-sexp</code> will treat a larger swath of characters as part of one \"unit\". So what that basically boils down to is that it is more <em>intelligent</em> in grouping the letters together into meaningful chunks for you to move around by. Use it for a while -- replace movement by word for a while if you have to to learn how to properly navigate by s-exp. You'll thank me for it. I promise. Really.</p>
<h3>Moving In and Out of Lists</h3>
<p>Like the commands to move <em>past</em> a balanced expression, Emacs also lets you move <em>into</em> one. The list commands were obviously meant, again, for Lisp-likes but they serve their purpose well in other languages.</p>
<p>To move into (down) a list type <code>C-M-d</code>; to move out (up) a list type <code>C-M-u</code>. When you move down Emacs will pick the nearest group of balanced parenthesis and move into those; if you wish to move into, say, a neighboring pair you must use...</p>
<p>If you get a scan error it is because you are in a position where Emacs cannot determine how to carry out what you are trying to do. </p>
<h3>Moving Forward and Backward in Lists</h3>
<p>Moving forward and backward are niche-level commands indeed, unless you write a lot of Lisp. They work in much the same manner as moving in and out of lists, although they move forward or backward to a neighboring pair of parentheses that share the same depth.</p>
<h2>ISearch</h2>
<p>Learn to move around the buffer with isearch (<code>C-s</code> or <code>C-r</code>; <code>C-M-s</code> for regexp-aware isearch); it's an incremental search engine in Emacs that looks as you type. It has myriad features (type <code>C-s</code> followed by <code>C-h C-h</code> to see them all) but the most important ones in isearch mode are <code>C-w</code> (to add the word after point to); <code>M-y</code> to yank the text; <code>C-r</code> to reverse the search direction; <code>M-c</code> to toggle case sensitivity folding and <code>M-n</code>/<code>&lt;-p</code> to go through the history of past searches.</p>
<p>Isearch is a superfast way to get around in the code, and if you are often looking for words in source code, I would recommend the ever-useful <code>isearch-forward-word</code> (<code>M-s w</code>) to \"fuzzy-find\" matches in the code. It cleverly ignores things like punctuation as it looks for <em>whole words</em> instead. Super-duper Useful.</p>
<p>Oh, one more tip: if you type <code>C-s C-s</code> it will repeat the last searched query.</p>
<h2>Back to Indentation</h2>
<p>If you've ever typed <code>C-a M-f</code> or something to that effect to move the point past the whitespace on a line then good news! There's a better way. In Emacs the command <code>back-to-indentation</code> moves point to the beginning of the line and moves forward past all the indentation. The command is bound to the easy-to-reach key <code>M-m</code>.</p>
<h2>Registers / Bookmarks</h2>
<p>You can use Emacs registers (and the bookmark functionality) to store the location of the point. If you only care about transient storage (that gets lost on Emacs exit) you should use registers; should you desire something more permanent then perhaps bookmarks are what you want. Bookmarks and registers both introduce a myriad features that I'll introduce in a later article, but the commands that affect movement are <code>C-x r SPC</code> to store point in a register and <code>C-x r j</code> to jump to a point stored in a register.</p>
<p>The bookmark functionality in Emacs is very flexible and lets you do much more than simply storing and retrieving a point location. To use the bookmark functionality to store, retrieve and list bookmarks type <code>C-x r m</code> to save a named bookmark; type <code>C-x r b</code> to jump to a named bookmark; and <code>C-x r l</code> to list all bookmarks.</p>
<h2>The Mark</h2>
<p>The mark commands in Emacs are used to not only define one part of a region (the other being the point) but they are also used as a form of <em>transient beacon</em> that you can recall the point to. This functionality is very useful, as there are several movement commands in Emacs that set the mark, like moving to the beginning or end of a buffer, say.</p>
<p>My <a href=\"http://www.masteringemacs.org/articles/2010/12/22/fixing-mark-commands-transient-mark-mode/\">article on the mark commands</a> will tell you how to optimize the use of the mark commands if you use transient mark mode, as sometimes <em>tmm</em> will get in the way of using the mark as a <em>transient beacon</em>, and not just as a boundary for the region.</p>
<p>The commands that most interest you as far as movement is concerned is <code>C-x C-x</code> to toggle between the point and the mark in the buffer. If you yank text, you can exchange the point and mark to jump between the beginning and end of the yanked text.</p>
<p>Another useful command is the command to jump to the head of the mark ring (subsequent calls will cycle through the other marks in the buffer's mark ring) and that command is <code>C-u C-SPC</code>. It bears mention that my aforementioned article suggests binding this useful command to <code>M-`</code>.</p>
<p>Jumping to the mark is useful, but explicitly setting it is just as useful, and this is where <em>tmm</em> can get in the way: the command to set the mark is <code>C-SPC</code> (note that there is no universal argument here) but that will also activate the region -- very annoying. Again, my article above has custom code that will set the mark but not activate the region.</p>
<p>The mark is invisible by default, but I use a cool module called <em>visiblemark.el</em> that makes, well, <a href=\"http://www.emacswiki.org/emacs/VisibleMark\">the mark visible</a>.</p>
<h2>Repositioning Point</h2>
<p>You can move the point between the top, center and bottom (by default) of the visible window but without actually scrolling up or down. The command is sometimes useful if you want to reach text in one of the previous three areas, although you can configure the variable <code>recenter-positions</code> to change that. The command is bound to <code>M-r</code> which makes it very easy to reach and thus use.</p>
<h2>Imenu</h2>
<p>Imenu is a useful and extensible tool in Emacs that lets you jump to key areas of your buffer, most usually functions definitions in source code. Unfortunately, the imenu is marred somewhat by no default key binding (<code>M-x imenu</code> to invoke) making it less known than it should be; another negative is that it uses the standard completion mechanism which is terrible for quickly navigating by \"feel\".</p>
<p>I use <a href=\"http://www.emacswiki.org/emacs/ImenuMode#toc10\">a super-charged ido version of imenu</a> and bind it to the <code>M-i</code> key:</p>
<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">(</span>kbd <span style=\"color: #0000ff;\">\"M-i\"</span><span style=\"color: #66cc66;\">)</span> 'ido-goto-<span style=\"color: #483D8B;\">symbol</span><span style=\"color: #66cc66;\">)</span></pre></div></div>
<h2>TAGS</h2>
<p>TAGS is ancient technology that uses an external tool called <em>ctags</em> or <em>etags</em> to index function signatures from source files into one big flat file. Emacs has excellent support for TAGS (but again lacks the fuzziness ido provides, unless you write some elisp) but TAGS was never meant for modern object-oriented languages as it struggles with the hierarchical nature of the code; another big problem is that TAGS is unbearably slow on large codebases, making it unusable in single-threaded Emacs.</p>
<p>The two bread-and-butter TAGS commands to find stuff are bound to <code>M-,</code> and <code>M-.</code> (use <code>M-*</code> to jump back); there is also an Emacs-style <em>apropos</em> command called <code>M-x tags-apropos</code> for wildcard search.</p>
<p>If you use my code below, you can use <code>C-.</code> to find by file in the TAGS file, like a poor man's IDE-style project file.</p>
<p>I don't remember if I wrote the code below (or if I simply snarfed it from somewhere and modified it.)</p>
<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span>require 'etags<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> ido-find-tag <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #0000ff;\">\"Find a tag using ido\"</span>
<span style=\"color: #66cc66;\">(</span>interactive<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>tags-completion-table<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">let</span> <span style=\"color: #66cc66;\">(</span>tag-names<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">mapc</span> <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">lambda</span> <span style=\"color: #66cc66;\">(</span>x<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>unless <span style=\"color: #66cc66;\">(</span>integerp x<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>push <span style=\"color: #66cc66;\">(</span>prin1-to-string x t<span style=\"color: #66cc66;\">)</span> tag-names<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
tags-completion-table<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>find-tag <span style=\"color: #66cc66;\">(</span>ido-completing-read <span style=\"color: #0000ff;\">\"Tag: \"</span> tag-names<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> ido-find-file-in-tag-files <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>interactive<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>save-excursion
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">let</span> <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span>enable-recursive-minibuffers t<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>visit-tags-table-buffer<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>find-file
<span style=\"color: #66cc66;\">(</span>expand-file-<span style=\"color: #483D8B;\">name</span>
<span style=\"color: #66cc66;\">(</span>ido-completing-read
<span style=\"color: #0000ff;\">\"Project file: \"</span> <span style=\"color: #66cc66;\">(</span>tags-table-files<span style=\"color: #66cc66;\">)</span> <span style=\"color: #483D8B;\">nil</span> t<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">[</span>remap find-tag<span style=\"color: #66cc66;\">]</span> 'ido-find-tag<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">(</span>kbd <span style=\"color: #0000ff;\">\"C-.\"</span><span style=\"color: #66cc66;\">)</span> 'ido-find-file-in-tag-files<span style=\"color: #66cc66;\">)</span></pre></div></div>
<h2>Goal Column</h2>
<p>If you find yourself editing multiple lines in a row -- perhaps in a macro -- you may want to change the default column the point moves to when you change lines; naturally it will only do so if it is possible. This functionality is called <em>goal column</em> and it's bound to <code>C-x C-n</code> (<code>C-u C-x C-n</code> to disable).</p>
<h2>Subword Mode</h2>
<p>Editing code <code>WithCamelCaseWritingLikeThis</code> is frustrating in part because Emacs treats a camelcased identifier as a single word. The good news is, though, that Emacs has something called <code>subword-mode</code> (called <code>c-subword-mode</code> in earlier Emacsen) that rewires the movement and edit commands to work on CapitalizedWords.</p>
<h2>Smart Scan</h2>
<p>A long time ago I used an IDE feature that let you quickly search up or down for whatever identifier the point was on, and I decided I wanted something like it in Emacs so I wrote the code snippet you see below. Now, it's perfectly possible to do what it does with isearch but I use the code as it avoids the hassle of fidgeting with isearch to get the term under point into the search field.</p>
<p>In the code below the commands are bound to <code>M-p</code> and <code>M-n</code>.</p>
<p>Smart Scan's main advantage over isearch is that all you need to do is move the point to whatever identifier you wish to search for and then press <code>M-n</code> to find the next match in the buffer. The main use is not that you go \"looking\" for the identifier you wish to search for first: you are probably better off using isearch then; no, the main advantage is when you're already writing code -- or stepping through it with a debugger -- then smart scan will beat out isearch.</p>
<p>Smart Scan is also clever enough to ignore comments and strings containing the identifier you are looking for.</p>
<p>I'm contemplating cleaning it up a bit more and making it available as a package; for now though it'll remain a \"snippet\" here. Feel free to suggest changes here in the comments or by contacting me.</p>
<p>Paste this into your .emacs to add smart scan support.</p>
<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span>defvar smart-use-extended-syntax <span style=\"color: #483D8B;\">nil</span>
<span style=\"color: #0000ff;\">\"If t the smart symbol functionality will consider extended
syntax in finding matches, if such matches exist.\"</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>defvar smart-last-symbol-<span style=\"color: #483D8B;\">name</span> <span style=\"color: #0000ff;\">\"\"</span>
<span style=\"color: #0000ff;\">\"Contains the current symbol name.
 
This is only refreshed when `last-command' does not contain
either `smart-symbol-go-forward' or `smart-symbol-go-backward'\"</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>make-local-variable 'smart-use-extended-syntax<span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>defvar smart-symbol-old-pt <span style=\"color: #483D8B;\">nil</span>
<span style=\"color: #0000ff;\">\"Contains the location of the old point\"</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> smart-symbol-goto <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">name</span> direction<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #0000ff;\">\"Jumps to the next NAME in DIRECTION in the current buffer.
 
DIRECTION must be either `forward' or `backward'; no other option
is valid.\"</span>
 
<span style=\"color: #808080; font-style: italic;\">;; if `last-command' did not contain</span>
<span style=\"color: #808080; font-style: italic;\">;; `smart-symbol-go-forward/backward' then we assume it's a</span>
<span style=\"color: #808080; font-style: italic;\">;; brand-new command and we re-set the search term.</span>
<span style=\"color: #66cc66;\">(</span>unless <span style=\"color: #66cc66;\">(</span>memq last-command '<span style=\"color: #66cc66;\">(</span>smart-symbol-go-forward
smart-symbol-go-backward<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">setq</span> smart-last-symbol-<span style=\"color: #483D8B;\">name</span> <span style=\"color: #483D8B;\">name</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">setq</span> smart-symbol-old-pt <span style=\"color: #66cc66;\">(</span>point<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>message <span style=\"color: #66cc66;\">(</span>format <span style=\"color: #0000ff;\">\"%s scan for symbol <span style=\"color: #000099; font-weight: bold;\">\\\"</span>%s<span style=\"color: #000099; font-weight: bold;\">\\\"</span>\"</span>
<span style=\"color: #66cc66;\">(</span>capitalize <span style=\"color: #66cc66;\">(</span>symbol-<span style=\"color: #483D8B;\">name</span> direction<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
smart-last-symbol-<span style=\"color: #483D8B;\">name</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>unless <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">catch</span> 'done
<span style=\"color: #66cc66;\">(</span>while <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">funcall</span> <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">cond</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">eq</span> direction 'forward<span style=\"color: #66cc66;\">)</span> <span style=\"color: #808080; font-style: italic;\">; forward</span>
'search-forward<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">eq</span> direction 'backward<span style=\"color: #66cc66;\">)</span> <span style=\"color: #808080; font-style: italic;\">; backward</span>
'search-backward<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>t <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">error</span> <span style=\"color: #0000ff;\">\"Invalid direction\"</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span> <span style=\"color: #808080; font-style: italic;\">; all others</span>
smart-last-symbol-<span style=\"color: #483D8B;\">name</span> <span style=\"color: #483D8B;\">nil</span> t<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>unless <span style=\"color: #66cc66;\">(</span>memq <span style=\"color: #66cc66;\">(</span>syntax-ppss-context
<span style=\"color: #66cc66;\">(</span>syntax-ppss <span style=\"color: #66cc66;\">(</span>point<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span> '<span style=\"color: #66cc66;\">(</span>string comment<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">throw</span> 'done t<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>goto-char smart-symbol-old-pt<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> smart-symbol-go-forward <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #0000ff;\">\"Jumps forward to the next symbol at point\"</span>
<span style=\"color: #66cc66;\">(</span>interactive<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>smart-symbol-goto <span style=\"color: #66cc66;\">(</span>smart-symbol-at-pt 'end<span style=\"color: #66cc66;\">)</span> 'forward<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> smart-symbol-go-backward <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #0000ff;\">\"Jumps backward to the previous symbol at point\"</span>
<span style=\"color: #66cc66;\">(</span>interactive<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>smart-symbol-goto <span style=\"color: #66cc66;\">(</span>smart-symbol-at-pt 'beginning<span style=\"color: #66cc66;\">)</span> 'backward<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> smart-symbol-at-pt <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">&amp;</span>optional dir<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #0000ff;\">\"Returns the symbol at point and moves point to DIR (either `beginning' or `end') of the symbol.
 
If `smart-use-extended-syntax' is t then that symbol is returned
instead.\"</span>
<span style=\"color: #66cc66;\">(</span>with-syntax-table <span style=\"color: #66cc66;\">(</span>make-syntax-table<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">if</span> smart-use-extended-syntax
<span style=\"color: #66cc66;\">(</span>modify-syntax-entry ?<span style=\"color: #66cc66;\">.</span> <span style=\"color: #0000ff;\">\"w\"</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>modify-syntax-entry ?_ <span style=\"color: #0000ff;\">\"w\"</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>modify-syntax-entry ?- <span style=\"color: #0000ff;\">\"w\"</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #808080; font-style: italic;\">;; grab the word and return it</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">let</span> <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span>word <span style=\"color: #66cc66;\">(</span>thing-at-point 'word<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>bounds <span style=\"color: #66cc66;\">(</span>bounds-of-thing-at-point 'word<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">if</span> word
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">progn</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">cond</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">eq</span> dir 'beginning<span style=\"color: #66cc66;\">)</span> <span style=\"color: #66cc66;\">(</span>goto-char <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">car</span> bounds<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">eq</span> dir 'end<span style=\"color: #66cc66;\">)</span> <span style=\"color: #66cc66;\">(</span>goto-char <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">cdr</span> bounds<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>t <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">error</span> <span style=\"color: #0000ff;\">\"Invalid direction\"</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
word<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">error</span> <span style=\"color: #0000ff;\">\"No symbol found\"</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">(</span>kbd <span style=\"color: #0000ff;\">\"M-n\"</span><span style=\"color: #66cc66;\">)</span> 'smart-symbol-go-forward<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">(</span>kbd <span style=\"color: #0000ff;\">\"M-p\"</span><span style=\"color: #66cc66;\">)</span> 'smart-symbol-go-backward<span style=\"color: #66cc66;\">)</span></pre></div></div>
<h2>Goto Line</h2>
<p>Emacs does, of course, support jumping to a specific line, and it is bound to two commands: <code>M-g g</code> (that everybody seems to use), and the easier-to-type <code>M-g M-g</code>. The goto command is smart enough to default to whatever number point is on when the command is invoked, which will come in handy if you combine it with the command <code>C-u M-g M-g</code>, which executes <code>goto-line</code> in the <em>previous</em> buffer -- that is, the buffer you just came from. The use case is if you switch to a buffer -- say, a shell or output window -- and you want to jump to a line in the buffer you just came from.</p>
<p>One important thing to note when using <code>goto-line</code> is that, if the buffer is narrowed the goto line command still counts from the first line of the buffer, rather than the first line of the <em>narrowed</em> buffer.</p>
<h2>Next / Prev Error</h2>
<p>If you use the compile mode (compile mode is also used for things like <code>grep</code> and <code>occur</code>) in Emacs you will, for free, gain the ability to jump to the next/prev error in that compile buffer by invoking <code>M-g M-n</code> and <code>M-g M-p</code> for next and previous error, respectively.</p>
<h2>Beginning / End of Defun</h2>
<p>Despite the cryptic Lisp name for a function, the functions <code>beginning-of-defun</code> and <code>end-of-defun</code> works great with most programming modes in Emacs, by jumping to the beginning (duh) and end of the function/class definition point is contained in.</p>
<p>The commands are bound to <code>C-M-a</code> and <code>C-M-e</code> making them very easy to reach and use, and they will definitely make editing your code easier.</p>
<h2>Conclusion</h2>
<p>Emacs has a staggering array of commands that makes moving around your buffer much, much easier; of course it's easier said than done to learn all of them and make them part of your day-to-day life, but if you start slow and incorporate one command at a time then before long you will be speeding through text and code.</p>
<p><a class=\"a2a_button_reddit\" href=\"http://www.addtoany.com/add_to/reddit?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Reddit\"><img alt=\"Reddit\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/reddit.png\" width=\"16\" /></a> <a class=\"a2a_button_twitter\" href=\"http://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Twitter\"><img alt=\"Twitter\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/twitter.png\" width=\"16\" /></a> <a class=\"a2a_button_google_reader\" href=\"http://www.addtoany.com/add_to/google_reader?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Google Reader\"><img alt=\"Google Reader\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/reader.png\" width=\"16\" /></a> <a class=\"a2a_button_delicious\" href=\"http://www.addtoany.com/add_to/delicious?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Delicious\"><img alt=\"Delicious\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/delicious.png\" width=\"16\" /></a> <a class=\"a2a_button_facebook\" href=\"http://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Facebook\"><img alt=\"Facebook\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/facebook.png\" width=\"16\" /></a> <a class=\"a2a_dd addtoany_share_save\" href=\"http://www.addtoany.com/share_save\"><img alt=\"Share\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/favicon.png\" width=\"16\" /></a> </p>" "http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/" (19760 27792) old 16 nil nil ((title ((type . "html") (xml:lang . "en")) "Mickey Petersen: Effective Editing I: Movement") (link ((href . "http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/"))) (id nil "http://www.masteringemacs.org/?p=266") (updated nil "2011-01-14T15:32:32+00:00") (content ((type . "html") (xml:lang . "en")) "<p>If you can master movement and editing in Emacs, you have effectively conquered two of the biggest productivity boosters available to you. Emacs has unrivaled movement and editing capabilities and aside from enabling Ido Mode, few other things in Emacs will, pound-for-pound, give you a bigger productivity boost.</p>
<p><span id=\"more-266\"></span></p>
<h2>Overview</h2>
<p>Emacs has grown organically — some might say uncontrollably like kudzu — over its more than 30 year history, and in that time it has been honed and sharpened as a tool for effective text and source code editing. I’ve met lots of IDE users who use the mouse to edit text or access menu options, even though — and they realize this — it is very ineffective. But old habits die hard, and when your IDE’s most advanced text editing capability is a poorly-emulated <em>Brief</em> mode it’s no wonder people can’t be bothered.</p>
<p>The best way to maximize your productivity is to eliminate common bottlenecks like learning how to touch type and, of course, mastering Emacs. Editing text effectively can take a while to learn, as there are many specialized tools available to you to make your life easier. I’ve been using Emacs for a long time and I still learn new ways of doing things faster; but ultimately it is tenacity and persistence that will pay off in the long run.</p>
<p>Included in this series will be code snippets, suggestions for rebinding keys and other tips and tricks I’ve picked up over the years. You may not want to use all of them — which is fine — but I will try to highlight the importance of switching or changing something to give you an idea of how much of an improvement it is.</p>
<h2>Command Arguments</h2>
<h3>Universal Argument</h3>
<p>This concept deserves a mention as it will invoke an extended, and typically more complex, version of a command <em>or</em> it will default to the numeric argument <code>4</code>, meaning it essentially does the same as though you had typed <code>C-u 4</code>. The <em>universal argument</em> (also known as <em>prefix argument</em>) is multiplicative when invoked repeatedly.</p>
<h3>Numeric Argument</h3>
<p>The <em>numeric argument</em> is so called because it lets you pass a numeric constant to a command. What the number is for used for depends entirely on the command you use it on. For <code>C-p</code> it moves up <em>n</em> lines, for other commands it does nothing. It all depends. Most commands do what you would expect.</p>
<p>Because numeric arguments are so useful they are bound to a multitude of keys: <code>M-0</code> to <code>M-9</code>; <code>C-0</code> to <code>C-9</code>; <code>C-M-0</code> to <code>C-M-9</code> and <code>C-u &lt;num&gt;</code>.</p>
<p>By duplicating the same command multiple times, you don’t have to move your fingers to execute a command that uses <code>C-</code>, <code>M-</code> or <code>C-M-</code>. So to run the command <code>forward-word</code>, bound to <code>M-f</code>, 10 times you’d type <code>M-1 M-0 M-f</code>.</p>
<p>Simple things like duplicate keybindings cut down on finger-straining typing and it increases the likelihood of people actually <em>using</em> numeric arguments in the first place. Odd or hard to reach keys are used less — empirically, it is not a difficult conclusion to reach.</p>
<h3>Negative Argument</h3>
<p>When used with the numeric argument, the <em>negative argument</em> inverts the operation the command would otherwise carry out.</p>
<p>Like numeric arguments, the negative argument is bound to multiple keys to minimize unnecessary finger movement. It is bound to <code>M--</code> (that’s meta followed by a dash); <code>C--</code>; and <code>C-M--</code>.</p>
<p>Negative arguments are very useful, for they can let you operate on words, lines or phrases you have just finished typing. If you want to capitalize the last word you just typed, type <code>M-- M-c</code>. Not all commands have an inverse, or they do unexpected things — particularly if it is a third-party command — but almost all the keys I’ll be talking about in this series will work with a negative argument.</p>
<h2>Basic Movement</h2>
<p>If you’re an experienced Emacs user, all of this should be muscle memory by now, but I have to start somewhere and the beginning is the best place.</p>
<p>Emacs does support the navigation keys (arrow keys and pg up/down and so on) but it’s better to learn the real Emacs keys. Every time you take your hand off the “home row” to use the navigation keys you are wasting time — time that adds up, considering how often you move around in code or text. A good Emacs hacker constantly moves and edits, and in rapid succession: it is folly to stop, start, stop, start every time you navigate the buffer.</p>
<h3>Fundamental Movement Keys</h3>
<p>The four fundamental movement keys are <code>C-n</code>, for next logical line; <code>C-p</code>, for previous logical line; <code>C-f</code> for move forward by character; and <code>C-b</code> for move backward by character.</p>
<p>I recommend adding this to your .emacs, as it makes <code>C-n</code> insert newlines if the point is at the end of the buffer. Useful, as it means you won’t have to reach for the return key to add newlines!</p>

<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">setq</span> next-line-add-newlines t<span style=\"color: #66cc66;\">)</span></pre></div></div>

<p>The move to beginning and end of line commands bear mentioning as well, as they are also a crucial part of movement. To move to the beginning of a line, type <code>C-a</code>; to move to the end, type <code>C-e</code>.</p>
<h2>Extended Movement</h2>
<p>It is rarely efficient to use the fundamental movement keys if you are moving the point more than a few characters. It is at this stage that you will have to make a judgment call and decide what the <em>fastest</em> way of getting to where you are going is.</p>
<h3>Movement by Word</h3>
<p>The keybindings for movement by word in Emacs is almost the same as that of movement by character, but instead of the prefix <code>C-</code> it is <code>M-</code>. To move forward one word use <code>M-f</code>; and to move backward one word use <code>M-b</code>.</p>
<p>Movement by word will make up the bulk of your intra-line movement. It pays to understand why it works the way it does, and to understand that, you must know what a <em>word</em> is.</p>
<h4>Definition of a Word</h4>
<p>What a word is is governed by the <em>syntax table</em>, an altogether fascinating topic that deserves its own article at some point. But keeping it simple, the syntax table governs how Emacs treats almost every character — Unicode as well — and what its role is when a function like <code>forward-word</code> is run.</p>
<p>For most things — particularly source code — a word is almost always alphanumeric, possibly with a few other characters like underscore. It may seem counterintuitive to have a fluid definition for what a word is, but if you think about it, it makes perfect sense: what you consider a word when you’re writing text may not be the same as when you are writing code, and the definition of, say, a variable may also differ between languages.</p>
<h3>Movement by Paragraph, Sentence</h3>
<p>Movement in Emacs is not limited to just characters and words. If you are frequently writing text, the <code>forward/backward-paragraph</code> and <code>forward/backward-sentence</code> will come in handy. To move by sentence use the handy keybinds <code>M-e</code> and <code>M-a</code>. The paragraph keys are bound to the less-than-helpful <code>C-down/up</code> navigation keys.</p>
<p>What is considered a <em>paragraph</em> is governed by variables like <code>paragraph-start</code> and <code>paragraph-separate</code>. The same holds true for a <em>sentence</em>, but it uses <code>sentence-end</code> (a function <em>and</em> a variable) to determine what a sentence boundary is; the boundary is usually a full stop followed by one or two whitespaces.</p>
<h3>Scrolling</h3>
<p>You can also scroll by “page” (and what that means deserves its own article) with <code>C-v</code> to scroll down, and <code>M-v</code> to scroll up. I use the word <em>scroll</em> here because the concept of a <em>page</em> in Emacs is not what it is in other editors. But I doubt anybody cares if you refer to it as page up or down, something I often catch myself doing.</p>
<p>The command <code>C-M-v</code> also bears mention, as it scrolls the <em>other</em> window; what <em>other</em> is depends on how many split windows you have open (if you do) or frames (if you don’t). This key is very, very useful if you are reading documentation in another window or frame and you want to scroll it without the hassle of switching to that other window. Incidentally, there is only one command to scroll the other window, and that is the one I mentioned before; to scroll backwards, use the <em>negative argument</em> first.</p>
<h3>Move to Beginning/End of Buffer</h3>
<p>Use <code>M-&lt;</code> to move to the beginning of the buffer, and <code>M-&gt;</code> to move to the end. The buffer jump commands are useful for they leave the mark at the originating position, meaning you can jump back to where you came from with <code>C-u C-SPC</code>. I recommend <a href=\"http://www.masteringemacs.org/articles/2010/12/22/fixing-mark-commands-transient-mark-mode/\">reading my article on the mark commands</a> as it will show you how to make the mark commands more useful.</p>
<h2>Advanced Movement</h2>
<p>Advanced movement commands are meant to augment the basic commands I described above. What makes them advanced is that they require a bit more forethought before use as their functionality is <em>context-aware</em>. The movement keys described here are what makes Emacs stand out from most other editors; it is most important that you work the commands into your daily work-pattern as it will greatly speed up movement and, thus, editing.</p>
<h3>Movement by s-expression</h3>
<p>Moving by s-expression is a little misleading (unless you edit <em>Lisp</em> in which case the name is apt) as what it <em>really</em> means is <em>movement by balanced expression</em>. A balanced expression is, like moving by word, subject to the syntax table, but common examples are quotes (<code>' '</code>, <code>\" \"</code>) and brackets (<code>[ ]</code>, <code>( )</code>, <code>{ }</code>, <code>&lt; &gt;</code>).</p>
<p>Movement by s-expression is similar to movement by character and word, only the prefix is <code>C-M-</code>. So move forward is <code>C-M-f</code> and backward is <code>C-M-b</code>.</p>
<p>Moving by s-expression will take a bit of getting used to, but you will quickly find that it is a more effective means of navigating source code than by word or character. A lot of the things we do in development is deal with quoted strings; expressions in parentheses; and even regular text and code.  Ignoring quotes and parentheses, moving by s-exp is still useful for everyday navigation as <code>forward/backward-sexp</code> will treat a larger swath of characters as part of one \"unit\". So what that basically boils down to is that it is more <em>intelligent</em> in grouping the letters together into meaningful chunks for you to move around by. Use it for a while -- replace movement by word for a while if you have to to learn how to properly navigate by s-exp. You'll thank me for it. I promise. Really.</p>
<h3>Moving In and Out of Lists</h3>
<p>Like the commands to move <em>past</em> a balanced expression, Emacs also lets you move <em>into</em> one. The list commands were obviously meant, again, for Lisp-likes but they serve their purpose well in other languages.</p>
<p>To move into (down) a list type <code>C-M-d</code>; to move out (up) a list type <code>C-M-u</code>. When you move down Emacs will pick the nearest group of balanced parenthesis and move into those; if you wish to move into, say, a neighboring pair you must use...</p>
<p>If you get a scan error it is because you are in a position where Emacs cannot determine how to carry out what you are trying to do. </p>
<h3>Moving Forward and Backward in Lists</h3>
<p>Moving forward and backward are niche-level commands indeed, unless you write a lot of Lisp. They work in much the same manner as moving in and out of lists, although they move forward or backward to a neighboring pair of parentheses that share the same depth.</p>
<h2>ISearch</h2>
<p>Learn to move around the buffer with isearch (<code>C-s</code> or <code>C-r</code>; <code>C-M-s</code> for regexp-aware isearch); it's an incremental search engine in Emacs that looks as you type. It has myriad features (type <code>C-s</code> followed by <code>C-h C-h</code> to see them all) but the most important ones in isearch mode are <code>C-w</code> (to add the word after point to); <code>M-y</code> to yank the text; <code>C-r</code> to reverse the search direction; <code>M-c</code> to toggle case sensitivity folding and <code>M-n</code>/<code>&lt;-p</code> to go through the history of past searches.</p>
<p>Isearch is a superfast way to get around in the code, and if you are often looking for words in source code, I would recommend the ever-useful <code>isearch-forward-word</code> (<code>M-s w</code>) to \"fuzzy-find\" matches in the code. It cleverly ignores things like punctuation as it looks for <em>whole words</em> instead. Super-duper Useful.</p>
<p>Oh, one more tip: if you type <code>C-s C-s</code> it will repeat the last searched query.</p>
<h2>Back to Indentation</h2>
<p>If you've ever typed <code>C-a M-f</code> or something to that effect to move the point past the whitespace on a line then good news! There's a better way. In Emacs the command <code>back-to-indentation</code> moves point to the beginning of the line and moves forward past all the indentation. The command is bound to the easy-to-reach key <code>M-m</code>.</p>
<h2>Registers / Bookmarks</h2>
<p>You can use Emacs registers (and the bookmark functionality) to store the location of the point. If you only care about transient storage (that gets lost on Emacs exit) you should use registers; should you desire something more permanent then perhaps bookmarks are what you want. Bookmarks and registers both introduce a myriad features that I'll introduce in a later article, but the commands that affect movement are <code>C-x r SPC</code> to store point in a register and <code>C-x r j</code> to jump to a point stored in a register.</p>
<p>The bookmark functionality in Emacs is very flexible and lets you do much more than simply storing and retrieving a point location. To use the bookmark functionality to store, retrieve and list bookmarks type <code>C-x r m</code> to save a named bookmark; type <code>C-x r b</code> to jump to a named bookmark; and <code>C-x r l</code> to list all bookmarks.</p>
<h2>The Mark</h2>
<p>The mark commands in Emacs are used to not only define one part of a region (the other being the point) but they are also used as a form of <em>transient beacon</em> that you can recall the point to. This functionality is very useful, as there are several movement commands in Emacs that set the mark, like moving to the beginning or end of a buffer, say.</p>
<p>My <a href=\"http://www.masteringemacs.org/articles/2010/12/22/fixing-mark-commands-transient-mark-mode/\">article on the mark commands</a> will tell you how to optimize the use of the mark commands if you use transient mark mode, as sometimes <em>tmm</em> will get in the way of using the mark as a <em>transient beacon</em>, and not just as a boundary for the region.</p>
<p>The commands that most interest you as far as movement is concerned is <code>C-x C-x</code> to toggle between the point and the mark in the buffer. If you yank text, you can exchange the point and mark to jump between the beginning and end of the yanked text.</p>
<p>Another useful command is the command to jump to the head of the mark ring (subsequent calls will cycle through the other marks in the buffer's mark ring) and that command is <code>C-u C-SPC</code>. It bears mention that my aforementioned article suggests binding this useful command to <code>M-`</code>.</p>
<p>Jumping to the mark is useful, but explicitly setting it is just as useful, and this is where <em>tmm</em> can get in the way: the command to set the mark is <code>C-SPC</code> (note that there is no universal argument here) but that will also activate the region -- very annoying. Again, my article above has custom code that will set the mark but not activate the region.</p>
<p>The mark is invisible by default, but I use a cool module called <em>visiblemark.el</em> that makes, well, <a href=\"http://www.emacswiki.org/emacs/VisibleMark\">the mark visible</a>.</p>
<h2>Repositioning Point</h2>
<p>You can move the point between the top, center and bottom (by default) of the visible window but without actually scrolling up or down. The command is sometimes useful if you want to reach text in one of the previous three areas, although you can configure the variable <code>recenter-positions</code> to change that. The command is bound to <code>M-r</code> which makes it very easy to reach and thus use.</p>
<h2>Imenu</h2>
<p>Imenu is a useful and extensible tool in Emacs that lets you jump to key areas of your buffer, most usually functions definitions in source code. Unfortunately, the imenu is marred somewhat by no default key binding (<code>M-x imenu</code> to invoke) making it less known than it should be; another negative is that it uses the standard completion mechanism which is terrible for quickly navigating by \"feel\".</p>
<p>I use <a href=\"http://www.emacswiki.org/emacs/ImenuMode#toc10\">a super-charged ido version of imenu</a> and bind it to the <code>M-i</code> key:</p>

<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">(</span>kbd <span style=\"color: #0000ff;\">\"M-i\"</span><span style=\"color: #66cc66;\">)</span> 'ido-goto-<span style=\"color: #483D8B;\">symbol</span><span style=\"color: #66cc66;\">)</span></pre></div></div>

<h2>TAGS</h2>
<p>TAGS is ancient technology that uses an external tool called <em>ctags</em> or <em>etags</em> to index function signatures from source files into one big flat file. Emacs has excellent support for TAGS (but again lacks the fuzziness ido provides, unless you write some elisp) but TAGS was never meant for modern object-oriented languages as it struggles with the hierarchical nature of the code; another big problem is that TAGS is unbearably slow on large codebases, making it unusable in single-threaded Emacs.</p>
<p>The two bread-and-butter TAGS commands to find stuff are bound to <code>M-,</code> and <code>M-.</code> (use <code>M-*</code> to jump back); there is also an Emacs-style <em>apropos</em> command called <code>M-x tags-apropos</code> for wildcard search.</p>
<p>If you use my code below, you can use <code>C-.</code> to find by file in the TAGS file, like a poor man's IDE-style project file.</p>
<p>I don't remember if I wrote the code below (or if I simply snarfed it from somewhere and modified it.)</p>

<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span>require 'etags<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> ido-find-tag <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #0000ff;\">\"Find a tag using ido\"</span>
  <span style=\"color: #66cc66;\">(</span>interactive<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>tags-completion-table<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">let</span> <span style=\"color: #66cc66;\">(</span>tag-names<span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">mapc</span> <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">lambda</span> <span style=\"color: #66cc66;\">(</span>x<span style=\"color: #66cc66;\">)</span>
	    <span style=\"color: #66cc66;\">(</span>unless <span style=\"color: #66cc66;\">(</span>integerp x<span style=\"color: #66cc66;\">)</span>
	      <span style=\"color: #66cc66;\">(</span>push <span style=\"color: #66cc66;\">(</span>prin1-to-string x t<span style=\"color: #66cc66;\">)</span> tag-names<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
	  tags-completion-table<span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span>find-tag <span style=\"color: #66cc66;\">(</span>ido-completing-read <span style=\"color: #0000ff;\">\"Tag: \"</span> tag-names<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> ido-find-file-in-tag-files <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>interactive<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>save-excursion
    <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">let</span> <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span>enable-recursive-minibuffers t<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
      <span style=\"color: #66cc66;\">(</span>visit-tags-table-buffer<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span>find-file
     <span style=\"color: #66cc66;\">(</span>expand-file-<span style=\"color: #483D8B;\">name</span>
      <span style=\"color: #66cc66;\">(</span>ido-completing-read
       <span style=\"color: #0000ff;\">\"Project file: \"</span> <span style=\"color: #66cc66;\">(</span>tags-table-files<span style=\"color: #66cc66;\">)</span> <span style=\"color: #483D8B;\">nil</span> t<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">[</span>remap find-tag<span style=\"color: #66cc66;\">]</span> 'ido-find-tag<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">(</span>kbd <span style=\"color: #0000ff;\">\"C-.\"</span><span style=\"color: #66cc66;\">)</span> 'ido-find-file-in-tag-files<span style=\"color: #66cc66;\">)</span></pre></div></div>

<h2>Goal Column</h2>
<p>If you find yourself editing multiple lines in a row -- perhaps in a macro -- you may want to change the default column the point moves to when you change lines; naturally it will only do so if it is possible. This functionality is called <em>goal column</em> and it's bound to <code>C-x C-n</code> (<code>C-u C-x C-n</code> to disable).</p>
<h2>Subword Mode</h2>
<p>Editing code <code>WithCamelCaseWritingLikeThis</code> is frustrating in part because Emacs treats a camelcased identifier as a single word. The good news is, though, that Emacs has something called <code>subword-mode</code> (called <code>c-subword-mode</code> in earlier Emacsen) that rewires the movement and edit commands to work on CapitalizedWords.</p>
<h2>Smart Scan</h2>
<p>A long time ago I used an IDE feature that let you quickly search up or down for whatever identifier the point was on, and I decided I wanted something like it in Emacs so I wrote the code snippet you see below. Now, it's perfectly possible to do what it does with isearch but I use the code as it avoids the hassle of fidgeting with isearch to get the term under point into the search field.</p>
<p>In the code below the commands are bound to <code>M-p</code> and <code>M-n</code>.</p>
<p>Smart Scan's main advantage over isearch is that all you need to do is move the point to whatever identifier you wish to search for and then press <code>M-n</code> to find the next match in the buffer. The main use is not that you go \"looking\" for the identifier you wish to search for first: you are probably better off using isearch then; no, the main advantage is when you're already writing code -- or stepping through it with a debugger -- then smart scan will beat out isearch.</p>
<p>Smart Scan is also clever enough to ignore comments and strings containing the identifier you are looking for.</p>
<p>I'm contemplating cleaning it up a bit more and making it available as a package; for now though it'll remain a \"snippet\" here. Feel free to suggest changes here in the comments or by contacting me.</p>
<p>Paste this into your .emacs to add smart scan support.</p>

<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\" style=\"font-family: Consolas, Inconsolata, ;\"><span style=\"color: #66cc66;\">(</span>defvar smart-use-extended-syntax <span style=\"color: #483D8B;\">nil</span>
  <span style=\"color: #0000ff;\">\"If t the smart symbol functionality will consider extended
syntax in finding matches, if such matches exist.\"</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>defvar smart-last-symbol-<span style=\"color: #483D8B;\">name</span> <span style=\"color: #0000ff;\">\"\"</span>
  <span style=\"color: #0000ff;\">\"Contains the current symbol name.
 
This is only refreshed when `last-command' does not contain
either `smart-symbol-go-forward' or `smart-symbol-go-backward'\"</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>make-local-variable 'smart-use-extended-syntax<span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>defvar smart-symbol-old-pt <span style=\"color: #483D8B;\">nil</span>
  <span style=\"color: #0000ff;\">\"Contains the location of the old point\"</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> smart-symbol-goto <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">name</span> direction<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #0000ff;\">\"Jumps to the next NAME in DIRECTION in the current buffer.
 
DIRECTION must be either `forward' or `backward'; no other option
is valid.\"</span>
 
  <span style=\"color: #808080; font-style: italic;\">;; if `last-command' did not contain</span>
  <span style=\"color: #808080; font-style: italic;\">;; `smart-symbol-go-forward/backward' then we assume it's a</span>
  <span style=\"color: #808080; font-style: italic;\">;; brand-new command and we re-set the search term.</span>
  <span style=\"color: #66cc66;\">(</span>unless <span style=\"color: #66cc66;\">(</span>memq last-command '<span style=\"color: #66cc66;\">(</span>smart-symbol-go-forward
                               smart-symbol-go-backward<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">setq</span> smart-last-symbol-<span style=\"color: #483D8B;\">name</span> <span style=\"color: #483D8B;\">name</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">setq</span> smart-symbol-old-pt <span style=\"color: #66cc66;\">(</span>point<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>message <span style=\"color: #66cc66;\">(</span>format <span style=\"color: #0000ff;\">\"%s scan for symbol <span style=\"color: #000099; font-weight: bold;\">\\\"</span>%s<span style=\"color: #000099; font-weight: bold;\">\\\"</span>\"</span>
                   <span style=\"color: #66cc66;\">(</span>capitalize <span style=\"color: #66cc66;\">(</span>symbol-<span style=\"color: #483D8B;\">name</span> direction<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
                   smart-last-symbol-<span style=\"color: #483D8B;\">name</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>unless <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">catch</span> 'done
            <span style=\"color: #66cc66;\">(</span>while <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">funcall</span> <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">cond</span>
                             <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">eq</span> direction 'forward<span style=\"color: #66cc66;\">)</span> <span style=\"color: #808080; font-style: italic;\">; forward</span>
                              'search-forward<span style=\"color: #66cc66;\">)</span>
                             <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">eq</span> direction 'backward<span style=\"color: #66cc66;\">)</span> <span style=\"color: #808080; font-style: italic;\">; backward</span>
                              'search-backward<span style=\"color: #66cc66;\">)</span>
                             <span style=\"color: #66cc66;\">(</span>t <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">error</span> <span style=\"color: #0000ff;\">\"Invalid direction\"</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span> <span style=\"color: #808080; font-style: italic;\">; all others</span>
                            smart-last-symbol-<span style=\"color: #483D8B;\">name</span> <span style=\"color: #483D8B;\">nil</span> t<span style=\"color: #66cc66;\">)</span>
              <span style=\"color: #66cc66;\">(</span>unless <span style=\"color: #66cc66;\">(</span>memq <span style=\"color: #66cc66;\">(</span>syntax-ppss-context
                             <span style=\"color: #66cc66;\">(</span>syntax-ppss <span style=\"color: #66cc66;\">(</span>point<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span> '<span style=\"color: #66cc66;\">(</span>string comment<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
                <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">throw</span> 'done t<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span>goto-char smart-symbol-old-pt<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> smart-symbol-go-forward <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #0000ff;\">\"Jumps forward to the next symbol at point\"</span>
  <span style=\"color: #66cc66;\">(</span>interactive<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>smart-symbol-goto <span style=\"color: #66cc66;\">(</span>smart-symbol-at-pt 'end<span style=\"color: #66cc66;\">)</span> 'forward<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> smart-symbol-go-backward <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #0000ff;\">\"Jumps backward to the previous symbol at point\"</span>
  <span style=\"color: #66cc66;\">(</span>interactive<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #66cc66;\">(</span>smart-symbol-goto <span style=\"color: #66cc66;\">(</span>smart-symbol-at-pt 'beginning<span style=\"color: #66cc66;\">)</span> 'backward<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">defun</span> smart-symbol-at-pt <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">&amp;</span>optional dir<span style=\"color: #66cc66;\">)</span>
  <span style=\"color: #0000ff;\">\"Returns the symbol at point and moves point to DIR (either `beginning' or `end') of the symbol.
 
If `smart-use-extended-syntax' is t then that symbol is returned
instead.\"</span>
  <span style=\"color: #66cc66;\">(</span>with-syntax-table <span style=\"color: #66cc66;\">(</span>make-syntax-table<span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">if</span> smart-use-extended-syntax
        <span style=\"color: #66cc66;\">(</span>modify-syntax-entry ?<span style=\"color: #66cc66;\">.</span> <span style=\"color: #0000ff;\">\"w\"</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span>modify-syntax-entry ?_ <span style=\"color: #0000ff;\">\"w\"</span><span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #66cc66;\">(</span>modify-syntax-entry ?- <span style=\"color: #0000ff;\">\"w\"</span><span style=\"color: #66cc66;\">)</span>
    <span style=\"color: #808080; font-style: italic;\">;; grab the word and return it</span>
    <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">let</span> <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span>word <span style=\"color: #66cc66;\">(</span>thing-at-point 'word<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
          <span style=\"color: #66cc66;\">(</span>bounds <span style=\"color: #66cc66;\">(</span>bounds-of-thing-at-point 'word<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
      <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">if</span> word
          <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">progn</span>
            <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">cond</span>
             <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">eq</span> dir 'beginning<span style=\"color: #66cc66;\">)</span> <span style=\"color: #66cc66;\">(</span>goto-char <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">car</span> bounds<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
             <span style=\"color: #66cc66;\">(</span><span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">eq</span> dir 'end<span style=\"color: #66cc66;\">)</span> <span style=\"color: #66cc66;\">(</span>goto-char <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">cdr</span> bounds<span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
             <span style=\"color: #66cc66;\">(</span>t <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">error</span> <span style=\"color: #0000ff;\">\"Invalid direction\"</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
            word<span style=\"color: #66cc66;\">)</span>
        <span style=\"color: #66cc66;\">(</span><span style=\"color: #483D8B;\">error</span> <span style=\"color: #0000ff;\">\"No symbol found\"</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span><span style=\"color: #66cc66;\">)</span>
 
<span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">(</span>kbd <span style=\"color: #0000ff;\">\"M-n\"</span><span style=\"color: #66cc66;\">)</span> 'smart-symbol-go-forward<span style=\"color: #66cc66;\">)</span>
<span style=\"color: #66cc66;\">(</span>global-set-key <span style=\"color: #66cc66;\">(</span>kbd <span style=\"color: #0000ff;\">\"M-p\"</span><span style=\"color: #66cc66;\">)</span> 'smart-symbol-go-backward<span style=\"color: #66cc66;\">)</span></pre></div></div>

<h2>Goto Line</h2>
<p>Emacs does, of course, support jumping to a specific line, and it is bound to two commands: <code>M-g g</code> (that everybody seems to use), and the easier-to-type <code>M-g M-g</code>. The goto command is smart enough to default to whatever number point is on when the command is invoked, which will come in handy if you combine it with the command <code>C-u M-g M-g</code>, which executes <code>goto-line</code> in the <em>previous</em> buffer -- that is, the buffer you just came from. The use case is if you switch to a buffer -- say, a shell or output window -- and you want to jump to a line in the buffer you just came from.</p>
<p>One important thing to note when using <code>goto-line</code> is that, if the buffer is narrowed the goto line command still counts from the first line of the buffer, rather than the first line of the <em>narrowed</em> buffer.</p>
<h2>Next / Prev Error</h2>
<p>If you use the compile mode (compile mode is also used for things like <code>grep</code> and <code>occur</code>) in Emacs you will, for free, gain the ability to jump to the next/prev error in that compile buffer by invoking <code>M-g M-n</code> and <code>M-g M-p</code> for next and previous error, respectively.</p>
<h2>Beginning / End of Defun</h2>
<p>Despite the cryptic Lisp name for a function, the functions <code>beginning-of-defun</code> and <code>end-of-defun</code> works great with most programming modes in Emacs, by jumping to the beginning (duh) and end of the function/class definition point is contained in.</p>
<p>The commands are bound to <code>C-M-a</code> and <code>C-M-e</code> making them very easy to reach and use, and they will definitely make editing your code easier.</p>
<h2>Conclusion</h2>
<p>Emacs has a staggering array of commands that makes moving around your buffer much, much easier; of course it's easier said than done to learn all of them and make them part of your day-to-day life, but if you start slow and incorporate one command at a time then before long you will be speeding through text and code.</p>
<p><a class=\"a2a_button_reddit\" href=\"http://www.addtoany.com/add_to/reddit?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Reddit\"><img alt=\"Reddit\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/reddit.png\" width=\"16\" /></a> <a class=\"a2a_button_twitter\" href=\"http://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Twitter\"><img alt=\"Twitter\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/twitter.png\" width=\"16\" /></a> <a class=\"a2a_button_google_reader\" href=\"http://www.addtoany.com/add_to/google_reader?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Google Reader\"><img alt=\"Google Reader\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/reader.png\" width=\"16\" /></a> <a class=\"a2a_button_delicious\" href=\"http://www.addtoany.com/add_to/delicious?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Delicious\"><img alt=\"Delicious\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/delicious.png\" width=\"16\" /></a> <a class=\"a2a_button_facebook\" href=\"http://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.masteringemacs.org%2Farticles%2F2011%2F01%2F14%2Feffective-editing-movement%2F&amp;linkname=Effective%20Editing%20I%3A%20Movement\" rel=\"nofollow\" target=\"_blank\" title=\"Facebook\"><img alt=\"Facebook\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/icons/facebook.png\" width=\"16\" /></a> <a class=\"a2a_dd addtoany_share_save\" href=\"http://www.addtoany.com/share_save\"><img alt=\"Share\" height=\"16\" src=\"http://www.masteringemacs.org/wp-content/plugins/add-to-any/favicon.png\" width=\"16\" /></a> </p>") (author nil (name nil "mickey") (uri nil "http://www.masteringemacs.org")) (source nil (title ((type . "html")) "Mastering Emacs") (subtitle ((type . "html")) "mastering the world's best text editor") (link ((rel . "self") (href . "http://www.masteringemacs.org/feed/"))) (id nil "http://www.masteringemacs.org")))) ("David's World: The new rockstars" "<span class=\"mt-enclosure mt-enclosure-image\" style=\"display: inline;\"><img alt=\"scientists-are.png\" class=\"mt-image-none\" src=\"http://www.davids-world.com/scientists-are.png\" width=\"650\" /></span>" "http://www.davids-world.com/archives/2011/01/the_new_rocksta.html" (19759 32997) old 17 nil nil ((title ((type . "html")) "David's World: The new rockstars") (link ((href . "http://www.davids-world.com/archives/2011/01/the_new_rocksta.html"))) (id nil "tag:www.davids-world.com,2011://1.261") (updated nil "2011-01-13T22:47:01+00:00") (content ((type . "html") (xml:lang . "en")) "<span class=\"mt-enclosure mt-enclosure-image\" style=\"display: inline;\"><img alt=\"scientists-are.png\" class=\"mt-image-none\" src=\"http://www.davids-world.com/scientists-are.png\" width=\"650\" /></span>") (author nil (name nil "David Reitter") (uri nil "http://www.davids-world.com/")) (source nil (title ((type . "html")) "David's World") (subtitle ((type . "html")) "... looms large and daunting.") (link ((rel . "self") (href . "http://www.davids-world.com/atom.xml"))) (id nil "tag:www.davids-world.com,2011://1")))) ("Juan Garcia: The Problem with Scripting Language REPLs" "<p>I figured out what the problem is with Devel::REPL and the command line REPLs provided by Python and Ruby – evaluation is not a separate step.  When I press enter, I’m forced to evaluate the current line.</p>
<p><em>Yes</em>, you say, that is what REPL means – Read, Evalute, Print, Loop.  <em>Evaluate</em> comes after <em>Read</em>.</p>
<p>In reality, usable REPLs, such as Emacs<sup><a class=\"footref\" href=\"http://curiousprogrammer.wordpress.com/2011/01/13/the-problem-with-scripting-language-repls/#fn.1\" name=\"fnr.1\">1</a></sup>, let you control when the read evaluate print sequence happens.  I can craft the most beautiful function I can think of.  Better still, if I change my mind, I can easily modify the function and redefine it with a keystroke.  Well, a key chord at least.</p>
<p>In contrast, with Devel::REPL, once I have pressed enter, changing my mind is painful.  Integrating it with Emacs comint will probably alleviate a lot of that pain.</p>
<p>Or better yet, as <a href=\"http://curiousprogrammer.wordpress.com/2011/01/04/devel-repl/#comment-8745\">Anonymous recommends</a>, I should take a look at Sepia or PDE which already have emacs integration.  Having said that, basic integration is, what, 20 lines of emacs-lisp?</p>
<hr />
<p class=\"footnote\"><a class=\"footnum\" href=\"http://curiousprogrammer.wordpress.com/2011/01/13/the-problem-with-scripting-language-repls/#fnr.1\" name=\"fn.1\">1.</a> Yes, Emacs is a REPL.  Kinda.</p>
<br />Filed under: <a href=\"http://curiousprogrammer.wordpress.com/category/programming/perl-programming/\">Perl</a> Tagged: <a href=\"http://curiousprogrammer.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://curiousprogrammer.wordpress.com/tag/repl/\">repl</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/curiousprogrammer.wordpress.com/1468/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=curiousprogrammer.wordpress.com&amp;blog=367204&amp;post=1468&amp;subd=curiousprogrammer&amp;ref=&amp;feed=1\" width=\"1\" />" "http://curiousprogrammer.wordpress.com/2011/01/13/the-problem-with-scripting-language-repls/" (19759 27337) old 18 nil nil ((title ((type . "html") (xml:lang . "en")) "Juan Garcia: The Problem with Scripting Language REPLs") (link ((href . "http://curiousprogrammer.wordpress.com/2011/01/13/the-problem-with-scripting-language-repls/"))) (id nil "http://curiousprogrammer.wordpress.com/?p=1468") (updated nil "2011-01-13T21:12:41+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I figured out what the problem is with Devel::REPL and the command line REPLs provided by Python and Ruby – evaluation is not a separate step.  When I press enter, I’m forced to evaluate the current line.</p>
<p><em>Yes</em>, you say, that is what REPL means – Read, Evalute, Print, Loop.  <em>Evaluate</em> comes after <em>Read</em>.</p>
<p>In reality, usable REPLs, such as Emacs<sup><a class=\"footref\" href=\"http://curiousprogrammer.wordpress.com/2011/01/13/the-problem-with-scripting-language-repls/#fn.1\" name=\"fnr.1\">1</a></sup>, let you control when the read evaluate print sequence happens.  I can craft the most beautiful function I can think of.  Better still, if I change my mind, I can easily modify the function and redefine it with a keystroke.  Well, a key chord at least.</p>
<p>In contrast, with Devel::REPL, once I have pressed enter, changing my mind is painful.  Integrating it with Emacs comint will probably alleviate a lot of that pain.</p>
<p>Or better yet, as <a href=\"http://curiousprogrammer.wordpress.com/2011/01/04/devel-repl/#comment-8745\">Anonymous recommends</a>, I should take a look at Sepia or PDE which already have emacs integration.  Having said that, basic integration is, what, 20 lines of emacs-lisp?</p>
<hr />
<p class=\"footnote\"><a class=\"footnum\" href=\"http://curiousprogrammer.wordpress.com/2011/01/13/the-problem-with-scripting-language-repls/#fnr.1\" name=\"fn.1\">1.</a> Yes, Emacs is a REPL.  Kinda.</p>
<br />Filed under: <a href=\"http://curiousprogrammer.wordpress.com/category/programming/perl-programming/\">Perl</a> Tagged: <a href=\"http://curiousprogrammer.wordpress.com/tag/emacs/\">Emacs</a>, <a href=\"http://curiousprogrammer.wordpress.com/tag/repl/\">repl</a> <a href=\"http://feeds.wordpress.com/1.0/gocomments/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/curiousprogrammer.wordpress.com/1468/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/curiousprogrammer.wordpress.com/1468/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/curiousprogrammer.wordpress.com/1468/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=curiousprogrammer.wordpress.com&amp;blog=367204&amp;post=1468&amp;subd=curiousprogrammer&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "Jared") (uri nil "http://curiousprogrammer.wordpress.com")) (source nil (title ((type . "html")) "A Curious Programmer » Emacs") (subtitle ((type . "html")) "Leveraging Perl and Emacs") (link ((rel . "self") (href . "http://curiousprogrammer.wordpress.com/tag/emacs/feed/atom/"))) (id nil "http://curiousprogrammer.wordpress.com/feed/atom/")))) ("Dimitri Fontaine: Starting afresh with el-get" "<p>It so happens that a colleague of mine wanted to start using <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> but
couldn't get to it. He insists on having proper color themes in all
applications and some sensible defaults full of nifty add-ons everywhere,
and didn't want to have to learn that much about <em>Emacs</em> and <em>Emacs Lisp</em> to get
started. I'm not even sure that he will <a href=\"http://www.gnu.org/software/emacs/tour/\">Take the Emacs tour</a>.</p>
<p>You would tell me that there's nothing we can do for so unfriendly
users. Well, here's what I did:</p>
<pre class=\"src\"><span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">emacs setup
</span>
(add-to-list 'load-path <span style=\"color: #ad7fa8; font-style: italic;\">\"~/.emacs.d/el-get/el-get\"</span>)
(<span style=\"color: #729fcf; font-weight: bold;\">require</span> '<span style=\"color: #8ae234;\">el-get</span>)
(setq
el-get-sources
'(el-get
php-mode-improved
psvn
auto-complete
switch-window
(<span style=\"color: #729fcf;\">:name</span> buffer-move
<span style=\"color: #729fcf;\">:after</span> (<span style=\"color: #729fcf; font-weight: bold;\">lambda</span> ()
(global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"&lt;C-S-up&gt;\"</span>)     'buf-move-up)
(global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"&lt;C-S-down&gt;\"</span>)   'buf-move-down)
(global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"&lt;C-S-left&gt;\"</span>)   'buf-move-left)
(global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"&lt;C-S-right&gt;\"</span>)  'buf-move-right)))
(<span style=\"color: #729fcf;\">:name</span> magit
<span style=\"color: #729fcf;\">:after</span> (<span style=\"color: #729fcf; font-weight: bold;\">lambda</span> ()
(global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"C-x C-z\"</span>) 'magit-status)))
(<span style=\"color: #729fcf;\">:name</span> goto-last-change
<span style=\"color: #729fcf;\">:after</span> (<span style=\"color: #729fcf; font-weight: bold;\">lambda</span> ()
<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">azerty keyboard here, don't use C-x C-/
</span>                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"C-x C-_\"</span>) 'goto-last-change)))))
(<span style=\"color: #729fcf; font-weight: bold;\">when</span> window-system
(add-to-list 'el-get-sources  'color-theme-tango))
(el-get 'sync)
<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">visual settings
</span>(setq inhibit-splash-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(line-number-mode 1)
(column-number-mode 1)
<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">Use the clipboard, pretty please, so that copy/paste \"works\"
</span>(setq x-select-enable-clipboard t)
(set-frame-font <span style=\"color: #ad7fa8; font-style: italic;\">\"Monospace-10\"</span>)
(global-hl-line-mode)
<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">suivre les changements exterieurs sur les fichiers
</span>(global-auto-revert-mode 1)
<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">pour les couleurs dans M-x shell
</span>(autoload 'ansi-color-for-comint-mode-on <span style=\"color: #ad7fa8; font-style: italic;\">\"ansi-color\"</span> nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">S-fleches pour changer de fenêtre
</span>(windmove-default-keybindings)
(setq windmove-wrap-around t)
<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">find-file-at-point quand ça a du sens
</span>(setq ffap-machine-p-known 'accept) <span style=\"color: #888a85;\">; </span><span style=\"color: #888a85;\">no pinging
</span>(setq ffap-url-regexp nil) <span style=\"color: #888a85;\">; </span><span style=\"color: #888a85;\">disable URL features in ffap
</span>(setq ffap-ftp-regexp nil) <span style=\"color: #888a85;\">; </span><span style=\"color: #888a85;\">disable FTP features in ffap
</span>(define-key global-map (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"C-x C-f\"</span>) 'find-file-at-point)
(<span style=\"color: #729fcf; font-weight: bold;\">require</span> '<span style=\"color: #8ae234;\">ibuffer</span>)
(global-set-key <span style=\"color: #ad7fa8; font-style: italic;\">\"\\C-x\\C-b\"</span> 'ibuffer)
<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">use iswitchb-mode for C-x b
</span>(iswitchb-mode)
<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">I can't remember having meant to use C-z as suspend-frame
</span>(global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"C-z\"</span>) 'undo)
<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">winner-mode pour revenir sur le layout précédent C-c &lt;left&gt;
</span>(winner-mode 1)
<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">dired-x pour C-x C-j
</span>(<span style=\"color: #729fcf; font-weight: bold;\">require</span> '<span style=\"color: #8ae234;\">dired-x</span>)
<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">full screen
</span>(<span style=\"color: #729fcf; font-weight: bold;\">defun</span> <span style=\"color: #edd400; font-weight: bold; font-style: italic;\">fullscreen</span> ()
(interactive)
(set-frame-parameter nil 'fullscreen
(<span style=\"color: #729fcf; font-weight: bold;\">if</span> (frame-parameter nil 'fullscreen) nil 'fullboth)))
(global-set-key [f11] 'fullscreen)
</pre>
<p>With just this simple 87 lines (all included) of setup, my local user is
very happy to switch to using <a href=\"http://www.gnu.org/software/emacs/\">our favorite editor</a>. And he's not even afraid
(yet) of his <code>~/.emacs</code>. I say that's a very good sign of where we are with
<a href=\"https://github.com/dimitri/el-get\">el-get</a>!</p>" "http://blog.tapoueh.org/news.dim.html#%20Starting%20afresh%20with%20el%2Dget" (19756 33584) old 19 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Dimitri Fontaine: Starting afresh with el-get") (link ((href . "http://blog.tapoueh.org/news.dim.html#%20Starting%20afresh%20with%20el%2Dget"))) (id nil "http://blog.tapoueh.org/news.dim.html#%20Starting%20afresh%20with%20el%2Dget") (updated nil "2011-01-11T16:20:00+00:00") (content ((type . "html")) "<p>It so happens that a colleague of mine wanted to start using <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> but
couldn't get to it. He insists on having proper color themes in all
applications and some sensible defaults full of nifty add-ons everywhere,
and didn't want to have to learn that much about <em>Emacs</em> and <em>Emacs Lisp</em> to get
started. I'm not even sure that he will <a href=\"http://www.gnu.org/software/emacs/tour/\">Take the Emacs tour</a>.</p>

<p>You would tell me that there's nothing we can do for so unfriendly
users. Well, here's what I did:</p>

<pre class=\"src\"><span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">emacs setup
</span>
(add-to-list 'load-path <span style=\"color: #ad7fa8; font-style: italic;\">\"~/.emacs.d/el-get/el-get\"</span>)
(<span style=\"color: #729fcf; font-weight: bold;\">require</span> '<span style=\"color: #8ae234;\">el-get</span>)
(setq
 el-get-sources
 '(el-get
   php-mode-improved
   psvn
   auto-complete
   switch-window

   (<span style=\"color: #729fcf;\">:name</span> buffer-move
          <span style=\"color: #729fcf;\">:after</span> (<span style=\"color: #729fcf; font-weight: bold;\">lambda</span> ()
                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"&lt;C-S-up&gt;\"</span>)     'buf-move-up)
                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"&lt;C-S-down&gt;\"</span>)   'buf-move-down)
                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"&lt;C-S-left&gt;\"</span>)   'buf-move-left)
                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"&lt;C-S-right&gt;\"</span>)  'buf-move-right)))

   (<span style=\"color: #729fcf;\">:name</span> magit
          <span style=\"color: #729fcf;\">:after</span> (<span style=\"color: #729fcf; font-weight: bold;\">lambda</span> ()
                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"C-x C-z\"</span>) 'magit-status)))

   (<span style=\"color: #729fcf;\">:name</span> goto-last-change
          <span style=\"color: #729fcf;\">:after</span> (<span style=\"color: #729fcf; font-weight: bold;\">lambda</span> ()
                   <span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">azerty keyboard here, don't use C-x C-/
</span>                   (global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"C-x C-_\"</span>) 'goto-last-change)))))

(<span style=\"color: #729fcf; font-weight: bold;\">when</span> window-system
   (add-to-list 'el-get-sources  'color-theme-tango))

(el-get 'sync)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">visual settings
</span>(setq inhibit-splash-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(line-number-mode 1)
(column-number-mode 1)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">Use the clipboard, pretty please, so that copy/paste \"works\"
</span>(setq x-select-enable-clipboard t)

(set-frame-font <span style=\"color: #ad7fa8; font-style: italic;\">\"Monospace-10\"</span>)

(global-hl-line-mode)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">suivre les changements exterieurs sur les fichiers
</span>(global-auto-revert-mode 1)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">pour les couleurs dans M-x shell
</span>(autoload 'ansi-color-for-comint-mode-on <span style=\"color: #ad7fa8; font-style: italic;\">\"ansi-color\"</span> nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">S-fleches pour changer de fenêtre
</span>(windmove-default-keybindings)
(setq windmove-wrap-around t)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">find-file-at-point quand ça a du sens
</span>(setq ffap-machine-p-known 'accept) <span style=\"color: #888a85;\">; </span><span style=\"color: #888a85;\">no pinging
</span>(setq ffap-url-regexp nil) <span style=\"color: #888a85;\">; </span><span style=\"color: #888a85;\">disable URL features in ffap
</span>(setq ffap-ftp-regexp nil) <span style=\"color: #888a85;\">; </span><span style=\"color: #888a85;\">disable FTP features in ffap
</span>(define-key global-map (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"C-x C-f\"</span>) 'find-file-at-point)

(<span style=\"color: #729fcf; font-weight: bold;\">require</span> '<span style=\"color: #8ae234;\">ibuffer</span>)
(global-set-key <span style=\"color: #ad7fa8; font-style: italic;\">\"\\C-x\\C-b\"</span> 'ibuffer)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">use iswitchb-mode for C-x b
</span>(iswitchb-mode)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">I can't remember having meant to use C-z as suspend-frame
</span>(global-set-key (kbd <span style=\"color: #ad7fa8; font-style: italic;\">\"C-z\"</span>) 'undo)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">winner-mode pour revenir sur le layout précédent C-c &lt;left&gt;
</span>(winner-mode 1)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">dired-x pour C-x C-j
</span>(<span style=\"color: #729fcf; font-weight: bold;\">require</span> '<span style=\"color: #8ae234;\">dired-x</span>)

<span style=\"color: #888a85;\">;; </span><span style=\"color: #888a85;\">full screen
</span>(<span style=\"color: #729fcf; font-weight: bold;\">defun</span> <span style=\"color: #edd400; font-weight: bold; font-style: italic;\">fullscreen</span> ()
  (interactive)
  (set-frame-parameter nil 'fullscreen
                       (<span style=\"color: #729fcf; font-weight: bold;\">if</span> (frame-parameter nil 'fullscreen) nil 'fullboth)))
(global-set-key [f11] 'fullscreen)
</pre>

<p>With just this simple 87 lines (all included) of setup, my local user is
very happy to switch to using <a href=\"http://www.gnu.org/software/emacs/\">our favorite editor</a>. And he's not even afraid
(yet) of his <code>~/.emacs</code>. I say that's a very good sign of where we are with
<a href=\"https://github.com/dimitri/el-get\">el-get</a>!</p>") (author nil (name nil "Dimitri Fontaine") (uri nil "http://blog.tapoueh.org/news.dim.html")) (source nil (title ((type . "html")) "tail -f /dev/dim") (subtitle ((type . "html")) "dim's general purpose blog, which might turn into emacs specific") (link ((rel . "self") (href . "http://tapoueh.org/news.dim.xml"))) (id nil "http://blog.tapoueh.org/news.dim.html")))) ("David's World: iPhone 3G with iOS 4.x and jailbreak: Fix for crashes and a battery drain issue." "<p>Plenty of trouble with my jailbroken iPhone 3G, which I run on T-Mobile in the US.  Apple offers its iPhone bundled with an AT&amp;T contract, which keeps the initial payment down (attractive for delusioned customers) and the total cost of ownership up (good for Apple and AT&amp;T.)
</p><p>
To use an iPhone with any GSM network (such as AT&amp;:T or T-Mobile in the US, and virtually any provider in Europe), it needs to be \"jailbroken\" and \"unlocked\".  The process is simple: download a program called \"PwnageTool\" from a <a href=\"http://blog.iphone-dev.org/\">website</a>, run it over the iOS operating system that was downloaded with iTunes (.ipsw), then install the operating system on the iPhone with iTunes.
Once the firmware update has been installed,  start the new Cydia app on your phone, find the <i>Ultrasn0w</i> application and install. That's it: your iPhone will now accept GSM SIM cards from all carriers and in all countries.  <i>PwnageTool only runs on Macs.  If you are still on Windows, have a look at a program called Redsn0w.</i>
</p><p>
The real know-how is in the details, and the iPhone-Dev team makes you read a lot of text before getting a corse idea what to look for.  On top of that, crashes and battery drains have made my life difficult over the last few months.  <b>Here are the solutions I found.</b>  The apply to the iPhone 3G, but not to later iPhones (3GS, iPhone 4).
</p><h2>Installing iOS 4.0, 4.1 and 4.2 on iPhone - slowness, crash and reboot issues</h2>
<p>
Lots of trouble. First the incredible slowness IN IOS 4.0.  The solution was to upgrade to 4.1 when it finally came out.
This wasn't as slow, but buggy in conjunction with the iPhone-Dev team's Jailbreak. Crashes galore all complete with a reboot that took many minutes, just when you're urgently looking for directions. A clean slate supposedly helped: restore the iPhone via iTunes and a jailbroken operating system file but one had to avoid restoring one's data and apps from a backup in iTunes. The manual restore is easier done than it sounds: ITunes synchronizes all data from the Address Book and Mail.app. Of course, if one keeps mail accounts or phone numbers in the phone without syncing them back to a computer, the install process will be much more involved.   This solved the crashes for me.
</p><p>
I upgraded my phone to iOS 4.2.1, with the iPhone-dev jailbreak and the ultrasnow unlock. The trick here is to make sure that the phone's baseband version is compatible.  Then, no baseband upgrade should be performed. Pwnagetool will ask you whether to upgrade the baseband.
</p><h2>Battery drain issue with iOS 4.x</h2>
<p>
The ordeal wasn't over for me, though. Now I dealt with a phone that drained its battery At an impressive rate - it would not last an afternoon.
Online pundits have suggested many solutions to the problem, but the correct one appears to be that the iPhone keeps checking for \"push certificates\" via a Wifi or EDGE or 3G data connection.  These certificates fail to validate, and the checking goes on.  The Data Usage statistic (in Settings -&gt; General) demonstrates these transfers.
</p><p>
One solution is to use <a href=\"http://www.ezdia.com/epad/activate-iphone-3gs-3g-ultrasn0w-1-2fix-battery-drain/4938/\">a new version of Redsn0w</a> for the jailbreak.  If using Ultrasn0w, install a further Cydia package called \"<a href=\"http://www.ihackintosh.com/2010/03/push-doctor-free-push-fix-for-hacktivated-iphones/\">Push Doctor</a>\".  This has fixed the battery drain issue for me and others.
Important note: uninstall OpenSSH afterwards, or at least change the iPhone's root and mobile user passwords.</p>" "http://www.davids-world.com/archives/2011/01/iphone_3g_with.html" (19756 30599) old 20 nil nil ((title ((type . "html")) "David's World: iPhone 3G with iOS 4.x and jailbreak: Fix for crashes and a battery drain issue.") (link ((href . "http://www.davids-world.com/archives/2011/01/iphone_3g_with.html"))) (id nil "tag:www.davids-world.com,2011://1.260") (updated nil "2011-01-11T15:30:15+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Plenty of trouble with my jailbroken iPhone 3G, which I run on T-Mobile in the US.  Apple offers its iPhone bundled with an AT&amp;T contract, which keeps the initial payment down (attractive for delusioned customers) and the total cost of ownership up (good for Apple and AT&amp;T.)
</p><p>
To use an iPhone with any GSM network (such as AT&amp;:T or T-Mobile in the US, and virtually any provider in Europe), it needs to be \"jailbroken\" and \"unlocked\".  The process is simple: download a program called \"PwnageTool\" from a <a href=\"http://blog.iphone-dev.org/\">website</a>, run it over the iOS operating system that was downloaded with iTunes (.ipsw), then install the operating system on the iPhone with iTunes.
Once the firmware update has been installed,  start the new Cydia app on your phone, find the <i>Ultrasn0w</i> application and install. That's it: your iPhone will now accept GSM SIM cards from all carriers and in all countries.  <i>PwnageTool only runs on Macs.  If you are still on Windows, have a look at a program called Redsn0w.</i>
</p><p>
The real know-how is in the details, and the iPhone-Dev team makes you read a lot of text before getting a corse idea what to look for.  On top of that, crashes and battery drains have made my life difficult over the last few months.  <b>Here are the solutions I found.</b>  The apply to the iPhone 3G, but not to later iPhones (3GS, iPhone 4).

</p><h2>Installing iOS 4.0, 4.1 and 4.2 on iPhone - slowness, crash and reboot issues</h2>
<p>

Lots of trouble. First the incredible slowness IN IOS 4.0.  The solution was to upgrade to 4.1 when it finally came out.
This wasn't as slow, but buggy in conjunction with the iPhone-Dev team's Jailbreak. Crashes galore all complete with a reboot that took many minutes, just when you're urgently looking for directions. A clean slate supposedly helped: restore the iPhone via iTunes and a jailbroken operating system file but one had to avoid restoring one's data and apps from a backup in iTunes. The manual restore is easier done than it sounds: ITunes synchronizes all data from the Address Book and Mail.app. Of course, if one keeps mail accounts or phone numbers in the phone without syncing them back to a computer, the install process will be much more involved.   This solved the crashes for me.

</p><p>
I upgraded my phone to iOS 4.2.1, with the iPhone-dev jailbreak and the ultrasnow unlock. The trick here is to make sure that the phone's baseband version is compatible.  Then, no baseband upgrade should be performed. Pwnagetool will ask you whether to upgrade the baseband. 

</p><h2>Battery drain issue with iOS 4.x</h2>

<p>
 The ordeal wasn't over for me, though. Now I dealt with a phone that drained its battery At an impressive rate - it would not last an afternoon. 
Online pundits have suggested many solutions to the problem, but the correct one appears to be that the iPhone keeps checking for \"push certificates\" via a Wifi or EDGE or 3G data connection.  These certificates fail to validate, and the checking goes on.  The Data Usage statistic (in Settings -&gt; General) demonstrates these transfers.
</p><p>
One solution is to use <a href=\"http://www.ezdia.com/epad/activate-iphone-3gs-3g-ultrasn0w-1-2fix-battery-drain/4938/\">a new version of Redsn0w</a> for the jailbreak.  If using Ultrasn0w, install a further Cydia package called \"<a href=\"http://www.ihackintosh.com/2010/03/push-doctor-free-push-fix-for-hacktivated-iphones/\">Push Doctor</a>\".  This has fixed the battery drain issue for me and others.
Important note: uninstall OpenSSH afterwards, or at least change the iPhone's root and mobile user passwords.</p>") (author nil (name nil "David Reitter") (uri nil "http://www.davids-world.com/")) (source nil (title ((type . "html")) "David's World") (subtitle ((type . "html")) "... looms large and daunting.") (link ((rel . "self") (href . "http://www.davids-world.com/atom.xml"))) (id nil "tag:www.davids-world.com,2011://1")))) ("sachachua: Emacs, BBDB, and getting your contacts on the Android or iPhone" "<p>Want your Emacs BBDB contacts on your Android or iPhone? </p>
<p> The easiest way I’ve found is to export your contacts to CSV, then import them into something like Google Contacts. You can export your BBDB contacts using <code>bbdb-to-outlook.el</code>, which is available in the BBDB package in the <code>bits/</code> directory. <a href=\"http://bbdb.cvs.sourceforge.net/viewvc/bbdb/bbdb/bits/bbdb-to-outlook.el\">Download bbdb-to-outlook.el from Sourceforge</a>  if you can’t find it in your BBDB directory. To use: </p>
<ol>
<li> Load bbdb-to-outlook.el and use <code>M-x eval-buffer</code> to load the code. </li>
<li> Use <code>M-x bbdb</code> to open your BBDB records, and search for <code>.</code> to show all the records. Alternatively, search for a subset of your records. </li>
<li> Type <code>O</code> to run <code>bbdb-to-outlook</code> and choose the file. </li>
</ol>
<p> Tada! Step one done. Review the file and delete anything you don’t want to include. </p>
<p> To import the contacts into Google Contacts, go to Google Mail and click on Contacts. Click on <code>Import</code> and choose your file. After some time and some fiddling, you can get that synchronized onto your Android or iPhone. </p>
<p> I haven’t thought about syncing, but I’m trying to keep my BBDB as The Master File for Contacts anyway, as it’s so much more flexible than any other contact database I’ve tried. (Although gist.com is pretty cool and I do like the Android’s merging of photos, contact info, and updates…) </p>
<p> There was some work on <a href=\"http://www.emacswiki.org/emacs/BbdbExportImportSync\">synchronizing BBDB with the Palm</a>, so that might be a possibility. </p>
<p> Enjoy! </p>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2011/01/emacs-bbdb-and-getting-your-contacts-on-the-android-or-iphone/\">Emacs, BBDB, and getting your contacts on the Android or iPhone</a> (Sacha Chua's blog)</p>" "http://sachachua.com/blog/2011/01/emacs-bbdb-and-getting-your-contacts-on-the-android-or-iphone/" (19751 3664) old 21 nil nil ((title ((type . "html") (xml:lang . "en")) "sachachua: Emacs, BBDB, and getting your contacts on the Android or iPhone") (link ((href . "http://sachachua.com/blog/2011/01/emacs-bbdb-and-getting-your-contacts-on-the-android-or-iphone/"))) (id nil "http://sachachua.com/blog/?p=22034") (updated nil "2011-01-07T13:00:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Want your Emacs BBDB contacts on your Android or iPhone? </p>
<p> The easiest way I’ve found is to export your contacts to CSV, then import them into something like Google Contacts. You can export your BBDB contacts using <code>bbdb-to-outlook.el</code>, which is available in the BBDB package in the <code>bits/</code> directory. <a href=\"http://bbdb.cvs.sourceforge.net/viewvc/bbdb/bbdb/bits/bbdb-to-outlook.el\">Download bbdb-to-outlook.el from Sourceforge</a>  if you can’t find it in your BBDB directory. To use: </p>
<ol>
<li> Load bbdb-to-outlook.el and use <code>M-x eval-buffer</code> to load the code. </li>
<li> Use <code>M-x bbdb</code> to open your BBDB records, and search for <code>.</code> to show all the records. Alternatively, search for a subset of your records. </li>
<li> Type <code>O</code> to run <code>bbdb-to-outlook</code> and choose the file. </li>
</ol>
<p> Tada! Step one done. Review the file and delete anything you don’t want to include. </p>
<p> To import the contacts into Google Contacts, go to Google Mail and click on Contacts. Click on <code>Import</code> and choose your file. After some time and some fiddling, you can get that synchronized onto your Android or iPhone. </p>
<p> I haven’t thought about syncing, but I’m trying to keep my BBDB as The Master File for Contacts anyway, as it’s so much more flexible than any other contact database I’ve tried. (Although gist.com is pretty cool and I do like the Android’s merging of photos, contact info, and updates…) </p>
<p> There was some work on <a href=\"http://www.emacswiki.org/emacs/BbdbExportImportSync\">synchronizing BBDB with the Palm</a>, so that might be a possibility. </p>
<p> Enjoy! </p>
<p>Read the original or check out the comments on: <a href=\"http://sachachua.com/blog/2011/01/emacs-bbdb-and-getting-your-contacts-on-the-android-or-iphone/\">Emacs, BBDB, and getting your contacts on the Android or iPhone</a> (Sacha Chua's blog)</p>") (author nil (name nil "Sacha Chua") (uri nil "http://sachachua.com/blog")) (source nil (title ((type . "html")) "sacha chua :: living an awesome life » emacs") (subtitle ((type . "html")) "I help organizations and people learn how to connect and collaborate more effectively using Web 2.0 tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/pimpmyemacs"))) (id nil "http://sachachua.com/blog")))) ("suso: Anuncio sobre la Ponencia de Emacs de Stallman" "<p>Doy por finalizada la fase alfa de la traducción de la ponencia sobre<br />
Emacs<sup class=\"glossary-indicator\" title=\"EL Único Editor Verdadero\"><a class=\"glossary-indicator\" href=\"http://gnu.manticore.es/glossary/6/lettere#term46\" title=\"EL Único Editor Verdadero\">i</a></sup> enviada por Richard Stallman a la ACM en 1981.</p>
<p>Como ya se sabe, se trata de un histórico pero vigente documento que<br />
explica la filosofía del desarrollo de Emacs.</p>
<p>----------</p>
<p>Elimino las galeradas de texto intermedias y las genero en HTML<br />
provisional de muestra. Recuérdese, son <strong>galeradas</strong>.<br />
<em>El material aún no está listo para distribución</em>, pero se puede<br />
consultar.</p>
<p>Fase \"alfa\" significa que aún hay que hacerle los pases de traducción</p>
<p><a href=\"http://gnu.manticore.es/node/1668\" target=\"_blank\">leer más</a></p>" "http://gnu.manticore.es/node/1668" (19749 60755) old 22 nil nil ((title ((type . "html") (xml:lang . "es")) "suso: Anuncio sobre la Ponencia de Emacs de Stallman") (link ((href . "http://gnu.manticore.es/node/1668"))) (id nil "http://gnu.manticore.es/1668 at http://gnu.manticore.es") (updated nil "2011-01-06T16:26:59+00:00") (content ((type . "html")) "<p>Doy por finalizada la fase alfa de la traducción de la ponencia sobre<br />
Emacs<sup class=\"glossary-indicator\" title=\"EL Único Editor Verdadero\"><a class=\"glossary-indicator\" href=\"http://gnu.manticore.es/glossary/6/lettere#term46\" title=\"EL Único Editor Verdadero\">i</a></sup> enviada por Richard Stallman a la ACM en 1981.</p>
<p>Como ya se sabe, se trata de un histórico pero vigente documento que<br />
explica la filosofía del desarrollo de Emacs.</p>
<p>----------</p>
<p>Elimino las galeradas de texto intermedias y las genero en HTML<br />
provisional de muestra. Recuérdese, son <strong>galeradas</strong>.<br />
<em>El material aún no está listo para distribución</em>, pero se puede<br />
consultar.</p>
<p>Fase \"alfa\" significa que aún hay que hacerle los pases de traducción</p>
 <p><a href=\"http://gnu.manticore.es/node/1668\" target=\"_blank\">leer más</a></p>") (author nil (name nil "admin") (uri nil "http://gnu.manticore.es/taxonomy/term/1/0")) (source nil (title ((type . "html")) "GNU + Emacs en español para usuarios finales - Emacs") (link ((rel . "self") (href . "http://gnu.manticore.es/taxonomy/term/1/0/feed"))) (id nil "http://gnu.manticore.es/taxonomy/term/1/0")))) ("Emacs-fu: setting the frame title" "<div class=\"outline-2\" id=\"outline-container-1\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
The 'frame title' (window title) that emacs uses in graphical environments
defaults to something like <code>emacs@hostname</code>.
</p>
<p>
Of course emacs lets us customize this, by changing the value of
<code>frame-title-format</code>. Emacs accepts many different things there, (see the
documentation for <code>frame-title-format</code> and <code>mode-line-format</code> for that), but
let's look at an example.
</p>
<p>
Instead of the default <code>emacs@hostname</code>, I find it more useful to include the
name of the file I'm working on instead, or, in case of non-file buffers, the
buffer name. To do this, I have something like the following in my <code>.emacs</code>:
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> frame-title-format
'(<span class=\"org-string\">\"\"</span> invocation-name <span class=\"org-string\">\": \"</span>(<span class=\"org-builtin\">:eval</span> (<span class=\"org-keyword\">if</span> (buffer-file-name)
(abbreviate-file-name (buffer-file-name))
<span class=\"org-string\">\"%b\"</span>))))
</pre>
<p>
As you see, <code>frame-title-format</code> is a template for the items that are present
in the title bar; i.e.. emacs concatenates the items in the list, and it
supports various <code>%</code>-constructs, which are replaced with actual values; see
below.
</p>
<p>
In addition to the <code>%</code>-constructs, you can use <code>:eval</code> to make emacs evaluate
the expression whenever it wants to update the title bar.
</p>
<p>
<code>invocation-name</code> is the name of the emacs binary.
</p>
<p>
<code>abbreviate-file-name</code> replaces the home directory part in file names with
<code>~</code>; for very deep paths it might be nice to do some abbreviation as well as
some shells do; this is left as an exercise to the reader :)
</p>
<p>
You can experiment with some other things to put in <code>frame-title-format</code>;
use the <code>:eval</code> construct as above to use emacs-lisp functions, and the
various <code>%</code>-specifiers which are replaced by certain values; the emacs
documentation lists the following:
</p>
<pre class=\"src src-text\">%b -- print buffer name.      %f -- print visited file name.
%F -- print frame name.
%* -- print %, * or hyphen.   %+ -- print *, % or hyphen.
%&amp; is like %*, but ignore read-only-ness.
% means buffer is read-only and * means it is modified.
For a modified read-only buffer, %* gives % and %+ gives *.
%s -- print process status.
%i -- print the size of the buffer.
%I -- like %i, but use k, M, G, etc., to abbreviate.
%p -- print percent of buffer above top of window, or Top, Bot or All.
%P -- print percent of buffer above bottom of window, perhaps plus Top,
or print Bottom or All.
%n -- print Narrow if appropriate.
%t -- visited file is text or binary (if OS supports this distinction).
%z -- print mnemonics of keyboard, terminal, and buffer coding systems.
%Z -- like %z, but including the end-of-line format.
%e -- print error message about full memory.
%@ -- print @ or hyphen.  @ means that default-directory is on a
remote machine.
%[ -- print one [ for each recursive editing level.  %] similar.
%% -- print %.   %- -- print infinitely many dashes.
Decimal digits after the % specify field width to which to pad.
</pre>
<p>
So, if we'd like to include the host (system) name and some indication of the
status of this buffer, we could do something like:
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> frame-title-format
'(<span class=\"org-string\">\"emacs%@\"</span> (<span class=\"org-builtin\">:eval</span> (system-name)) <span class=\"org-string\">\": \"</span> (<span class=\"org-builtin\">:eval</span> (<span class=\"org-keyword\">if</span> (buffer-file-name)
(abbreviate-file-name (buffer-file-name))
<span class=\"org-string\">\"%b\"</span>)) <span class=\"org-string\">\" [%*]\"</span>))
</pre>
<p>
Of course, some of the information is available elsewhere already, but it
might be clearer in the frame-title. Or not – there's a lot of room for
tweaking and experimentation here.
</p></div>
</div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3992530807750384868-7583600805500387232?l=emacs-fu.blogspot.com\" width=\"1\" /></div>" "http://emacs-fu.blogspot.com/2011/01/setting-frame-title.html" (19749 58408) old 23 nil nil ((title ((type . "html")) "Emacs-fu: setting the frame title") (link ((href . "http://emacs-fu.blogspot.com/2011/01/setting-frame-title.html"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-7583600805500387232") (updated nil "2011-01-06T15:47:52+00:00") (content ((type . "html")) "<div class=\"outline-2\" id=\"outline-container-1\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
The 'frame title' (window title) that emacs uses in graphical environments
defaults to something like <code>emacs@hostname</code>. 
</p>
<p>
Of course emacs lets us customize this, by changing the value of
<code>frame-title-format</code>. Emacs accepts many different things there, (see the
documentation for <code>frame-title-format</code> and <code>mode-line-format</code> for that), but
let's look at an example.
</p>
<p>
Instead of the default <code>emacs@hostname</code>, I find it more useful to include the
name of the file I'm working on instead, or, in case of non-file buffers, the
buffer name. To do this, I have something like the following in my <code>.emacs</code>:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> frame-title-format
  '(<span class=\"org-string\">\"\"</span> invocation-name <span class=\"org-string\">\": \"</span>(<span class=\"org-builtin\">:eval</span> (<span class=\"org-keyword\">if</span> (buffer-file-name)
                (abbreviate-file-name (buffer-file-name))
                  <span class=\"org-string\">\"%b\"</span>))))
</pre>



<p>
As you see, <code>frame-title-format</code> is a template for the items that are present
in the title bar; i.e.. emacs concatenates the items in the list, and it
supports various <code>%</code>-constructs, which are replaced with actual values; see
below.
</p>
<p>
In addition to the <code>%</code>-constructs, you can use <code>:eval</code> to make emacs evaluate
the expression whenever it wants to update the title bar.
</p>
<p>
<code>invocation-name</code> is the name of the emacs binary.
</p>
<p>
<code>abbreviate-file-name</code> replaces the home directory part in file names with
<code>~</code>; for very deep paths it might be nice to do some abbreviation as well as
some shells do; this is left as an exercise to the reader :)
</p>
<p>
You can experiment with some other things to put in <code>frame-title-format</code>;
use the <code>:eval</code> construct as above to use emacs-lisp functions, and the
various <code>%</code>-specifiers which are replaced by certain values; the emacs
documentation lists the following:
</p>



<pre class=\"src src-text\">%b -- print buffer name.      %f -- print visited file name.
%F -- print frame name.
%* -- print %, * or hyphen.   %+ -- print *, % or hyphen.
      %&amp; is like %*, but ignore read-only-ness.
      % means buffer is read-only and * means it is modified.
      For a modified read-only buffer, %* gives % and %+ gives *.
%s -- print process status.
%i -- print the size of the buffer.
%I -- like %i, but use k, M, G, etc., to abbreviate.
%p -- print percent of buffer above top of window, or Top, Bot or All.
%P -- print percent of buffer above bottom of window, perhaps plus Top,
      or print Bottom or All.
%n -- print Narrow if appropriate.
%t -- visited file is text or binary (if OS supports this distinction).
%z -- print mnemonics of keyboard, terminal, and buffer coding systems.
%Z -- like %z, but including the end-of-line format.
%e -- print error message about full memory.
%@ -- print @ or hyphen.  @ means that default-directory is on a
      remote machine.
%[ -- print one [ for each recursive editing level.  %] similar.
%% -- print %.   %- -- print infinitely many dashes.
Decimal digits after the % specify field width to which to pad.
</pre>



<p>
So, if we'd like to include the host (system) name and some indication of the
status of this buffer, we could do something like:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> frame-title-format
  '(<span class=\"org-string\">\"emacs%@\"</span> (<span class=\"org-builtin\">:eval</span> (system-name)) <span class=\"org-string\">\": \"</span> (<span class=\"org-builtin\">:eval</span> (<span class=\"org-keyword\">if</span> (buffer-file-name)
                (abbreviate-file-name (buffer-file-name))
                  <span class=\"org-string\">\"%b\"</span>)) <span class=\"org-string\">\" [%*]\"</span>))
</pre>



<p>
Of course, some of the information is available elsewhere already, but it
might be clearer in the frame-title. Or not – there's a lot of room for
tweaking and experimentation here.
</p></div>
</div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3992530807750384868-7583600805500387232?l=emacs-fu.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "djcb") (email nil "noreply@blogger.com") (uri nil "http://emacs-fu.blogspot.com/search/label/new")) (source nil (title ((type . "html")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/-/new"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868")))) ("Phil Hagelberg: in which the author sighs and realizes he publishes very few posts which do not contain the word package" "<p>As someone who maintains a fair amount of Emacs libraries, I've
long been in search of improvements to the release process. I've
<a href=\"http://technomancy.us/133\">lobbied for including package.el in
Emacs itself</a>, which finally happened over the summer. But
political concerns interfered a bit, and it is only configured
to point
to <a href=\"http://elpa.gnu.org/packages/archive-contents\">the
FSF package repository</a> out of the box. This repository only
accepts code for which copyright has been granted to the Free
Software Foundation. At the time of this writing it has only six
packages in it compared to ELPA's 130, making it somewhat less
useful than it could be. For a number of
reasons[<a href=\"http://technomancy.us#fn1\">1</a>] the copyright assignment policy
doesn't work for the packages I maintain, so this was a bit
disappointing to me.</p>
<img align=\"right\" alt=\"some corn or something, I dunno man. unrelated.\" src=\"http://technomancy.us/i/corn.jpg\" title=\"some corn or something, I dunno man. unrelated.\" />
<p>On the other hand, I was able to add support for multiple package
sources to package.el before it was included in Emacs. This allows
users to add alternate third-party sources like the
original <a href=\"http://tromey.com/elpa\">ELPA</a> repository. I
should note here that there's been some confusion regarding the
difference between package.el and ELPA which I must admit to
having helped spread at one point. To be precise, package.el is
the package manager, while ELPA is the original package source
from which most packages so far have been hosted. The term \"ELPA\"
is often mistakenly used to refer to package.el because for a long
time package.el was hard-coded to only download from ELPA, but now
that it supports multiple sources it's important to make a
distinction between them.</p>
<p>Unfortunately ELPA is still manually curated with package
submission over email, so it can take weeks or even months for new
versions of my libraries to become available. I've started my own
package source
at <a href=\"http://repo.technomancy.us/emacs\">http://repo.technomancy.us/emacs</a>,
but it turns out maintaining a package source consisting of a
bunch of static files is not a lot of fun and can be error
prone. Luckily Nathan Wizenbaum has cooked
up <a href=\"http://marmalade-repo.org\">Marmalade</a>, a community
package source that allows users to upload their own packages much
like <a href=\"http://clojars.org\">Clojars</a>
or <a href=\"http://rubygems.org\">Rubygems.org</a>. While it hasn't
seen much use yet, it's quite promising as a way for elisp authors
to get their code out to users. The following snippet will add
Marmalade as a repository:</p>
<pre class=\"code\">(<span class=\"keyword\">require</span> '<span class=\"constant\">package</span>)
(add-to-list 'package-archives
'(<span class=\"string\">\"marmalade\"</span> .
<span class=\"string\">\"http://marmalade-repo.org/packages/\"</span>) t) </pre>
<p>If you are using Emacs 23 you
can <a href=\"http://bit.ly/pkg-el\">download package.el from Emacs
trunk</a>. The version from tromey.com doesn't support multiple
archive sources.</p>
<p>Moving forward I'm planning on uploading the packages I maintain
over to Marmalade. It offers a much faster turnaround time
for updates than the old system of submitting by email to
ELPA. I've already uploaded my Clojure libraries and am working
on a version of
the <a href=\"http://github.com/technomancy/emacs-starter-kit\">Emacs
Starter Kit</a> that is structured as a set of packages in order
to be more modular. (The new Starter Kit only targets Emacs 24 and
up, so at this point it's intended for the adventurous.) Happy hacking!</p>
<hr />
<p>[<a name=\"fn1\">1</a>] The main reason being that I could never
bring myself to answer the question \"can you apply this patch?\"
with \"well that depends, <a href=\"http://achewood.com/index.php?date=11222006\">do you have a fax machine</a>?\".</p>" "http://technomancy.us/144" (19748 13667) old 24 nil nil ((title ((type . "html") (xml:lang . "en-US")) "Phil Hagelberg: in which the author sighs and realizes he publishes very few posts which do not contain the word package") (link ((href . "http://technomancy.us/144"))) (id nil "tag:technomancy.us,2007:in%20which%20the%20author%20sighs%20and%20realizes%20he%20publishes%20very%20few%20posts%20which%20do%20not%20contain%20the%20word%20package") (updated nil "2011-01-05T09:09:55+00:00") (content ((type . "html") (xml:lang . "en-US")) "<p>As someone who maintains a fair amount of Emacs libraries, I've
  long been in search of improvements to the release process. I've
  <a href=\"http://technomancy.us/133\">lobbied for including package.el in
    Emacs itself</a>, which finally happened over the summer. But
    political concerns interfered a bit, and it is only configured
    to point
    to <a href=\"http://elpa.gnu.org/packages/archive-contents\">the
    FSF package repository</a> out of the box. This repository only
    accepts code for which copyright has been granted to the Free
    Software Foundation. At the time of this writing it has only six
    packages in it compared to ELPA's 130, making it somewhat less
    useful than it could be. For a number of
    reasons[<a href=\"http://technomancy.us#fn1\">1</a>] the copyright assignment policy
    doesn't work for the packages I maintain, so this was a bit
    disappointing to me.</p>

<img align=\"right\" alt=\"some corn or something, I dunno man. unrelated.\" src=\"http://technomancy.us/i/corn.jpg\" title=\"some corn or something, I dunno man. unrelated.\" />

<p>On the other hand, I was able to add support for multiple package
  sources to package.el before it was included in Emacs. This allows
  users to add alternate third-party sources like the
  original <a href=\"http://tromey.com/elpa\">ELPA</a> repository. I
  should note here that there's been some confusion regarding the
  difference between package.el and ELPA which I must admit to
  having helped spread at one point. To be precise, package.el is
  the package manager, while ELPA is the original package source
  from which most packages so far have been hosted. The term \"ELPA\"
  is often mistakenly used to refer to package.el because for a long
  time package.el was hard-coded to only download from ELPA, but now
  that it supports multiple sources it's important to make a
  distinction between them.</p>

<p>Unfortunately ELPA is still manually curated with package
  submission over email, so it can take weeks or even months for new
  versions of my libraries to become available. I've started my own
  package source
  at <a href=\"http://repo.technomancy.us/emacs\">http://repo.technomancy.us/emacs</a>,
  but it turns out maintaining a package source consisting of a
  bunch of static files is not a lot of fun and can be error
  prone. Luckily Nathan Wizenbaum has cooked
  up <a href=\"http://marmalade-repo.org\">Marmalade</a>, a community
  package source that allows users to upload their own packages much
  like <a href=\"http://clojars.org\">Clojars</a>
  or <a href=\"http://rubygems.org\">Rubygems.org</a>. While it hasn't
  seen much use yet, it's quite promising as a way for elisp authors
  to get their code out to users. The following snippet will add
  Marmalade as a repository:</p>

<pre class=\"code\">(<span class=\"keyword\">require</span> '<span class=\"constant\">package</span>)
(add-to-list 'package-archives
             '(<span class=\"string\">\"marmalade\"</span> . 
               <span class=\"string\">\"http://marmalade-repo.org/packages/\"</span>) t) </pre>

<p>If you are using Emacs 23 you
  can <a href=\"http://bit.ly/pkg-el\">download package.el from Emacs
  trunk</a>. The version from tromey.com doesn't support multiple
  archive sources.</p>

<p>Moving forward I'm planning on uploading the packages I maintain
  over to Marmalade. It offers a much faster turnaround time
  for updates than the old system of submitting by email to
  ELPA. I've already uploaded my Clojure libraries and am working
  on a version of
  the <a href=\"http://github.com/technomancy/emacs-starter-kit\">Emacs
  Starter Kit</a> that is structured as a set of packages in order
  to be more modular. (The new Starter Kit only targets Emacs 24 and
  up, so at this point it's intended for the adventurous.) Happy hacking!</p>



<hr />

<p>[<a name=\"fn1\">1</a>] The main reason being that I could never
  bring myself to answer the question \"can you apply this patch?\"
  with \"well that depends, <a href=\"http://achewood.com/index.php?date=11222006\">do you have a fax machine</a>?\".</p>") (author nil (name nil "Phil Hagelberg") (uri nil "http://technomancy.us/")) (source nil (title ((type . "html")) "Technomancy") (link ((rel . "self") (href . "http://technomancy.us/feed/atom"))) (id nil "tag:technomancy.us,2007:blog/")))) ("Vinh Nguyen: Add one to a number using Emacs’ regexp" "<div class=\"topsy_widget_data topsy_theme_jade\" style=\"float: right; margin-left: 0.75em;\"></div>
<p>I recently had to add one to all numbers of the form <code>\"n\"</code> where <code>n</code> is a number in a text file.  Thanks to <code>jlf</code> on <code>#emacs</code>, I could do so with the the command <code>replace-regexp</code> to change <code>\\\"\\([0-9]+\\)\\\"</code> to <code>\"\\,(1+ \\#1)\"</code>.  I’m never going to remember this so I’m writing it down now.</p>" "http://blog.nguyenvq.com/2011/01/04/add-one-to-a-number-using-emacs-regexp/" (19747 27781) old 25 nil nil ((title ((type . "html") (xml:lang . "en")) "Vinh Nguyen: Add one to a number using Emacs’ regexp") (link ((href . "http://blog.nguyenvq.com/2011/01/04/add-one-to-a-number-using-emacs-regexp/"))) (id nil "http://blog.nguyenvq.com/?p=846") (updated nil "2011-01-04T18:52:53+00:00") (content ((type . "html") (xml:lang . "en")) "<div class=\"topsy_widget_data topsy_theme_jade\" style=\"float: right; margin-left: 0.75em;\"></div>
<p>I recently had to add one to all numbers of the form <code>\"n\"</code> where <code>n</code> is a number in a text file.  Thanks to <code>jlf</code> on <code>#emacs</code>, I could do so with the the command <code>replace-regexp</code> to change <code>\\\"\\([0-9]+\\)\\\"</code> to <code>\"\\,(1+ \\#1)\"</code>.  I’m never going to remember this so I’m writing it down now.</p>") (author nil (name nil "Vinh Nguyen") (uri nil "http://blog.nguyenvq.com")) (source nil (title ((type . "html")) "Super Nerdy Cool » emacs") (subtitle ((type . "html")) "My (technical) adventures through the professional world...") (link ((rel . "self") (href . "http://blog.nguyenvq.com/category/emacs/feed/"))) (id nil "http://blog.nguyenvq.com")))) ("M-x all-things-emacs: How I Work: Working with OS X and Emacs" "<p><a href=\"http://how-i-work.com/workbenches/30-working-with-os-x-and-emacs\"><img alt=\"\" src=\"http://emacsblog.org/wp-content/uploads/2011/01/working-with-osx-emacs.png\" title=\"\" /></a></p>
<p>I’m being featured this week on a new site called <a href=\"http://how-i-work.com\">How I Work</a>.  The site is about letting developers watch screencasts to see how other people work and improve their productivity by learning about new tools and practices.  Given the interest in how focused work in an all inclusive environment can help productivity, they contacted me about putting up a <a href=\"http://how-i-work.com/workbenches/30-working-with-os-x-and-emacs\">workbench on how I use Emacs</a> and how it fits into my overall OS X workflow.</p>
<p>Please <a href=\"http://how-i-work.com/workbenches/30-working-with-os-x-and-emacs\">check it out</a> and vote up my video so other people learn about <a href=\"http://ryan.mcgeary.org\">me</a>, <a href=\"http://mcgearygroup.com\">McGeary Consulting Group</a>, and our favorite editor.</p>" "http://emacsblog.org/2011/01/04/how-i-work-working-with-os-x-and-emacs/" (19747 21546) old 26 nil nil ((title ((type . "html") (xml:lang . "en")) "M-x all-things-emacs: How I Work: Working with OS X and Emacs") (link ((href . "http://emacsblog.org/2011/01/04/how-i-work-working-with-os-x-and-emacs/"))) (id nil "http://emacsblog.org/?p=259") (updated nil "2011-01-04T17:08:58+00:00") (content ((type . "html") (xml:lang . "en")) "<p><a href=\"http://how-i-work.com/workbenches/30-working-with-os-x-and-emacs\"><img alt=\"\" src=\"http://emacsblog.org/wp-content/uploads/2011/01/working-with-osx-emacs.png\" title=\"\" /></a></p>

	<p>I’m being featured this week on a new site called <a href=\"http://how-i-work.com\">How I Work</a>.  The site is about letting developers watch screencasts to see how other people work and improve their productivity by learning about new tools and practices.  Given the interest in how focused work in an all inclusive environment can help productivity, they contacted me about putting up a <a href=\"http://how-i-work.com/workbenches/30-working-with-os-x-and-emacs\">workbench on how I use Emacs</a> and how it fits into my overall OS X workflow.</p>

	<p>Please <a href=\"http://how-i-work.com/workbenches/30-working-with-os-x-and-emacs\">check it out</a> and vote up my video so other people learn about <a href=\"http://ryan.mcgeary.org\">me</a>, <a href=\"http://mcgearygroup.com\">McGeary Consulting Group</a>, and our favorite editor.</p>") (author nil (name nil "Ryan McGeary") (uri nil "http://emacsblog.org")) (source nil (title ((type . "html")) "M-x all-things-emacs") (subtitle ((type . "html")) "EmacsBlog.org") (link ((rel . "self") (href . "http://emacsblog.org/feed/"))) (id nil "http://emacsblog.org")))) ("Jason McBrayer: Todochiku notifications in identica-mode" "<p>Just a quick response to <a href=\"http://blog.nethazard.net/emacs-identica-mode-notifications/\">Gabriel Saldaña's recent post</a> on
identica-mode notifications: the code for using todochiku for
identica-mode notifications is as follows:</p>
<div class=\"codeblock\">
<pre>(add-hook \\'identica-new-dents-hook
(lambda nil
(let ((n identica-new-dents-count))
(todochiku-message \\\"Emacs Identica-mode New dents\\\"
(format \\\"You have %d new dent%s.\\\" n (if (&gt; n 1) \\\"s\\\" \\\"\\\"))
(todochiku-icon \\'social)))))
</pre>
</div>
<p>The advantage of using todochiku here is that you can let it handle
talking to different notification systems (KDE vs. Gnome vs.Growl on
MacOS vs Snarl on MS Windows), and have the same configuration
everywhere.</p>" "http://www.carcosa.net/jason/blog/computing/identica-mode-notification-2011-01-04-12-00" (19747 21008) old 27 nil nil ((title ((type . "html") (xml:lang . "en")) "Jason McBrayer: Todochiku notifications in identica-mode") (link ((href . "http://www.carcosa.net/jason/blog/computing/identica-mode-notification-2011-01-04-12-00"))) (id nil "http://www.carcosa.net/jason/blog/computing/computing/identica-mode-notification-2011-01-04-12-00") (updated nil "2011-01-04T17:00:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Just a quick response to <a href=\"http://blog.nethazard.net/emacs-identica-mode-notifications/\">Gabriel Saldaña's recent post</a> on
identica-mode notifications: the code for using todochiku for
identica-mode notifications is as follows:</p>

<div class=\"codeblock\">
<pre>(add-hook \\'identica-new-dents-hook
  (lambda nil
    (let ((n identica-new-dents-count))
      (todochiku-message \\\"Emacs Identica-mode New dents\\\"
                         (format \\\"You have %d new dent%s.\\\" n (if (&gt; n 1) \\\"s\\\" \\\"\\\"))
                         (todochiku-icon \\'social)))))
</pre>
</div>

<p>The advantage of using todochiku here is that you can let it handle
talking to different notification systems (KDE vs. Gnome vs.Growl on
MacOS vs Snarl on MS Windows), and have the same configuration
everywhere.</p>") (author nil (name nil "Jason F. McBrayer") (uri nil "http://www.carcosa.net/jason/blog")) (source nil (title ((type . "html")) "Prosthetic Conscience") (subtitle ((type . "html")) "Jason McBrayer's weblog; occasional personal notes and commentary") (link ((rel . "self") (href . "http://www.carcosa.net/jason/blog/computing/index.rss2"))) (id nil "http://www.carcosa.net/jason/blog")))) ("Gabriel Saldaña: Emacs Identica-mode notifications" "<p>There’s a feature on <a href=\"http://blog.nethazard.net/identica-mode-for-emacs#utm_source=feed&amp;utm_medium=feed&amp;utm_campaign=feed\">Emacs identica-mode</a> that I haven’t documented or written about before and its been there for quite some time.</p>
<p>Its very nice to have notifications when you get new updates on your timeline. I’ve seen it on other clients like TweetDeck. So I made a hook for Emacs to execute some code after it has fetched new dents. With this you can call any notification system to show a message of the new dents.</p>
<p>Here’s the code I’ve been using to show new notice count on KDE4 notification system (similar code can be used for Gnome’s notification system):</p>
<p></p><pre>;; KDE 4 Notification of new dents
(add-hook 'identica-new-dents-hook (lambda ()
(let ((n identica-new-dents-count))
(start-process \"identica-notify\" nil \"kdialog\"
\"--title\"
\"Emacs Identica-mode New dents\"
\"--passivepopup\"
(format \"You have %d new dent%s\"
n (if (&gt; n 1) \"s\" \"\"))
\"3\"
))))
</pre><p></p>
<p><img alt=\"Emacs Identica-mode notifications\" class=\"alignnone size-medium wp-image-735\" height=\"225\" src=\"http://blog.nethazard.net/wp-content/uploads/2011/01/identicamode-notifications-300x225.jpg\" title=\"identicamode-notifications\" width=\"300\" /></p>
<p>I haven’t tried to do the same in Mac OS with Growl but I guess its also possible. If someone has the code for that, please share it in the comments. You can also use <a href=\"http://www.emacswiki.org/emacs/ToDoChiKu\">ToDoChiKu</a> as a universal notification system.</p>
<p><strong>Update</strong> Jason McBrayer has <a href=\"http://www.carcosa.net/jason/blog/computing/identica-mode-notification-2011-01-04-12-00\">posted the elisp code to use identica-mode with ToDoChiKu</a> on his blog.</p>
<p>I hope you like this hook feature and please let me know other ways to use the hook, or if any other hook is usefull to have.</p>
<div class=\"sociable\">
<div class=\"sociable_tagline\">
<strong>Share:</strong>
</div>
<ul>
<li class=\"sociablefirst\"><a href=\"http://digg.com/submit?phase=2&amp;url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications&amp;bodytext=There%27s%20a%20feature%20on%20Emacs%20identica-mode%20that%20I%20haven%27t%20documented%20or%20written%20about%20before%20and%20its%20been%20there%20for%20quite%20some%20time.%0D%0A%0D%0AIts%20very%20nice%20to%20have%20notifications%20when%20you%20get%20new%20updates%20on%20your%20timeline.%20I%27ve%20seen%20it%20on%20other%20clients%20like%20Tw\" rel=\"nofollow\" target=\"_blank\" title=\"Digg\"><img alt=\"Digg\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/digg.png\" title=\"Digg\" /></a></li>
<li><a href=\"http://delicious.com/post?url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications&amp;notes=There%27s%20a%20feature%20on%20Emacs%20identica-mode%20that%20I%20haven%27t%20documented%20or%20written%20about%20before%20and%20its%20been%20there%20for%20quite%20some%20time.%0D%0A%0D%0AIts%20very%20nice%20to%20have%20notifications%20when%20you%20get%20new%20updates%20on%20your%20timeline.%20I%27ve%20seen%20it%20on%20other%20clients%20like%20Tw\" rel=\"nofollow\" target=\"_blank\" title=\"del.icio.us\"><img alt=\"del.icio.us\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/delicious.png\" title=\"del.icio.us\" /></a></li>
<li><a href=\"http://technorati.com/faves?add=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Technorati\"><img alt=\"Technorati\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/technorati.png\" title=\"Technorati\" /></a></li>
<li><a href=\"http://reddit.com/submit?url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications\" rel=\"nofollow\" target=\"_blank\" title=\"Reddit\"><img alt=\"Reddit\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/reddit.png\" title=\"Reddit\" /></a></li>
<li><a href=\"http://www.stumbleupon.com/submit?url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications\" rel=\"nofollow\" target=\"_blank\" title=\"StumbleUpon\"><img alt=\"StumbleUpon\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/stumbleupon.png\" title=\"StumbleUpon\" /></a></li>
<li><a href=\"http://www.facebook.com/share.php?u=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;t=Emacs%20Identica-mode%20notifications\" rel=\"nofollow\" target=\"_blank\" title=\"Facebook\"><img alt=\"Facebook\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/facebook.png\" title=\"Facebook\" /></a></li>
<li><a href=\"http://meneame.net/submit.php?url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Meneame\"><img alt=\"Meneame\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/meneame.png\" title=\"Meneame\" /></a></li>
<li><a href=\"http://www.friendfeed.com/share?title=Emacs%20Identica-mode%20notifications&amp;link=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"FriendFeed\"><img alt=\"FriendFeed\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/friendfeed.png\" title=\"FriendFeed\" /></a></li>
<li><a href=\"http://identi.ca/notice/new?status_textarea=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Identi.ca\"><img alt=\"Identi.ca\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/identica.png\" title=\"Identi.ca\" /></a></li>
<li><a href=\"http://twitter.com/home?status=Emacs%20Identica-mode%20notifications%20-%20http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Twitter\"><img alt=\"Twitter\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/twitter.png\" title=\"Twitter\" /></a></li>
<li class=\"sociablelast\"><a href=\"http://www.google.com/bookmarks/mark?op=edit&amp;bkmk=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications&amp;annotation=There%27s%20a%20feature%20on%20Emacs%20identica-mode%20that%20I%20haven%27t%20documented%20or%20written%20about%20before%20and%20its%20been%20there%20for%20quite%20some%20time.%0D%0A%0D%0AIts%20very%20nice%20to%20have%20notifications%20when%20you%20get%20new%20updates%20on%20your%20timeline.%20I%27ve%20seen%20it%20on%20other%20clients%20like%20Tw\" rel=\"nofollow\" target=\"_blank\" title=\"Google Bookmarks\"><img alt=\"Google Bookmarks\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/googlebookmark.png\" title=\"Google Bookmarks\" /></a></li>
</ul>
</div>
<img alt=\"\" src=\"http://blog.nethazard.net/?ak_action=api_record_view&amp;id=734&amp;type=feed\" />
<p>Related posts:</p><ol><li><a href=\"http://blog.nethazard.net/emacs-identica-mode-with-replies-highlighting/\" rel=\"bookmark\" title=\"Permanent Link: Emacs identica-mode with replies highlighting\">Emacs identica-mode with replies highlighting</a></li>
<li><a href=\"http://blog.nethazard.net/emacs-identica-mode-version-0-7/\" rel=\"bookmark\" title=\"Permanent Link: Emacs identica-mode version 0.7\">Emacs identica-mode version 0.7</a></li>
<li><a href=\"http://blog.nethazard.net/identica-mode-for-emacs-update-support-for-any-laconica-server/\" rel=\"bookmark\" title=\"Permanent Link: Identica mode for Emacs update: support for any Laconica server\">Identica mode for Emacs update: support for any Laconica server</a></li>
</ol><p></p>" "http://blog.nethazard.net/emacs-identica-mode-notifications/#utm_source=feed&utm_medium=feed&utm_campaign=feed" (19744 61150) old 28 nil nil ((title ((type . "html") (xml:lang . "en")) "Gabriel Saldaña: Emacs Identica-mode notifications") (link ((href . "http://blog.nethazard.net/emacs-identica-mode-notifications/#utm_source=feed&utm_medium=feed&utm_campaign=feed"))) (id nil "http://blog.nethazard.net/?p=734") (updated nil "2011-01-02T21:32:14+00:00") (content ((type . "html") (xml:lang . "en")) "<p>There’s a feature on <a href=\"http://blog.nethazard.net/identica-mode-for-emacs#utm_source=feed&amp;utm_medium=feed&amp;utm_campaign=feed\">Emacs identica-mode</a> that I haven’t documented or written about before and its been there for quite some time.</p>

<p>Its very nice to have notifications when you get new updates on your timeline. I’ve seen it on other clients like TweetDeck. So I made a hook for Emacs to execute some code after it has fetched new dents. With this you can call any notification system to show a message of the new dents.</p>

<p>Here’s the code I’ve been using to show new notice count on KDE4 notification system (similar code can be used for Gnome’s notification system):</p>

<p></p><pre>;; KDE 4 Notification of new dents
(add-hook 'identica-new-dents-hook (lambda ()
   (let ((n identica-new-dents-count))
     (start-process \"identica-notify\" nil \"kdialog\"
            \"--title\"
            \"Emacs Identica-mode New dents\"
            \"--passivepopup\"
                    (format \"You have %d new dent%s\"
                            n (if (&gt; n 1) \"s\" \"\"))
            \"3\"
))))
</pre><p></p>

<p><img alt=\"Emacs Identica-mode notifications\" class=\"alignnone size-medium wp-image-735\" height=\"225\" src=\"http://blog.nethazard.net/wp-content/uploads/2011/01/identicamode-notifications-300x225.jpg\" title=\"identicamode-notifications\" width=\"300\" /></p>

<p>I haven’t tried to do the same in Mac OS with Growl but I guess its also possible. If someone has the code for that, please share it in the comments. You can also use <a href=\"http://www.emacswiki.org/emacs/ToDoChiKu\">ToDoChiKu</a> as a universal notification system.</p>

<p><strong>Update</strong> Jason McBrayer has <a href=\"http://www.carcosa.net/jason/blog/computing/identica-mode-notification-2011-01-04-12-00\">posted the elisp code to use identica-mode with ToDoChiKu</a> on his blog.</p>

<p>I hope you like this hook feature and please let me know other ways to use the hook, or if any other hook is usefull to have.</p>

<div class=\"sociable\">
<div class=\"sociable_tagline\">
<strong>Share:</strong>
</div>
<ul>
	<li class=\"sociablefirst\"><a href=\"http://digg.com/submit?phase=2&amp;url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications&amp;bodytext=There%27s%20a%20feature%20on%20Emacs%20identica-mode%20that%20I%20haven%27t%20documented%20or%20written%20about%20before%20and%20its%20been%20there%20for%20quite%20some%20time.%0D%0A%0D%0AIts%20very%20nice%20to%20have%20notifications%20when%20you%20get%20new%20updates%20on%20your%20timeline.%20I%27ve%20seen%20it%20on%20other%20clients%20like%20Tw\" rel=\"nofollow\" target=\"_blank\" title=\"Digg\"><img alt=\"Digg\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/digg.png\" title=\"Digg\" /></a></li>
	<li><a href=\"http://delicious.com/post?url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications&amp;notes=There%27s%20a%20feature%20on%20Emacs%20identica-mode%20that%20I%20haven%27t%20documented%20or%20written%20about%20before%20and%20its%20been%20there%20for%20quite%20some%20time.%0D%0A%0D%0AIts%20very%20nice%20to%20have%20notifications%20when%20you%20get%20new%20updates%20on%20your%20timeline.%20I%27ve%20seen%20it%20on%20other%20clients%20like%20Tw\" rel=\"nofollow\" target=\"_blank\" title=\"del.icio.us\"><img alt=\"del.icio.us\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/delicious.png\" title=\"del.icio.us\" /></a></li>
	<li><a href=\"http://technorati.com/faves?add=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Technorati\"><img alt=\"Technorati\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/technorati.png\" title=\"Technorati\" /></a></li>
	<li><a href=\"http://reddit.com/submit?url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications\" rel=\"nofollow\" target=\"_blank\" title=\"Reddit\"><img alt=\"Reddit\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/reddit.png\" title=\"Reddit\" /></a></li>
	<li><a href=\"http://www.stumbleupon.com/submit?url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications\" rel=\"nofollow\" target=\"_blank\" title=\"StumbleUpon\"><img alt=\"StumbleUpon\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/stumbleupon.png\" title=\"StumbleUpon\" /></a></li>
	<li><a href=\"http://www.facebook.com/share.php?u=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;t=Emacs%20Identica-mode%20notifications\" rel=\"nofollow\" target=\"_blank\" title=\"Facebook\"><img alt=\"Facebook\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/facebook.png\" title=\"Facebook\" /></a></li>
	<li><a href=\"http://meneame.net/submit.php?url=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Meneame\"><img alt=\"Meneame\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/meneame.png\" title=\"Meneame\" /></a></li>
	<li><a href=\"http://www.friendfeed.com/share?title=Emacs%20Identica-mode%20notifications&amp;link=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"FriendFeed\"><img alt=\"FriendFeed\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/friendfeed.png\" title=\"FriendFeed\" /></a></li>
	<li><a href=\"http://identi.ca/notice/new?status_textarea=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Identi.ca\"><img alt=\"Identi.ca\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/identica.png\" title=\"Identi.ca\" /></a></li>
	<li><a href=\"http://twitter.com/home?status=Emacs%20Identica-mode%20notifications%20-%20http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Twitter\"><img alt=\"Twitter\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/twitter.png\" title=\"Twitter\" /></a></li>
	<li class=\"sociablelast\"><a href=\"http://www.google.com/bookmarks/mark?op=edit&amp;bkmk=http%3A%2F%2Fblog.nethazard.net%2Femacs-identica-mode-notifications%2F&amp;title=Emacs%20Identica-mode%20notifications&amp;annotation=There%27s%20a%20feature%20on%20Emacs%20identica-mode%20that%20I%20haven%27t%20documented%20or%20written%20about%20before%20and%20its%20been%20there%20for%20quite%20some%20time.%0D%0A%0D%0AIts%20very%20nice%20to%20have%20notifications%20when%20you%20get%20new%20updates%20on%20your%20timeline.%20I%27ve%20seen%20it%20on%20other%20clients%20like%20Tw\" rel=\"nofollow\" target=\"_blank\" title=\"Google Bookmarks\"><img alt=\"Google Bookmarks\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/googlebookmark.png\" title=\"Google Bookmarks\" /></a></li>
</ul>
</div>
<img alt=\"\" src=\"http://blog.nethazard.net/?ak_action=api_record_view&amp;id=734&amp;type=feed\" />

<p>Related posts:</p><ol><li><a href=\"http://blog.nethazard.net/emacs-identica-mode-with-replies-highlighting/\" rel=\"bookmark\" title=\"Permanent Link: Emacs identica-mode with replies highlighting\">Emacs identica-mode with replies highlighting</a></li>
<li><a href=\"http://blog.nethazard.net/emacs-identica-mode-version-0-7/\" rel=\"bookmark\" title=\"Permanent Link: Emacs identica-mode version 0.7\">Emacs identica-mode version 0.7</a></li>
<li><a href=\"http://blog.nethazard.net/identica-mode-for-emacs-update-support-for-any-laconica-server/\" rel=\"bookmark\" title=\"Permanent Link: Identica mode for Emacs update: support for any Laconica server\">Identica mode for Emacs update: support for any Laconica server</a></li>
</ol><p></p>") (author nil (name nil "Gabriel Saldaña") (uri nil "http://blog.nethazard.net")) (source nil (title ((type . "html")) "Nethazard.net » Emacs") (subtitle ((type . "html")) "Gabriel Saldana's blog about web development, free software and other lifestyle topics") (link ((rel . "self") (href . "http://blog.nethazard.net/category/linux/emacs/feed/"))) (id nil "http://blog.nethazard.net")))) ("Alex Bennée: 2010 In Memorium" "<p>2010 has been a pretty good year for us, it seems like is has packed a lot in.</p>
<p>Professionally I’ve been doing really well. The <a href=\"http://cbnl.com/\">company I work for</a> has had yet another record breaking year which has triggered my bonus again (although I don’t find out how much until I get back). It continues to grow in both revenue and <a href=\"http://cbnl.com/jobs/\">size</a>. I finally feel comfortable with the code base I’m working with. At the same time the ever growing feature list means I’ve still got plenty of interesting things to do with it. Although the internal code is proprietary to the company I’ve got a fairly wide latitude to work with FLOSS code and it makes a significant portion of the NMS product. Pretty much anything that I hack on that is useful to the wider community outside the application specific task is fed upstream which is good for both the company and the wider world.</p>
<p>Aside from my work based hacking 2010 was also the year I became a real open source project maintainer. I’ve been <a href=\"https://github.com/stsquad\">publishing code</a> I write and use for a long time and have done maintenance work on some niche <a href=\"http://stonx.sourceforge.net/\">projects</a> as well as contributing to other projects as normal. However at the start of 2010 I released <a href=\"http://www.bennee.com/~alex/blog/2010/01/25/finally-public/\">Edit with Emacs</a> to an unsuspecting world. It started as a simple exercise in learning some Chrome Javascript and kicking me to delve deeper into elisp coding. However since then it has grown to something that gets regular contributions and is used by <a href=\"https://chrome.google.com/extensions/detail/ljobjlafonikaiipfkggjbhkghgicgoh\">over a thousand people</a>. To quote Blur it gives me an enormous sense of well being <img alt=\":-)\" class=\"wp-smiley\" src=\"http://www.bennee.com/~alex/blog/wp-includes/images/smilies/icon_smile.gif\" /> </p>
<p>This year has also been an interesting year politically. While there is plenty of debate about the economics of some of the choices made by the coalition I’m personally fairly happy with the approach being taken given the fairly dire conditions they inherited. From my geek point of view it’s heartening to see the pre-election commitment that was made to open data seems to be being lived up to. I’m hoping the changes to openness will get embedded into the way government does business permanently.  </p>
<p>The big thing that dwarfed all other things this year of course was getting married to the wonderful Fliss. Saving up all my holidays for the honeymoon meant we didn’t have many extended breaks and of course as the logistical tasks approached there was much running around and controlled panics. In the end everything went like a dream and the wedding itself was a blur of happy memories. It was a fantastic day and made all the better for all the friends and family that came along to share in the celebration. Getting married to Fliss is quite possibly the best thing I’ve ever done.</p>
<p>I do occasionally have pangs of guilt considering how lucky we have been especially when so many are struggling with the uncertainty of the economic situation and the stress that causes. All I can do is wish the best of lucky to everyone for the next year. I hope it exceeds the positive expectations and under-performs on the negative ones!</p>" "http://www.bennee.com/~alex/blog/2011/01/02/2010-in-memorium/" (19744 39123) old 29 nil nil ((title ((type . "html") (xml:lang . "en")) "Alex Bennée: 2010 In Memorium") (link ((href . "http://www.bennee.com/~alex/blog/2011/01/02/2010-in-memorium/"))) (id nil "http://www.bennee.com/~alex/blog/?p=2129") (updated nil "2011-01-02T15:25:07+00:00") (content ((type . "html") (xml:lang . "en")) "<p>2010 has been a pretty good year for us, it seems like is has packed a lot in.</p>
<p>Professionally I’ve been doing really well. The <a href=\"http://cbnl.com/\">company I work for</a> has had yet another record breaking year which has triggered my bonus again (although I don’t find out how much until I get back). It continues to grow in both revenue and <a href=\"http://cbnl.com/jobs/\">size</a>. I finally feel comfortable with the code base I’m working with. At the same time the ever growing feature list means I’ve still got plenty of interesting things to do with it. Although the internal code is proprietary to the company I’ve got a fairly wide latitude to work with FLOSS code and it makes a significant portion of the NMS product. Pretty much anything that I hack on that is useful to the wider community outside the application specific task is fed upstream which is good for both the company and the wider world.</p>
<p>Aside from my work based hacking 2010 was also the year I became a real open source project maintainer. I’ve been <a href=\"https://github.com/stsquad\">publishing code</a> I write and use for a long time and have done maintenance work on some niche <a href=\"http://stonx.sourceforge.net/\">projects</a> as well as contributing to other projects as normal. However at the start of 2010 I released <a href=\"http://www.bennee.com/~alex/blog/2010/01/25/finally-public/\">Edit with Emacs</a> to an unsuspecting world. It started as a simple exercise in learning some Chrome Javascript and kicking me to delve deeper into elisp coding. However since then it has grown to something that gets regular contributions and is used by <a href=\"https://chrome.google.com/extensions/detail/ljobjlafonikaiipfkggjbhkghgicgoh\">over a thousand people</a>. To quote Blur it gives me an enormous sense of well being <img alt=\":-)\" class=\"wp-smiley\" src=\"http://www.bennee.com/~alex/blog/wp-includes/images/smilies/icon_smile.gif\" /> </p>
<p>This year has also been an interesting year politically. While there is plenty of debate about the economics of some of the choices made by the coalition I’m personally fairly happy with the approach being taken given the fairly dire conditions they inherited. From my geek point of view it’s heartening to see the pre-election commitment that was made to open data seems to be being lived up to. I’m hoping the changes to openness will get embedded into the way government does business permanently.  </p>
<p>The big thing that dwarfed all other things this year of course was getting married to the wonderful Fliss. Saving up all my holidays for the honeymoon meant we didn’t have many extended breaks and of course as the logistical tasks approached there was much running around and controlled panics. In the end everything went like a dream and the wedding itself was a blur of happy memories. It was a fantastic day and made all the better for all the friends and family that came along to share in the celebration. Getting married to Fliss is quite possibly the best thing I’ve ever done.</p>
<p>I do occasionally have pangs of guilt considering how lucky we have been especially when so many are struggling with the uncertainty of the economic situation and the stress that causes. All I can do is wish the best of lucky to everyone for the next year. I hope it exceeds the positive expectations and under-performs on the negative ones!</p>") (author nil (name nil "Alex") (uri nil "http://www.bennee.com/~alex/blog")) (source nil (title ((type . "html")) "Alex's Adventures on the Infobahn » emacs") (subtitle ((type . "html")) "the wanderings of a supposed digital native") (link ((rel . "self") (href . "http://www.bennee.com/~alex/blog/tag/emacs/feed/"))) (id nil "http://www.bennee.com/~alex/blog")))) ("Kyle Sexton: Fixed MobileOrg" "<p>
</p><p>I kept getting a \"Wrong type argument: stringp, nil\" error when I tried to do org-mobile-pull. The trick is to understand that 'org-mobile-inbox-for-pull' should be set to a file in your org directory, not the file that org-mobile is writing to. </p><p></p> This: (setq org-mobile-inbox-for-pull \"~/Dropbox/orgmode/mobileorg.org\") <p></p> Not this: <p></p> (setq org-mobile-inbox-for-pull \"~/Dropbox/MobileOrg/mobileorg.org\")<p></p>
<p></p>
<p><a href=\"http://mocker.org/mobileorg\">Permalink</a>
| <a href=\"http://mocker.org/mobileorg#comment\">Leave a comment  »</a>
</p>" "http://mocker.org/mobileorg" (19743 37032) old 30 nil nil ((title ((type . "html")) "Kyle Sexton: Fixed MobileOrg") (link ((href . "http://mocker.org/mobileorg"))) (id nil "http://mocker.org/mobileorg") (updated nil "2011-01-01T20:38:00+00:00") (content ((type . "html")) "<p>
	</p><p>I kept getting a \"Wrong type argument: stringp, nil\" error when I tried to do org-mobile-pull. The trick is to understand that 'org-mobile-inbox-for-pull' should be set to a file in your org directory, not the file that org-mobile is writing to. </p><p></p> This: (setq org-mobile-inbox-for-pull \"~/Dropbox/orgmode/mobileorg.org\") <p></p> Not this: <p></p> (setq org-mobile-inbox-for-pull \"~/Dropbox/MobileOrg/mobileorg.org\")<p></p>
	
<p></p>

<p><a href=\"http://mocker.org/mobileorg\">Permalink</a> 

	| <a href=\"http://mocker.org/mobileorg#comment\">Leave a comment  »</a>

</p>") (author nil (name nil "Kyle Sexton") (uri nil "http://mocker.org")) (source nil (title ((type . "html")) "mocker.org") (subtitle ((type . "html")) "Most recent posts at mocker.org") (link ((rel . "self") (href . "http://mocker.org/rss.xml"))) (id nil "http://mocker.org")))))